var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AlgoMatchingController.html",[0,0.884,1,3.098]],["body/controllers/AlgoMatchingController.html",[0,1.227,1,5.234,2,1.227,3,0.168,4,0.168,5,0.151,6,4.301,7,4.301,8,5.132,9,2.462,10,6.247,11,0.01,12,0.246,13,0.011,14,0.469,15,4.96,16,5.132,17,5.855,18,0.168,19,0.157,20,1.46,21,3.401,22,0.009]],["title/modules/AlgoMatchingModule.html",[23,0.833,24,3.098]],["body/modules/AlgoMatchingModule.html",[1,5.407,2,1.408,3,0.152,4,0.152,5,0.137,6,3.91,7,3.91,10,5.889,11,0.009,12,0.254,13,0.011,14,0.426,15,5.255,16,4.666,18,0.152,19,0.143,22,0.009,23,1.454,24,5.979,25,1.783,26,1.839,27,1.959,28,1.959,29,1.839,30,2.709,31,1.959,32,4.666,33,4.666,34,2.472,35,1.898,36,1.898,37,5.323,38,5.323]],["title/injectables/AlgoMatchingService.html",[15,2.723,39,0.696]],["body/injectables/AlgoMatchingService.html",[3,0.18,4,0.18,5,0.162,6,4.614,7,4.614,11,0.01,12,0.217,13,0.011,14,0.503,15,4.8,18,0.18,19,0.168,22,0.01,39,1.226,40,2.041,41,5.506]],["title/controllers/AppController.html",[0,0.884,42,3.098]],["body/controllers/AppController.html",[0,1.454,2,1.175,3,0.161,4,0.161,5,0.144,11,0.009,12,0.239,13,0.011,14,0.449,18,0.161,19,0.15,20,1.398,21,3.257,22,0.009,42,5.098,43,4.916,44,0.62,45,1.371,46,6.904,47,1.44,48,0.62,49,5.609,50,1.108,51,1.145,52,4.867,53,4.916,54,1.141,55,5.609]],["title/modules/AppModule.html",[23,0.833,56,3.098]],["body/modules/AppModule.html",[2,0.81,3,0.07,4,0.07,5,0.063,11,0.005,12,0.288,13,0.011,14,0.196,18,0.07,19,0.066,22,0.005,23,0.945,25,0.822,26,0.848,27,0.903,28,0.903,29,0.848,30,1.76,31,0.903,34,1.422,35,0.875,36,0.875,42,3.512,52,4.048,53,2.15,56,6.342,57,2.15,58,2.15,59,2.15,60,4.301,61,4.301,62,4.301,63,4.301,64,4.301,65,4.301,66,4.048,67,4.301,68,4.301,69,4.301,70,4.301,71,4.301,72,4.301,73,4.048,74,4.799,75,4.301,76,4.301,77,4.048,78,4.048,79,3.831,80,3.831,81,2.453,82,3.281,83,3.281,84,3.512,85,2.362,86,2.453,87,1.951,88,1.584,89,2.15,90,2.453,91,3.865,92,1.951,93,2.839,94,2.453,95,2.453,96,2.15,97,2.453,98,2.453,99,2.453,100,2.453,101,2.453,102,2.453,103,2.453,104,2.453,105,2.453,106,2.453,107,2.15,108,2.453,109,2.453,110,2.453,111,2.453,112,2.453,113,2.453,114,2.453,115,2.453,116,2.453,117,2.453,118,1.425,119,2.453,120,2.453]],["title/injectables/AppService.html",[39,0.696,52,2.723]],["body/injectables/AppService.html",[3,0.168,4,0.168,5,0.151,11,0.009,12,0.202,13,0.011,14,0.469,18,0.168,19,0.157,22,0.009,39,1.176,40,1.903,44,0.647,45,1.408,46,7.008,48,0.647,50,1.157,51,1.176,52,4.601,54,1.191,121,5.132,122,5.855,123,5.855,124,5.855]],["title/injectables/AtGuard.html",[39,0.696,93,3.098]],["body/injectables/AtGuard.html",[3,0.14,4,0.14,5,0.126,11,0.008,12,0.244,13,0.011,14,0.392,18,0.14,19,0.131,20,1.221,22,0.008,39,1.05,40,1.591,44,0.541,45,1.258,48,0.704,50,0.967,54,1.296,92,3.894,93,4.677,118,2.844,125,4.292,126,6.368,127,1.498,128,4.896,129,7.963,130,4.896,131,1.186,132,1.05,133,0.704,134,1.151,135,6.368,136,6.568,137,4.896,138,4.292,139,4.896,140,3.596,141,2.712,142,4.896,143,3.894,144,1.861,145,6.368,146,4.292,147,4.896,148,4.896,149,4.896,150,4.896]],["title/injectables/AuthConfig.html",[39,0.696,151,2.577]],["body/injectables/AuthConfig.html",[3,0.131,4,0.131,5,0.118,11,0.008,12,0.158,13,0.011,14,0.367,18,0.131,19,0.123,22,0.008,39,1.007,40,1.491,44,0.507,48,0.841,51,1.29,133,0.758,151,3.729,152,4.023,153,2.176,154,3.356,155,6.856,156,6.009,157,6.856,158,6.009,159,6.009,160,4.418,161,5.587,162,6.102,163,6.102,164,4.59,165,6.102,166,4.59,167,6.102,168,4.59,169,6.102,170,4.59,171,6.102,172,4.59]],["title/controllers/AuthController.html",[0,0.884,173,3.098]],["body/controllers/AuthController.html",[0,0.545,2,0.545,3,0.074,4,0.074,5,0.067,9,1.094,11,0.005,12,0.222,13,0.011,14,0.208,18,0.074,19,0.109,20,0.649,22,0.005,44,0.287,45,0.8,47,1.829,48,0.787,50,1.408,51,1.309,54,1.45,131,1.292,132,1.144,133,0.767,134,1.254,154,3.034,173,2.972,174,2.28,175,2.601,176,2.565,177,2.241,178,3.547,179,3.547,180,3.547,181,3.547,182,3.547,183,3.547,184,2.28,185,5.238,186,2.601,187,2.601,188,3.774,189,2.247,190,2.28,191,2.601,192,2.601,193,2.397,194,2.28,195,2.601,196,2.601,197,2.28,198,2.601,199,2.601,200,2.601,201,2.601,202,2.601,203,2.143,204,2.601,205,2.601,206,2.28,207,2.601,208,2.601,209,3.547,210,2.28,211,2.601,212,2.601,213,2.28,214,4.911,215,2.601,216,2.601,217,1.268,218,2.28,219,1.268,220,1.268,221,2.28,222,1.094,223,1.911,224,1.511,225,1.589,226,3.034,227,2.069,228,2.601,229,1.133,230,2.601,231,2.601,232,2.601,233,2.601,234,2.601,235,2.601,236,2.776,237,2.601,238,2.776,239,4.455,240,1.973,241,2.601,242,2.601,243,2.601,244,2.601,245,2.601,246,2.601,247,2.601,248,2.601,249,2.601,250,2.601,251,2.601,252,2.601,253,2.601,254,2.601,255,2.601,256,2.601,257,2.601,258,2.601,259,2.601,260,2.601,261,2.28,262,2.601]],["title/classes/AuthDto.html",[19,0.113,185,2.893]],["body/classes/AuthDto.html",[3,0.159,4,0.159,5,0.143,11,0.009,12,0.191,13,0.011,18,0.159,19,0.185,22,0.009,44,0.613,47,1.769,48,0.762,51,1.294,133,0.762,153,2.457,185,4.728,193,2.591,229,2.415,263,1.916,264,4.86,265,6.573,266,4.003,267,5.545,268,5.545,269,3.972,270,3.656]],["title/modules/AuthModule.html",[23,0.833,60,2.893]],["body/modules/AuthModule.html",[2,1.311,3,0.137,4,0.137,5,0.123,11,0.008,12,0.273,13,0.011,14,0.382,18,0.137,19,0.128,22,0.008,23,1.38,25,1.598,26,1.648,27,1.755,28,1.755,29,1.648,30,2.571,31,1.755,34,2.303,35,1.7,36,1.7,60,5.724,85,2.914,140,3.503,151,4.831,173,5.132,226,4.831,227,3.792,271,4.18,272,4.18,273,5.423,274,4.769,275,4.769,276,3.792,277,4.769,278,4.769,279,4.769,280,4.769,281,3.792]],["title/injectables/AuthService.html",[39,0.696,226,2.577]],["body/injectables/AuthService.html",[3,0.042,4,0.042,5,0.038,11,0.003,12,0.168,13,0.011,14,0.117,18,0.042,19,0.039,20,0.364,22,0.003,35,0.52,39,0.415,40,0.474,44,0.161,45,0.497,48,0.681,50,1.137,51,1.163,54,1.119,127,0.446,131,1.112,132,0.985,133,0.681,134,1.08,144,2.712,151,3.181,153,0.897,156,1.279,159,1.279,176,2.418,177,1.836,178,2.204,179,2.204,180,2.204,181,2.204,182,2.204,183,2.204,184,2.204,185,4.704,188,3.048,189,1.628,190,2.204,193,2.466,194,2.204,197,2.204,206,2.204,209,2.204,210,2.204,213,2.204,214,2.905,220,0.711,221,1.279,226,1.537,236,3.049,238,3.049,239,3.535,240,2.369,265,5.554,276,1.16,282,1.279,283,3.309,284,3.314,285,2.515,286,2.515,287,1.001,288,1.362,289,2.515,290,1.624,291,2.515,292,1.459,293,3.941,294,1.459,295,2.515,296,1.459,297,1.459,298,1.459,299,1.459,300,1.459,301,1.459,302,1.459,303,3.941,304,1.847,305,2.515,306,1.16,307,1.072,308,5.206,309,5.206,310,1.459,311,2.515,312,1.279,313,1.279,314,1.279,315,1.279,316,0.613,317,5.501,318,3.291,319,1.459,320,1.459,321,5.206,322,2.045,323,4.86,324,4.86,325,1.459,326,1.001,327,5.043,328,1.459,329,5.501,330,2.515,331,4.098,332,5.206,333,2.515,334,4.86,335,2.636,336,1.459,337,1.459,338,3.941,339,3.941,340,1.459,341,3.941,342,1.459,343,4.445,344,2.515,345,1.459,346,1.072,347,1.16,348,1.459,349,1.459,350,2.515,351,2.515,352,1.459,353,2.905,354,1.459,355,1.459,356,1.459,357,1.459,358,2.515,359,1.16,360,1.459,361,1.279,362,2.58,363,1.459,364,1.459,365,1.459,366,3.314,367,1.459,368,1.459,369,1.459,370,1.459,371,3.314,372,1.459,373,2.515,374,1.459,375,1.459,376,1.459,377,1.459,378,1.459,379,1.459,380,1.394,381,1.459,382,1.459,383,1.459,384,1.459,385,1.459,386,1.459,387,2.515,388,1.459,389,2.515,390,0.847,391,2.515,392,2,393,1.459,394,0.537,395,0.808]],["title/controllers/BetaUsersController.html",[0,0.884,396,3.098]],["body/controllers/BetaUsersController.html",[0,1.084,2,1.084,3,0.148,4,0.148,5,0.133,9,2.175,11,0.009,12,0.25,13,0.011,14,0.414,18,0.148,19,0.139,20,1.29,22,0.009,44,0.572,45,1.304,47,1.328,48,0.572,50,1.022,54,1.053,131,0.963,132,0.853,133,0.572,134,0.935,188,3.495,217,2.522,219,3.542,220,2.522,396,4.846,397,4.534,398,4.534,399,5.246,400,5.783,401,5.173,402,5.248,403,5.173,404,4.534,405,4.69,406,4.534,407,5.173,408,5.173,409,5.173]],["title/classes/BetaUsersDto.html",[19,0.113,402,2.893]],["body/classes/BetaUsersDto.html",[3,0.145,4,0.145,5,0.13,11,0.008,12,0.224,13,0.011,18,0.145,19,0.174,22,0.008,44,0.558,47,1.843,48,0.838,51,1.324,133,0.838,153,2.316,193,2.481,229,2.199,263,1.744,269,4.016,270,3.696,402,4.455,410,4.425,411,4.926,412,2.481,413,4.926,414,7.181,415,5.048,416,5.048,417,3.167,418,5.048,419,5.048,420,3.259,421,2.461]],["title/modules/BetaUsersModule.html",[23,0.833,61,2.893]],["body/modules/BetaUsersModule.html",[2,1.421,3,0.155,4,0.155,5,0.139,11,0.009,12,0.256,13,0.011,14,0.432,18,0.155,19,0.145,22,0.009,23,1.464,25,1.81,26,1.867,27,1.988,28,1.988,29,1.867,30,2.727,31,1.988,34,2.495,35,1.926,36,1.926,61,5.605,396,5.443,405,5.275,406,4.735,422,4.735,423,4.735,424,5.402,425,5.402]],["title/injectables/BetaUsersService.html",[39,0.696,405,2.723]],["body/injectables/BetaUsersService.html",[3,0.132,4,0.132,5,0.119,11,0.008,12,0.237,13,0.011,14,0.37,18,0.132,19,0.124,22,0.008,39,1.011,40,1.501,44,0.51,45,1.211,48,0.677,50,0.913,54,0.94,127,1.875,131,1.141,132,1.011,133,0.677,134,1.107,176,2.168,189,1.547,193,2.117,240,2.252,283,2.558,288,2.531,316,1.942,318,2.086,322,1.814,346,3.392,347,3.673,362,2.166,380,1.942,402,5.025,404,4.048,405,3.956,426,4.048,427,3.744,428,2.682,429,4.618,430,3.559,431,4.501,432,4.618,433,4.204,434,2.822,435,3.392,436,6.128,437,4.618,438,6.128,439,4.618,440,4.618]],["title/controllers/BugsBetaController.html",[0,0.884,84,3.098]],["body/controllers/BugsBetaController.html",[0,0.725,2,0.725,3,0.099,4,0.099,5,0.089,9,1.456,11,0.006,12,0.223,13,0.011,14,0.277,18,0.099,19,0.093,20,0.863,22,0.006,44,0.383,45,0.991,47,1.837,48,0.791,50,1.415,51,1.322,54,1.457,78,3.808,84,3.684,131,1.278,132,1.133,133,0.759,134,1.241,177,1.918,188,3.792,203,2.657,217,2.876,219,2.876,220,1.688,398,4.397,400,4.397,412,2.552,420,3.238,441,3.034,442,3.462,443,5.144,444,4.397,445,4.397,446,5.016,447,5.016,448,3.462,449,4.437,450,3.462,451,3.462,452,3.034,453,2.753,454,3.462,455,3.462,456,3.462,457,3.462,458,3.462,459,4.437,460,3.034,461,3.462,462,3.462,463,2.753,464,3.462,465,2.115,466,2.375,467,2.115,468,3.462,469,3.034,470,2.543,471,3.462,472,3.462,473,3.462,474,2.543,475,3.034,476,3.462,477,3.462,478,3.034,479,3.462,480,3.462,481,3.462,482,3.462,483,3.462,484,3.462,485,2.753,486,3.462,487,3.462]],["title/classes/BugsBetaDto.html",[19,0.113,449,2.893]],["body/classes/BugsBetaDto.html",[3,0.141,4,0.141,5,0.126,11,0.008,12,0.22,13,0.011,18,0.141,19,0.171,22,0.008,44,0.543,47,1.819,48,0.859,51,1.315,133,0.859,153,2.275,229,2.14,263,1.698,266,3.706,269,3.755,270,3.792,394,2.609,412,2.449,417,3.112,420,5.146,421,2.395,449,4.378,488,4.306,489,4.117,490,6.213,491,4.913,492,4.913,493,4.913,494,4.913,495,4.913]],["title/modules/BugsBetaModule.html",[23,0.833,62,2.893]],["body/modules/BugsBetaModule.html",[3,0.181,4,0.181,5,0.163,11,0.01,12,0.219,13,0.011,14,0.507,18,0.181,19,0.17,22,0.01,23,1.476,25,2.123,62,5.126,496,6.336]],["title/injectables/BugsBetaService.html",[39,0.696,78,2.723]],["body/injectables/BugsBetaService.html",[3,0.085,4,0.085,5,0.076,11,0.006,12,0.233,13,0.011,14,0.236,18,0.085,19,0.079,22,0.006,39,0.736,40,0.959,44,0.326,45,0.881,48,0.775,50,1.335,51,1.319,54,1.375,78,2.879,127,1.364,131,1.258,132,1.115,133,0.747,134,1.221,144,1.122,176,2.572,177,2.47,189,2.264,193,1.541,222,1.242,224,1.715,240,1.44,283,1.635,288,2.068,316,1.242,318,1.334,322,2.524,362,2.52,380,1.875,395,1.635,412,2.496,420,3.469,421,1.44,427,2.725,428,1.715,430,2.59,435,3.275,443,4.76,444,3.908,449,4.106,452,3.908,459,4.106,469,2.588,470,2.169,497,2.588,498,4.459,499,2.728,500,2.952,501,4.459,502,3.865,503,2.952,504,5.986,505,3.908,506,2.952,507,2.952,508,2.952,509,4.459,510,2.952,511,4.459,512,2.952,513,2.169,514,4.459,515,2.952,516,3.946,517,4.459,518,2.952,519,2.952,520,3.546,521,1.804,522,1.906,523,2.588,524,2.952,525,2.952,526,2.952,527,2.588,528,2.588,529,2.348,530,2.952,531,2.952]],["title/controllers/CaloriesController.html",[0,0.884,82,2.893]],["body/controllers/CaloriesController.html",[0,1.427,2,1.14,3,0.156,4,0.156,5,0.14,11,0.009,12,0.235,13,0.011,14,0.436,18,0.156,19,0.146,20,1.357,22,0.009,44,0.601,45,1.346,47,1.397,48,0.601,50,1.075,54,1.107,79,4.544,82,4.673,131,1.013,132,0.898,133,0.601,134,0.983,203,3.608,220,2.653,467,3.325,532,4.77,533,5.971,534,4.77,535,5.442,536,5.442,537,4.77,538,5.442,539,4.77,540,5.442]],["title/modules/CaloriesModule.html",[23,0.833,63,2.893]],["body/modules/CaloriesModule.html",[2,1.421,3,0.155,4,0.155,5,0.139,11,0.009,12,0.256,13,0.011,14,0.432,18,0.155,19,0.145,22,0.009,23,1.464,25,1.81,26,1.867,27,1.988,28,1.988,29,1.867,30,2.727,31,1.988,34,2.495,35,1.926,36,1.926,63,5.605,79,4.992,82,5.084,537,4.735,541,5.402,542,5.402,543,5.402,544,5.402]],["title/injectables/CaloriesService.html",[39,0.696,79,2.577]],["body/injectables/CaloriesService.html",[3,0.126,4,0.126,5,0.113,11,0.008,12,0.231,13,0.011,14,0.352,18,0.126,19,0.118,20,1.096,22,0.008,39,0.978,40,1.429,44,0.486,45,1.172,48,0.655,50,0.869,51,1.107,54,0.895,79,3.623,127,1.345,131,1.104,132,0.978,133,0.655,134,1.072,144,2.55,154,2.636,176,2.115,189,1.473,193,1.519,222,1.849,224,2.554,240,2.891,288,2.481,316,1.849,318,2.679,322,2.636,362,2.781,380,1.849,394,2.182,428,2.554,430,3.444,502,3.828,513,3.229,521,2.687,522,3.828,545,3.854,546,5.93,547,4.397,548,5.93,549,4.397,550,5.93,551,3.496,552,5.93,553,5.93,554,4.397]],["title/controllers/ChatController.html",[0,0.884,555,3.098]],["body/controllers/ChatController.html",[0,1.103,2,1.103,3,0.151,4,0.151,5,0.136,9,2.214,11,0.009,12,0.253,13,0.011,14,0.421,18,0.151,19,0.141,20,1.313,22,0.009,44,0.582,45,1.318,47,1.352,48,0.582,50,1.04,51,1.208,54,1.072,131,0.981,132,0.869,133,0.582,134,0.952,193,2.305,225,3.218,465,3.218,555,4.901,556,4.616,557,5.266,558,6.672,559,5.266,560,5.266,561,5.266,562,3.218,563,4.475,564,4.616,565,5.266,566,5.266,567,5.266,568,5.266]],["title/classes/ChatGateway.html",[19,0.113,569,3.098]],["body/classes/ChatGateway.html",[3,0.102,4,0.102,5,0.092,11,0.007,12,0.207,13,0.011,18,0.102,19,0.096,20,0.893,22,0.007,44,0.396,45,1.015,47,1.686,48,0.824,50,1.375,54,1.416,127,1.096,131,1.348,132,1.195,133,0.824,134,1.309,153,1.832,176,1.895,189,1.199,263,1.237,563,4.425,569,3.775,570,3.138,571,7.241,572,4.505,573,4.505,574,4.505,575,4.505,576,4.505,577,3.58,578,5.139,579,6.012,580,4.505,581,6.812,582,3.58,583,4.505,584,3.58,585,5.139,586,6.415,587,3.58,588,3.58,589,6.012,590,5.139,591,3.58,592,3.58,593,5.139,594,3.58,595,3.58,596,3.58,597,5.139,598,3.138,599,3.58,600,2.847,601,3.58,602,3.58,603,3.58,604,3.58,605,3.58,606,3.58,607,3.58,608,3.58,609,3.58,610,3.58]],["title/modules/ChatModule.html",[23,0.833,64,2.893]],["body/modules/ChatModule.html",[2,1.352,3,0.143,4,0.143,5,0.129,11,0.008,12,0.27,13,0.011,14,0.4,18,0.143,19,0.134,22,0.008,23,1.412,25,1.674,26,1.726,27,1.839,28,1.839,29,1.726,30,2.63,31,1.839,34,2.374,35,1.781,36,1.781,64,5.663,77,5.169,85,3.942,96,4.38,555,5.248,563,4.892,564,4.38,569,4.739,611,4.38,612,4.38,613,4.996,614,4.996,615,4.996,616,4.996]],["title/injectables/ChatService.html",[39,0.696,563,2.577]],["body/injectables/ChatService.html",[3,0.067,4,0.067,5,0.06,11,0.005,12,0.199,13,0.011,14,0.187,18,0.067,19,0.063,22,0.005,39,0.612,40,0.758,44,0.258,45,0.734,48,0.738,50,1.212,51,0.763,54,1.309,118,1.354,127,1.136,131,1.198,132,1.102,133,0.711,134,1.163,144,2.539,153,1.324,160,1.354,161,1.713,176,2.405,189,0.781,193,1.598,236,1.6,238,1.6,239,1.855,261,2.044,283,3.19,288,2.223,316,0.981,318,1.677,322,2.41,326,1.6,359,1.855,362,3.309,380,1.561,394,2.12,395,2.057,399,1.855,412,0.806,443,2.953,563,2.269,572,3.255,573,3.255,574,3.255,575,3.255,576,3.255,580,3.255,581,6.871,583,3.255,586,5.918,600,1.855,617,2.044,618,4.506,619,2.332,620,3.223,621,3.713,622,3.713,623,3.713,624,2.332,625,2.332,626,2.332,627,3.713,628,2.332,629,3.713,630,2.332,631,3.713,632,2.332,633,2.332,634,2.332,635,3.713,636,4.626,637,2.332,638,2.987,639,2.332,640,4.626,641,2.332,642,4.195,643,2.332,644,2.332,645,2.332,646,2.044,647,3.713,648,2.044,649,2.332,650,3.713,651,4.626,652,2.332,653,2.332,654,2.332,655,2.044,656,2.332,657,2.332,658,2.332,659,2.332,660,1.855,661,2.332,662,5.275,663,2.044,664,3.713,665,1.713,666,2.332,667,2.332,668,2.332,669,3.713,670,2.332,671,3.255,672,2.332,673,2.332,674,4.055,675,1.855,676,2.332,677,2.044,678,2.332,679,2.332,680,2.332,681,3.713]],["title/classes/CreateExercisesLibraryDto.html",[19,0.113,682,2.723]],["body/classes/CreateExercisesLibraryDto.html",[3,0.132,4,0.132,5,0.119,11,0.008,12,0.211,13,0.011,18,0.132,19,0.164,22,0.008,44,0.51,47,1.957,48,0.842,51,1.339,132,1.134,133,0.842,153,2.185,229,2.012,263,1.596,266,4.254,269,4.038,270,3.717,421,2.252,489,3.994,682,3.956,683,6.868,684,3.673,685,6.868,686,6.028,687,6.028,688,4.618,689,4.618,690,4.618,691,4.718,692,4.618,693,4.618]],["title/classes/CreateOpenffDto.html",[19,0.113,694,3.098]],["body/classes/CreateOpenffDto.html",[3,0.185,4,0.185,5,0.167,11,0.01,13,0.01,18,0.185,19,0.174,22,0.01,263,2.238,694,5.559,695,5.677,696,5.15]],["title/classes/EditInfosDto.html",[19,0.113,697,2.893]],["body/classes/EditInfosDto.html",[3,0.114,4,0.114,5,0.102,11,0.007,12,0.191,13,0.011,18,0.114,19,0.149,22,0.007,44,0.44,47,2.013,48,0.867,51,1.293,133,0.867,134,1.523,153,1.974,229,1.733,263,1.375,270,3.749,331,4.369,411,4.369,413,4.369,417,3.358,421,1.94,489,3.699,691,5.59,697,3.799,698,3.488,699,5.505,700,4.678,701,5.065,702,5.065,703,5.96,704,3.979,705,3.979,706,3.979,707,3.979,708,3.979,709,4.678,710,3.979,711,3.979,712,3.979]],["title/controllers/ExercisesLibraryController.html",[0,0.884,713,3.098]],["body/controllers/ExercisesLibraryController.html",[0,0.771,2,0.771,3,0.105,4,0.105,5,0.095,9,1.547,11,0.007,12,0.242,13,0.011,14,0.294,18,0.105,19,0.099,20,0.917,21,2.137,22,0.007,44,0.407,45,1.035,47,1.804,48,0.777,50,1.389,51,1.29,54,1.431,131,1.239,132,1.097,133,0.735,134,1.202,154,2.059,177,2.038,217,2.555,219,2.555,390,3.044,412,2.525,465,2.248,499,2.661,682,4.718,713,3.849,714,3.225,715,3.679,716,5.24,717,4.294,718,4.167,719,3.849,720,3.225,721,3.679,722,3.679,723,3.679,724,2.926,725,5.24,726,3.679,727,2.702,728,5.24,729,3.679,730,2.702,731,5.273,732,5.24,733,3.679,734,3.679,735,3.941,736,3.225,737,3.225,738,4.167,739,2.702,740,3.679,741,3.679,742,3.679,743,3.679,744,3.679,745,3.679,746,3.679,747,3.225,748,3.679,749,3.225,750,3.679]],["title/modules/ExercisesLibraryModule.html",[23,0.833,65,2.893]],["body/modules/ExercisesLibraryModule.html",[2,1.421,3,0.155,4,0.155,5,0.139,11,0.009,12,0.256,13,0.011,14,0.432,18,0.155,19,0.145,22,0.009,23,1.464,25,1.81,26,1.867,27,1.988,28,1.988,29,1.867,30,2.727,31,1.988,34,2.495,35,1.926,36,1.926,65,5.605,713,5.443,735,5.275,736,4.735,751,4.735,752,4.735,753,5.402,754,5.402]],["title/injectables/ExercisesLibraryService.html",[39,0.696,735,2.723]],["body/injectables/ExercisesLibraryService.html",[3,0.09,4,0.09,5,0.081,11,0.006,12,0.213,13,0.011,14,0.251,18,0.09,19,0.084,20,0.782,22,0.006,39,0.769,40,1.019,44,0.347,45,0.922,48,0.764,50,1.303,54,1.342,127,0.96,131,1.228,132,1.24,133,0.729,134,1.192,144,2.721,176,2.547,189,2.209,287,2.151,288,2.131,290,3.012,322,2.59,380,1.961,390,2.709,412,2.388,417,3.664,489,3.583,499,2.368,682,4.462,685,5.407,686,5.407,687,5.407,717,3.983,718,3.709,719,3.426,720,4.089,724,3.709,727,3.426,730,3.426,731,5.045,735,3.012,737,2.749,738,3.709,739,2.303,755,2.749,756,3.136,757,3.136,758,3.136,759,3.136,760,3.136,761,3.136,762,3.136,763,7.648,764,3.136,765,4.665,766,3.136,767,3.136,768,3.136,769,3.136]],["title/controllers/FileController.html",[0,0.884,770,3.098]],["body/controllers/FileController.html",[0,1.012,2,1.012,3,0.138,4,0.138,5,0.192,9,2.032,11,0.008,12,0.257,13,0.011,14,0.387,18,0.138,19,0.13,20,1.205,21,2.806,22,0.008,44,0.534,45,1.247,47,1.24,48,0.534,50,0.955,54,0.983,131,0.9,132,0.797,133,0.534,134,0.873,154,2.48,176,2.217,189,1.619,219,2.356,225,2.952,770,4.637,771,4.235,772,6.313,773,4.832,774,5.591,775,4.832,776,4.832,777,5.533,778,4.235,779,4.235,780,4.235,781,3.842,782,3.549,783,4.556,784,4.235,785,4.832,786,4.832,787,4.832,788,4.235,789,4.832,790,4.832,791,4.832]],["title/modules/FileModule.html",[23,0.833,66,2.723]],["body/modules/FileModule.html",[2,1.364,3,0.145,4,0.145,5,0.13,11,0.008,12,0.262,13,0.011,14,0.405,18,0.145,19,0.136,22,0.008,23,1.421,25,1.697,26,1.75,27,1.864,28,1.864,29,1.75,30,2.647,31,2.647,34,2.396,35,1.806,36,1.806,66,5.276,85,3.095,87,5.176,88,3.27,770,5.283,783,5.216,784,4.44,792,4.44,793,4.44,794,4.44,795,5.066,796,5.066]],["title/injectables/FileService.html",[39,0.696,783,2.577]],["body/injectables/FileService.html",[3,0.119,4,0.119,5,0.147,11,0.007,12,0.242,13,0.011,14,0.334,18,0.119,19,0.112,20,1.04,22,0.007,39,0.944,40,1.356,44,0.461,45,1.13,48,0.722,50,0.824,54,1.164,88,2.693,127,1.276,131,1.065,132,0.944,133,0.722,134,1.034,144,1.586,153,2.04,154,1.639,158,3.656,176,2.059,189,1.398,217,2.034,236,2.862,238,2.862,283,3.617,318,1.884,322,1.639,326,2.862,327,3.656,361,3.656,774,5.193,783,3.496,797,3.656,798,6.952,799,5.721,800,3.656,801,6.666,802,5.721,803,5.721,804,4.171,805,3.656,806,3.656,807,4.171,808,5.015,809,4.171,810,4.171,811,4.171,812,4.171,813,4.171,814,4.171,815,6.53,816,4.171,817,4.171,818,4.171,819,4.171,820,4.171,821,4.171,822,4.171,823,4.171,824,4.171,825,4.171,826,4.171]],["title/controllers/FormController.html",[0,0.884,827,3.098]],["body/controllers/FormController.html",[0,1.05,2,1.05,3,0.144,4,0.144,5,0.129,9,2.108,11,0.008,12,0.247,13,0.011,14,0.401,18,0.144,19,0.134,20,1.25,22,0.008,44,0.554,45,1.278,47,1.287,48,0.554,50,0.991,51,1.181,54,1.02,131,0.934,132,0.827,133,0.554,134,0.906,176,2.257,188,3.425,189,1.68,217,2.445,219,2.445,322,1.97,394,2.783,827,4.749,828,4.395,829,5.014,830,5.668,831,5.014,832,5.187,833,6.466,834,5.014,835,4.395,836,4.621,837,4.395,838,5.014,839,5.014,840,5.014]],["title/classes/FormDto.html",[19,0.113,832,2.893]],["body/classes/FormDto.html",[3,0.11,4,0.11,5,0.099,11,0.007,12,0.186,13,0.011,18,0.11,19,0.145,22,0.007,44,0.425,47,2.055,48,0.885,51,1.348,133,0.885,153,1.927,229,1.674,263,1.328,266,4.305,269,4.363,270,3.713,331,4.288,394,2.301,411,4.288,413,4.288,417,3.307,421,1.874,489,3.631,699,5.444,700,4.591,701,4.971,702,4.971,709,4.591,832,3.708,841,3.369,842,6.251,843,3.843,844,3.843,845,3.843,846,3.843,847,3.843,848,5.405,849,3.843,850,3.843,851,3.843,852,3.843,853,3.843,854,4.971]],["title/modules/FormModule.html",[23,0.833,67,2.893]],["body/modules/FormModule.html",[2,1.37,3,0.146,4,0.146,5,0.131,11,0.008,12,0.262,13,0.011,14,0.408,18,0.146,19,0.137,22,0.008,23,1.426,25,1.709,26,1.763,27,1.877,28,1.877,29,1.763,30,2.656,31,1.877,34,2.406,35,1.819,36,1.819,67,5.687,73,5.198,85,3.995,89,4.471,827,5.3,836,5.198,837,4.471,855,4.471,856,4.471,857,5.101,858,5.101,859,5.101]],["title/injectables/FormService.html",[39,0.696,836,2.723]],["body/injectables/FormService.html",[3,0.125,4,0.125,5,0.113,11,0.008,12,0.266,13,0.011,14,0.35,18,0.125,19,0.117,20,1.09,22,0.008,39,0.974,40,1.42,44,0.483,45,1.167,48,0.653,50,0.864,51,1.103,127,1.337,131,1.1,132,0.974,133,0.653,134,1.067,144,1.661,154,2.628,176,2.109,240,2.88,287,2.998,288,2.475,290,3.813,304,3.21,306,3.476,307,3.21,316,1.838,318,1.974,322,1.717,335,3.476,380,1.838,392,4.696,394,2.462,433,4.051,830,5.177,832,4.914,835,3.831,836,3.813,860,3.831,861,4.37,862,5.906,863,4.37,864,5.906,865,4.37,866,3.831,867,3.831,868,4.37,869,4.37,870,4.37,871,4.37,872,4.37,873,4.37,874,4.37]],["title/injectables/JwtStrategy.html",[39,0.696,273,2.893]],["body/injectables/JwtStrategy.html",[3,0.121,4,0.121,5,0.109,11,0.007,12,0.264,13,0.011,14,0.34,18,0.121,19,0.114,21,2.465,22,0.007,39,0.955,40,1.379,44,0.469,45,1.144,48,0.64,50,0.839,54,0.864,118,3.362,127,1.771,131,1.078,132,0.955,133,0.64,134,1.046,140,3.117,141,2.351,143,3.375,151,4.78,154,2.588,176,2.077,189,1.422,193,1.466,226,4.671,227,3.375,273,3.971,276,3.375,281,4.604,283,3.207,394,1.562,586,3.375,875,3.72,876,5.789,877,4.244,878,4.244,879,5.789,880,4.244,881,4.244,882,4.244,883,3.72,884,4.244,885,5.789,886,3.72,887,3.72,888,4.244,889,4.244,890,4.244,891,4.244,892,4.244,893,4.244,894,4.244,895,4.244,896,4.244,897,4.244,898,4.244,899,4.244,900,4.244,901,4.244,902,4.244,903,4.244,904,4.244,905,4.244,906,4.244]],["title/controllers/MealsController.html",[0,0.884,83,2.893]],["body/controllers/MealsController.html",[0,0.693,2,0.693,3,0.095,4,0.095,5,0.085,9,1.39,11,0.006,12,0.218,13,0.011,14,0.265,18,0.095,19,0.089,20,0.824,22,0.006,44,0.365,45,0.958,47,1.808,48,0.779,50,1.392,51,1.344,54,1.433,80,3.51,83,3.327,131,1.312,132,1.162,133,0.779,134,1.273,177,1.831,188,3.731,203,3.731,217,2.801,219,2.801,220,1.612,412,2.515,445,4.251,453,2.629,460,2.897,463,2.629,465,2.02,466,2.268,467,2.02,470,2.428,474,2.428,475,2.897,478,2.897,485,2.629,907,2.897,908,3.306,909,4.85,910,4.85,911,4.85,912,4.85,913,4.85,914,3.306,915,4.341,916,3.306,917,3.306,918,3.306,919,3.306,920,5.033,921,3.306,922,3.306,923,3.306,924,4.341,925,3.306,926,3.306,927,3.306,928,3.306,929,4.648,930,3.306,931,3.306,932,2.897,933,2.897,934,3.306,935,3.306,936,3.306,937,3.306,938,3.306,939,2.897,940,3.306,941,3.306,942,3.306,943,3.306,944,3.306,945,3.306,946,3.306,947,3.306,948,3.306,949,2.897,950,3.306]],["title/classes/MealsDto.html",[19,0.113,915,2.893]],["body/classes/MealsDto.html",[3,0.137,4,0.137,5,0.123,11,0.008,12,0.165,13,0.011,18,0.137,19,0.168,22,0.008,44,0.529,47,1.796,48,0.875,51,1.349,132,1.154,133,0.875,153,2.236,229,2.084,263,1.653,266,3.643,269,3.707,270,3.76,394,2.575,412,2.418,417,3.058,854,3.805,915,4.303,951,4.194,952,5.29,953,6.134,954,6.134,955,4.784,956,4.784,957,4.784,958,4.784,959,4.784,960,4.784,961,4.194,962,4.194,963,4.194]],["title/modules/MealsModule.html",[23,0.833,68,2.893]],["body/modules/MealsModule.html",[2,1.421,3,0.155,4,0.155,5,0.139,11,0.009,12,0.256,13,0.011,14,0.432,18,0.155,19,0.145,22,0.009,23,1.464,25,1.81,26,1.867,27,1.988,28,1.988,29,1.867,30,2.727,31,1.988,34,2.495,35,1.926,36,1.926,68,5.605,80,4.992,83,5.084,933,4.735,964,5.402,965,5.402,966,5.402,967,5.402]],["title/injectables/MealsService.html",[39,0.696,80,2.577]],["body/injectables/MealsService.html",[3,0.073,4,0.073,5,0.066,11,0.005,12,0.208,13,0.011,14,0.205,18,0.073,19,0.069,20,0.637,22,0.005,39,0.658,40,0.831,44,0.282,45,0.789,48,0.737,50,1.261,51,1.357,54,1.225,80,2.439,127,0.782,131,1.241,132,1.137,133,0.737,134,1.204,144,1.867,154,3.131,176,2.513,177,2.211,189,2.017,193,2.08,222,1.075,224,1.484,240,2.394,288,1.918,316,1.075,318,2.719,322,2.365,362,3.234,380,1.678,390,1.484,394,1.469,395,2.72,412,2.383,427,2.439,428,1.484,430,2.318,431,2.932,433,3.807,435,2.932,470,1.877,499,2.493,502,4.452,505,3.498,516,3.607,520,3.174,521,3,522,3.17,523,2.24,527,3.498,528,2.24,529,2.033,718,3.174,724,3.174,915,3.807,924,3.807,929,4.076,932,2.24,952,3.807,968,2.24,969,2.738,970,3.991,971,2.556,972,2.556,973,2.556,974,3.498,975,2.556,976,3.991,977,2.556,978,2.556,979,3.991,980,2.556,981,2.033,982,2.556,983,2.556,984,2.556,985,2.556,986,2.556,987,2.556,988,3.991,989,2.24,990,3.991,991,2.556]],["title/controllers/MessagesController.html",[0,0.884,992,3.098]],["body/controllers/MessagesController.html",[0,1.073,2,1.073,3,0.147,4,0.147,5,0.132,9,2.152,11,0.008,12,0.249,13,0.011,14,0.41,18,0.147,19,0.137,20,1.276,22,0.008,44,0.566,45,1.295,47,1.314,48,0.566,50,1.011,51,0.844,54,1.042,131,0.953,132,0.844,133,0.799,134,0.925,154,2.574,225,3.128,412,1.769,467,4.416,992,4.813,993,4.487,994,4.487,995,6.553,996,5.119,997,4.231,998,5.119,999,5.119,1000,4.231,1001,4.487,1002,5.119,1003,5.119,1004,5.119,1005,5.119,1006,5.119]],["title/modules/MessagesModule.html",[23,0.833,69,2.893]],["body/modules/MessagesModule.html",[2,1.421,3,0.155,4,0.155,5,0.139,11,0.009,12,0.256,13,0.011,14,0.432,18,0.155,19,0.145,22,0.009,23,1.464,25,1.81,26,1.867,27,1.988,28,1.988,29,1.867,30,2.727,31,1.988,34,2.495,35,1.926,36,1.926,69,5.605,992,5.443,1000,5.275,1001,4.735,1007,4.735,1008,4.735,1009,5.402,1010,5.402]],["title/injectables/MessagesService.html",[39,0.696,1000,2.723]],["body/injectables/MessagesService.html",[3,0.103,4,0.103,5,0.093,11,0.007,12,0.227,13,0.011,14,0.288,18,0.103,19,0.096,20,0.897,22,0.007,39,0.851,40,1.169,44,0.398,45,1.019,48,0.57,50,0.711,51,0.994,54,0.732,118,3.824,127,1.101,131,0.96,132,0.851,133,0.57,134,0.932,154,2.368,176,1.901,189,1.205,287,2.468,288,2.275,290,3.33,304,2.643,306,2.861,307,2.643,316,1.513,394,1.324,638,2.323,665,5.328,674,6.358,675,4.101,866,3.154,867,3.154,952,4.976,994,3.154,1000,3.33,1011,3.154,1012,5.157,1013,3.598,1014,5.157,1015,3.598,1016,7.253,1017,5.768,1018,7.253,1019,6.358,1020,7.253,1021,5.157,1022,3.598,1023,3.598,1024,6.028,1025,3.598,1026,3.598,1027,3.598,1028,3.598,1029,3.598,1030,3.598,1031,3.598,1032,5.157,1033,3.598,1034,3.598,1035,3.598,1036,3.598,1037,3.598,1038,3.598,1039,3.598,1040,3.598,1041,3.598,1042,3.598,1043,3.598,1044,3.598,1045,3.598]],["title/controllers/OpenffController.html",[0,0.884,1046,3.098]],["body/controllers/OpenffController.html",[0,1.095,2,1.095,3,0.15,4,0.15,5,0.135,9,2.198,11,0.009,12,0.252,13,0.011,14,0.418,18,0.15,19,0.14,20,1.304,21,3.037,22,0.009,44,0.578,45,1.312,47,1.342,48,0.578,50,1.033,51,1.204,54,1.064,131,0.974,132,0.862,133,0.578,134,0.945,154,2.609,220,3.239,225,3.195,465,3.195,717,4.288,1046,4.878,1047,4.583,1048,5.228,1049,4.583,1050,5.228,1051,5.228,1052,4.713,1053,4.583,1054,5.228,1055,5.228,1056,5.228,1057,5.228]],["title/modules/OpenffModule.html",[23,0.833,70,2.893]],["body/modules/OpenffModule.html",[2,1.421,3,0.155,4,0.155,5,0.139,11,0.009,12,0.256,13,0.011,14,0.432,18,0.155,19,0.145,22,0.009,23,1.464,25,1.81,26,1.867,27,1.988,28,1.988,29,1.867,30,2.727,31,1.988,34,2.495,35,1.926,36,1.926,70,5.605,1046,5.443,1052,5.275,1053,4.735,1058,4.735,1059,4.735,1060,5.402,1061,5.402]],["title/injectables/OpenffService.html",[39,0.696,1052,2.723]],["body/injectables/OpenffService.html",[3,0.111,4,0.111,5,0.1,11,0.007,12,0.188,13,0.011,14,0.312,18,0.111,19,0.104,20,0.971,22,0.007,39,0.9,40,1.265,44,0.43,45,1.078,48,0.603,50,0.769,51,1.039,54,1.281,127,1.192,131,1.016,132,0.9,133,0.696,134,0.986,144,2.393,176,1.985,189,1.305,218,3.413,220,1.899,236,2.671,238,2.671,288,2.572,316,1.637,322,2.143,335,3.097,380,3.02,392,3.097,420,2.514,665,2.86,717,3.522,1017,3.097,1049,4.781,1052,3.522,1062,3.413,1063,3.413,1064,3.894,1065,3.894,1066,3.894,1067,3.894,1068,3.894,1069,3.894,1070,3.894,1071,3.894,1072,3.894,1073,3.894,1074,3.894,1075,3.894,1076,3.894,1077,3.894,1078,3.894,1079,3.894,1080,3.894,1081,3.894,1082,3.894,1083,3.894,1084,3.894,1085,6.296,1086,3.894,1087,3.894,1088,3.894,1089,3.894,1090,3.894,1091,3.894,1092,3.894,1093,3.894,1094,3.894,1095,3.894,1096,3.894,1097,3.894,1098,3.894,1099,3.894,1100,3.894,1101,3.894,1102,3.894,1103,3.894,1104,3.894,1105,3.894,1106,3.894,1107,3.894]],["title/controllers/PlanningController.html",[0,0.884,1108,3.098]],["body/controllers/PlanningController.html",[0,0.548,2,0.548,3,0.075,4,0.075,5,0.067,9,1.1,11,0.005,12,0.172,13,0.011,14,0.209,18,0.075,19,0.07,20,0.652,22,0.005,44,0.289,45,0.803,47,1.725,48,0.743,50,1.328,51,1.412,54,1.368,131,1.252,132,1.109,133,0.863,134,1.215,176,2.567,177,2.76,189,2.252,193,2.672,203,4.096,217,2.967,219,1.275,412,2.401,417,3.388,463,3.231,465,1.598,466,1.794,467,1.598,562,3.045,920,5.999,939,3.562,997,4.486,1108,2.984,1109,2.292,1110,2.615,1111,3.562,1112,3.562,1113,3.562,1114,3.562,1115,4.063,1116,3.562,1117,4.063,1118,2.292,1119,2.615,1120,2.292,1121,2.615,1122,2.292,1123,2.615,1124,2.292,1125,4.063,1126,2.615,1127,2.615,1128,4.063,1129,2.615,1130,2.615,1131,4.063,1132,2.615,1133,2.615,1134,4.063,1135,2.615,1136,2.292,1137,3.217,1138,2.292,1139,2.615,1140,2.615,1141,2.615,1142,2.615,1143,2.615,1144,2.615,1145,3.562,1146,3.562,1147,4.925,1148,2.615,1149,2.615,1150,2.615,1151,2.615,1152,3.562,1153,2.615,1154,2.615,1155,2.615,1156,2.615,1157,2.615]],["title/modules/PlanningModule.html",[23,0.833,71,2.893]],["body/modules/PlanningModule.html",[2,1.421,3,0.155,4,0.155,5,0.139,11,0.009,12,0.256,13,0.011,14,0.432,18,0.155,19,0.145,22,0.009,23,1.464,25,1.81,26,1.867,27,1.988,28,1.988,29,1.867,30,2.727,31,1.988,34,2.495,35,1.926,36,1.926,71,5.605,1108,5.443,1137,5.275,1138,4.735,1158,4.735,1159,4.735,1160,5.402,1161,5.402]],["title/injectables/PlanningService.html",[39,0.696,1137,2.723]],["body/injectables/PlanningService.html",[3,0.061,4,0.061,5,0.055,11,0.004,12,0.173,13,0.011,14,0.172,18,0.061,19,0.058,22,0.004,39,0.573,40,0.698,44,0.237,45,0.687,48,0.716,50,1.23,51,1.367,54,1.266,127,1.063,131,1.207,132,1.069,133,0.866,134,1.171,144,1.912,176,2.487,189,2.085,193,2.477,203,3.433,222,0.903,224,1.247,240,2.453,283,1.19,288,1.738,316,0.903,318,3.106,322,2.763,362,3.039,380,2.115,394,1.279,395,1.925,412,2.555,417,3.159,421,1.047,428,1.247,430,2.018,513,1.577,516,3.215,521,3.074,665,3.695,920,6.02,997,4.184,1111,3.046,1112,3.046,1113,3.046,1114,3.046,1116,3.046,1118,3.046,1120,3.046,1122,3.046,1124,3.046,1137,2.244,1145,4.409,1146,3.046,1147,5.68,1152,3.046,1162,1.882,1163,3.475,1164,3.475,1165,2.148,1166,2.148,1167,2.148,1168,2.148,1169,3.475,1170,2.148,1171,2.148,1172,3.475,1173,2.148,1174,3.475,1175,2.148,1176,2.148,1177,4,1178,3.475,1179,5.03,1180,3.475,1181,3.475,1182,5.03,1183,3.475,1184,3.475,1185,3.475,1186,3.475,1187,2.148,1188,2.148,1189,3.475,1190,2.148]],["title/controllers/PreferencesController.html",[0,0.884,1191,3.098]],["body/controllers/PreferencesController.html",[0,0.971,2,0.971,3,0.133,4,0.133,5,0.119,9,1.948,11,0.008,12,0.253,13,0.011,14,0.371,18,0.133,19,0.124,20,1.155,21,2.691,22,0.008,44,0.512,45,1.213,47,1.576,48,0.679,50,1.213,51,1.294,54,1.25,131,1.144,132,1.013,133,0.679,134,1.11,188,3.253,193,2.71,217,2.259,219,3.359,225,2.831,499,3.118,562,3.752,739,3.403,1191,4.51,1192,4.061,1193,4.061,1194,4.061,1195,4.633,1196,4.061,1197,5.031,1198,4.633,1199,4.061,1200,4.447,1201,4.061,1202,4.633,1203,4.633,1204,4.633,1205,4.633,1206,4.633]],["title/modules/PreferencesModule.html",[23,0.833,72,2.893]],["body/modules/PreferencesModule.html",[2,1.421,3,0.155,4,0.155,5,0.139,11,0.009,12,0.256,13,0.011,14,0.432,18,0.155,19,0.145,22,0.009,23,1.464,25,1.81,26,1.867,27,1.988,28,1.988,29,1.867,30,2.727,31,1.988,34,2.495,35,1.926,36,1.926,72,5.605,1191,5.443,1200,5.275,1201,4.735,1207,4.735,1208,4.735,1209,5.402,1210,5.402]],["title/injectables/PreferencesService.html",[39,0.696,1200,2.723]],["body/injectables/PreferencesService.html",[3,0.121,4,0.121,5,0.109,11,0.007,12,0.227,13,0.011,14,0.338,18,0.121,19,0.113,20,1.052,22,0.007,39,0.951,40,1.371,44,0.466,45,1.139,48,0.726,50,1.139,51,1.259,54,1.173,118,2.451,127,1.291,131,1.223,132,1.084,133,0.726,134,1.187,144,2.192,176,2.406,189,1.932,193,2.637,288,2.637,316,1.774,322,2.581,362,2.704,380,1.774,394,1.553,395,2.337,499,2.928,677,5.054,739,3.099,1063,3.699,1193,3.699,1194,5.054,1197,5.235,1199,3.699,1200,3.723,1211,3.699,1212,4.219,1213,4.219,1214,5.766,1215,4.219,1216,4.219,1217,4.219,1218,4.219]],["title/modules/PrismaModule.html",[23,0.833,73,2.723]],["body/modules/PrismaModule.html",[2,1.076,3,0.147,4,0.147,5,0.132,11,0.008,12,0.25,13,0.011,14,0.411,18,0.147,19,0.138,22,0.008,23,1.431,25,1.721,26,1.775,27,1.89,28,1.89,29,1.775,30,2.664,31,2.664,34,2.417,35,1.831,36,1.831,73,5.293,85,3.139,87,5.223,88,3.316,288,2.955,1219,4.503,1220,4.503,1221,4.503,1222,5.137,1223,6.567,1224,5.137]],["title/injectables/PrismaService.html",[39,0.696,288,1.457]],["body/injectables/PrismaService.html",[3,0.135,4,0.135,5,0.122,11,0.008,12,0.24,13,0.011,14,0.378,18,0.135,19,0.127,22,0.008,39,1.026,40,1.535,44,0.522,45,1.229,48,0.768,50,1.229,88,3.049,127,1.445,131,0.879,132,0.779,133,0.522,134,0.854,141,3.445,143,3.756,176,2.486,288,2.149,322,2.443,421,2.303,660,3.756,800,5.451,801,6.731,1225,4.14,1226,6.953,1227,7.884,1228,7.884,1229,4.723,1230,4.723,1231,4.723,1232,4.723,1233,4.723,1234,4.723,1235,4.723,1236,4.723,1237,4.723]],["title/controllers/ReportsController.html",[0,0.884,1238,3.098]],["body/controllers/ReportsController.html",[0,0.941,2,0.941,3,0.129,4,0.129,5,0.116,9,1.888,11,0.008,12,0.234,13,0.011,14,0.359,18,0.129,19,0.12,20,1.12,21,2.608,22,0.008,44,0.496,45,1.188,47,1.544,48,0.665,50,1.188,51,1.348,54,1.224,131,1.12,132,0.992,133,0.665,134,1.087,176,2.451,189,2.015,217,2.19,219,3.307,390,3.939,562,4.144,1136,3.937,1238,4.418,1239,3.937,1240,4.491,1241,5.944,1242,4.491,1243,4.491,1244,4.491,1245,7.244,1246,4.491,1247,6.349,1248,4.491,1249,4.378,1250,3.937,1251,4.491,1252,4.491,1253,4.491,1254,4.491,1255,4.491]],["title/modules/ReportsModule.html",[23,0.833,74,2.893]],["body/modules/ReportsModule.html",[2,1.421,3,0.155,4,0.155,5,0.139,11,0.009,12,0.256,13,0.011,14,0.432,18,0.155,19,0.145,22,0.009,23,1.464,25,1.81,26,1.867,27,1.988,28,1.988,29,1.867,30,2.727,31,1.988,34,2.495,35,1.926,36,1.926,74,5.605,1238,5.443,1249,5.275,1250,4.735,1256,4.735,1257,4.735,1258,5.402,1259,5.402]],["title/injectables/ReportsService.html",[39,0.696,1249,2.723]],["body/injectables/ReportsService.html",[3,0.092,4,0.092,5,0.083,11,0.006,12,0.164,13,0.011,14,0.257,18,0.092,19,0.086,20,0.801,22,0.006,39,0.783,40,1.044,44,0.355,45,0.938,48,0.624,50,0.938,51,1.247,54,0.966,127,0.983,131,1.052,132,0.932,133,0.624,134,1.021,144,2.372,176,2.198,189,1.591,193,1.641,240,3.043,287,2.203,288,2.156,290,3.065,316,1.35,318,2.819,322,2.909,326,4.281,362,2.927,380,2.931,390,2.758,394,2.725,395,3.457,434,1.962,638,3.065,1241,4.951,1247,6.322,1249,3.065,1260,2.815,1261,3.211,1262,4.748,1263,3.211,1264,6.971,1265,4.748,1266,3.211,1267,4.748,1268,4.748,1269,4.748,1270,6.241,1271,3.065,1272,6.971,1273,4.162,1274,6.241,1275,5.47,1276,4.748,1277,2.815,1278,4.748]],["title/classes/Rooms.html",[19,0.113,618,3.098]],["body/classes/Rooms.html",[3,0.086,4,0.086,5,0.077,11,0.006,13,0.011,18,0.155,19,0.08,22,0.006,44,0.331,45,0.891,48,0.82,50,1.393,51,1.388,54,1.103,127,1.658,131,1.313,132,1.197,133,0.836,134,1.274,144,2.458,153,1.607,160,1.739,161,2.2,263,1.035,283,3.002,359,4.794,362,3.186,394,2.38,399,2.382,618,4.749,642,6.319,646,4.75,648,2.625,663,2.625,1279,2.382,1280,4.507,1281,4.507,1282,4.507,1283,4.507,1284,4.507,1285,4.507,1286,4.507,1287,4.507,1288,4.507,1289,2.995,1290,4.507,1291,5.667,1292,2.995,1293,7.049,1294,4.507,1295,2.995,1296,4.507,1297,2.995,1298,4.507,1299,2.995,1300,4.507,1301,2.995,1302,4.507,1303,2.995,1304,2.995,1305,4.507,1306,2.995,1307,4.507,1308,2.995,1309,5.419,1310,2.995,1311,4.507,1312,2.995,1313,2.995,1314,2.995]],["title/controllers/SportsExerciseController.html",[0,0.884,1315,3.098]],["body/controllers/SportsExerciseController.html",[0,0.715,2,0.715,3,0.098,4,0.098,5,0.088,9,1.435,11,0.006,12,0.202,13,0.011,14,0.273,18,0.098,19,0.092,20,0.851,22,0.006,44,0.377,45,0.981,47,1.829,48,0.787,50,1.408,51,1.318,54,1.45,131,1.327,132,1.175,133,0.787,134,1.287,177,1.891,188,3.895,203,3.774,217,2.853,219,1.664,220,1.664,412,2.462,427,3.034,453,2.714,465,2.086,466,2.342,474,2.507,485,2.714,499,2.521,717,3.206,719,3.647,727,2.507,730,2.507,747,2.992,749,2.992,929,4.72,949,2.992,969,3.406,1315,3.647,1316,2.992,1317,2.714,1318,4.352,1319,4.352,1320,2.992,1321,5.044,1322,3.413,1323,3.413,1324,2.992,1325,3.413,1326,3.413,1327,3.413,1328,3.413,1329,3.413,1330,3.413,1331,3.413,1332,3.413,1333,3.413,1334,3.413,1335,2.992,1336,3.206,1337,2.992,1338,3.413,1339,3.413,1340,3.413,1341,3.413,1342,3.413,1343,3.413,1344,3.413,1345,2.992,1346,3.413,1347,3.413,1348,3.413,1349,3.413,1350,3.413,1351,3.413,1352,3.413,1353,3.413]],["title/classes/SportsExerciseDto.html",[19,0.113,1321,2.893]],["body/classes/SportsExerciseDto.html",[3,0.158,4,0.158,5,0.142,11,0.009,12,0.19,13,0.011,18,0.158,19,0.184,22,0.009,44,0.608,47,1.413,48,0.826,51,1.291,132,1.233,133,0.826,153,2.446,229,2.397,263,1.902,266,3.196,269,3.634,270,3.345,394,2.751,412,2.582,417,3.345,1321,4.706,1354,4.824,1355,5.503,1356,5.503,1357,5.503]],["title/modules/SportsExerciseModule.html",[23,0.833,75,2.893]],["body/modules/SportsExerciseModule.html",[2,1.421,3,0.155,4,0.155,5,0.139,11,0.009,12,0.256,13,0.011,14,0.432,18,0.155,19,0.145,22,0.009,23,1.464,25,1.81,26,1.867,27,1.988,28,1.988,29,1.867,30,2.727,31,1.988,34,2.495,35,1.926,36,1.926,75,5.605,1315,5.443,1336,5.275,1337,4.735,1358,4.735,1359,4.735,1360,5.402,1361,5.402]],["title/injectables/SportsExerciseService.html",[39,0.696,1336,2.723]],["body/injectables/SportsExerciseService.html",[3,0.071,4,0.071,5,0.064,11,0.005,12,0.189,13,0.011,14,0.199,18,0.071,19,0.067,20,0.62,22,0.005,39,0.644,40,0.808,44,0.275,45,0.772,48,0.729,50,1.246,51,1.333,54,1.209,127,0.761,131,1.228,132,1.186,133,0.729,134,1.192,144,2.258,154,3.116,176,2.5,189,1.99,193,2.053,222,1.046,224,1.444,240,2.897,288,1.889,316,1.046,318,2.684,322,2.477,346,1.826,362,3.093,380,1.642,394,1.775,395,3.028,412,2.36,427,2.387,428,1.444,430,2.269,431,2.869,433,4.326,434,1.519,499,1.983,502,4.072,516,3.543,521,2.948,522,2.522,717,2.522,719,2.869,727,2.869,730,2.869,929,4.015,969,2.68,981,1.977,989,2.18,1177,1.977,1271,1.605,1318,5.782,1319,3.424,1321,4.525,1324,3.424,1335,2.18,1336,2.522,1362,2.18,1363,2.486,1364,2.486,1365,2.486,1366,3.906,1367,2.486,1368,2.486,1369,3.906,1370,2.486,1371,2.486,1372,2.18,1373,2.486,1374,2.486,1375,3.906,1376,2.486,1377,3.906,1378,2.486,1379,2.486,1380,2.18,1381,2.18,1382,2.486,1383,2.486]],["title/controllers/StepsController.html",[0,0.884,1384,3.098]],["body/controllers/StepsController.html",[0,1.427,2,1.14,3,0.156,4,0.156,5,0.14,11,0.009,12,0.235,13,0.011,14,0.436,18,0.156,19,0.146,20,1.357,22,0.009,44,0.601,45,1.346,47,1.397,48,0.601,50,1.075,54,1.107,131,1.013,132,0.898,133,0.601,134,0.983,203,3.608,220,2.653,467,3.325,533,5.971,534,4.77,539,4.77,1384,5.003,1385,4.77,1386,5.442,1387,5.442,1388,4.801,1389,4.77,1390,5.442,1391,5.442]],["title/modules/StepsModule.html",[23,0.833,76,2.893]],["body/modules/StepsModule.html",[2,1.379,3,0.148,4,0.148,5,0.133,11,0.008,12,0.263,13,0.011,14,0.413,18,0.148,19,0.138,22,0.008,23,1.433,25,1.727,26,1.781,27,1.897,28,1.897,29,1.781,30,2.669,31,1.897,34,2.422,35,1.838,36,1.838,76,5.699,288,2.789,316,2.168,1384,5.326,1388,5.212,1389,4.518,1392,4.518,1393,4.518,1394,5.155,1395,5.155]],["title/injectables/StepsService.html",[39,0.696,1388,2.723]],["body/injectables/StepsService.html",[3,0.126,4,0.126,5,0.113,11,0.008,12,0.231,13,0.011,14,0.352,18,0.126,19,0.118,20,1.096,22,0.008,39,0.978,40,1.429,44,0.486,45,1.172,48,0.655,50,0.869,51,1.107,54,0.895,127,1.345,131,1.104,132,0.978,133,0.655,134,1.072,144,2.55,154,2.636,176,2.115,189,1.473,193,1.519,222,1.849,224,2.554,240,2.891,288,2.481,316,1.849,318,2.679,322,2.636,362,2.781,380,1.849,394,2.182,428,2.554,430,3.444,502,3.828,513,3.229,521,2.687,522,3.828,551,3.496,1388,3.828,1396,3.854,1397,5.93,1398,4.397,1399,5.93,1400,4.397,1401,5.93,1402,5.93,1403,5.93,1404,4.397]],["title/classes/UpdateBugsBetaDto.html",[19,0.113,459,2.893]],["body/classes/UpdateBugsBetaDto.html",[3,0.145,4,0.145,5,0.13,11,0.008,12,0.224,13,0.011,18,0.145,19,0.174,22,0.008,44,0.558,47,1.843,48,0.838,51,1.251,133,0.838,153,2.316,229,2.199,263,1.744,270,3.696,412,2.481,417,3.167,420,5.183,421,2.461,459,4.455,489,4.17,490,6.294,691,5.2,703,5.71,1405,4.425,1406,5.048,1407,5.048,1408,5.048,1409,5.048]],["title/classes/UpdateExercisesLibraryDto.html",[19,0.113,731,2.893]],["body/classes/UpdateExercisesLibraryDto.html",[3,0.158,4,0.158,5,0.142,11,0.009,12,0.258,13,0.011,18,0.158,19,0.184,22,0.009,44,0.608,47,1.413,48,0.608,51,1.132,133,0.608,141,3.048,153,2.446,229,2.397,263,1.902,266,3.196,269,3.634,270,3.345,390,3.196,412,2.582,682,3.553,684,4.376,731,4.706,738,4.376,1410,6.013,1411,5.503,1412,4.824,1413,4.376,1414,4.042,1415,5.503]],["title/classes/UpdateMealsDto.html",[19,0.113,924,2.893]],["body/classes/UpdateMealsDto.html",[3,0.134,4,0.134,5,0.121,11,0.008,12,0.162,13,0.011,18,0.134,19,0.166,22,0.008,44,0.519,47,1.892,48,0.87,51,1.344,132,1.143,133,0.87,153,2.208,229,2.044,263,1.621,269,2.486,270,3.594,394,2.551,412,2.395,417,3.02,691,5.399,703,5.512,854,3.732,924,4.248,952,5.257,953,6.076,954,6.076,961,4.113,962,4.113,963,4.113,1416,4.113,1417,4.692,1418,4.692,1419,4.692,1420,4.692,1421,4.692,1422,4.692]],["title/classes/UpdateOpenffDto.html",[19,0.113,1423,3.354]],["body/classes/UpdateOpenffDto.html",[3,0.175,4,0.175,5,0.157,11,0.009,12,0.252,13,0.011,18,0.175,19,0.164,22,0.009,141,3.378,263,2.107,390,3.542,694,4.48,696,4.85,1412,5.346,1413,4.85,1414,4.48,1423,5.808,1424,5.346,1425,6.099,1426,6.099]],["title/classes/UpdatePreferenceDto.html",[19,0.113,1197,2.893]],["body/classes/UpdatePreferenceDto.html",[3,0.149,4,0.149,5,0.134,11,0.009,12,0.179,13,0.011,18,0.149,19,0.177,22,0.009,44,0.574,47,1.867,48,0.804,133,0.804,146,7.089,153,2.357,229,2.261,263,1.794,691,5.255,1197,4.536,1427,6.714,1428,4.55,1429,7.276,1430,7.276,1431,7.276,1432,7.276,1433,5.191,1434,5.191,1435,5.191,1436,7.66]],["title/injectables/UserInfoService.html",[39,0.696,620,2.577]],["body/injectables/UserInfoService.html",[3,0.041,4,0.041,5,0.1,11,0.003,12,0.188,13,0.011,14,0.114,18,0.041,19,0.038,22,0.003,39,0.408,40,0.465,44,0.158,45,0.489,48,0.676,50,1.171,51,1.286,54,1.206,127,0.757,131,1.103,132,0.977,133,0.695,134,1.071,144,2.63,154,2.634,176,2.435,188,1.31,189,1.985,193,2.391,203,1.31,222,0.601,224,1.436,240,3.142,283,1.369,288,1.344,304,1.051,316,0.601,318,2.973,322,2.82,326,3.013,331,3.013,346,1.816,347,1.138,362,3.432,380,2.398,394,2.315,395,3.019,411,0.981,412,1.344,413,0.981,421,0.697,427,1.511,428,0.831,430,1.436,431,1.816,433,1.696,435,1.816,499,1.255,502,3.683,520,1.966,521,3.149,522,2.108,551,3.822,620,1.511,697,2.668,699,1.816,709,1.051,774,2.597,783,2.376,969,1.696,974,2.167,981,1.966,997,1.596,1177,3.092,1196,2.167,1273,1.254,1275,2.862,1317,3.493,1372,1.254,1380,1.254,1381,1.254,1437,1.254,1438,2.167,1439,3.409,1440,2.472,1441,2.167,1442,2.167,1443,2.167,1444,2.167,1445,3.265,1446,1.43,1447,2.668,1448,1.43,1449,1.43,1450,2.472,1451,1.43,1452,1.43,1453,2.472,1454,1.43,1455,2.167,1456,1.43,1457,2.167,1458,1.43,1459,2.167,1460,3.85,1461,1.43,1462,2.167,1463,1.43,1464,1.43,1465,1.43,1466,0.981,1467,1.254,1468,1.254,1469,1.43,1470,2.472,1471,1.43,1472,3.265,1473,1.43,1474,2.472,1475,1.43,1476,1.43,1477,1.254,1478,1.43,1479,1.43,1480,1.43,1481,3.889,1482,1.43,1483,1.43,1484,1.43,1485,1.43,1486,1.43,1487,1.43,1488,1.43,1489,1.43,1490,1.43,1491,1.43,1492,1.43,1493,1.43,1494,1.43,1495,1.43,1496,1.43,1497,1.43,1498,1.43,1499,1.43,1500,2.472,1501,2.472,1502,2.472,1503,1.43,1504,2.472,1505,1.43,1506,2.472,1507,1.43,1508,2.472,1509,1.43,1510,2.472,1511,1.43,1512,3.265,1513,2.472,1514,1.43,1515,1.43,1516,4.806,1517,4.213,1518,4.213,1519,1.43,1520,1.43,1521,1.43,1522,2.472,1523,1.43,1524,1.43,1525,1.43,1526,1.43,1527,1.43]],["title/controllers/UserInfosController.html",[0,0.884,1528,3.098]],["body/controllers/UserInfosController.html",[0,0.52,2,0.52,3,0.071,4,0.071,5,0.176,9,1.044,11,0.005,12,0.227,13,0.011,14,0.199,18,0.071,19,0.067,20,0.619,22,0.005,44,0.274,45,0.771,47,1.802,48,0.776,50,1.388,51,1.298,54,1.491,118,1.442,131,1.271,132,1.126,133,0.794,134,1.234,144,1.832,154,1.893,188,3.338,193,2.178,203,3.881,217,2.35,219,2.35,220,1.21,225,1.517,427,2.384,466,1.703,467,1.517,474,2.865,499,1.981,562,1.517,620,2.945,675,1.974,697,3.747,700,1.823,777,2.176,778,3.419,779,2.176,780,2.176,781,1.974,782,1.823,788,2.176,969,2.676,997,2.519,1317,4.343,1320,2.176,1345,2.176,1414,1.823,1438,3.419,1439,4.787,1441,3.419,1442,3.419,1443,3.419,1444,3.419,1447,3.747,1455,2.176,1457,2.176,1459,2.176,1460,4.787,1462,2.176,1467,2.176,1468,2.176,1517,2.176,1518,2.176,1528,2.865,1529,2.176,1530,2.482,1531,2.482,1532,2.482,1533,2.482,1534,2.482,1535,2.482,1536,2.482,1537,2.482,1538,2.482,1539,2.482,1540,2.482,1541,2.482,1542,2.482,1543,2.482,1544,2.482,1545,2.482,1546,2.482,1547,2.482,1548,2.482,1549,2.482,1550,2.482,1551,2.482,1552,2.176,1553,3.901,1554,2.482,1555,2.482,1556,2.482,1557,2.482,1558,2.482,1559,2.482,1560,2.482,1561,2.482,1562,2.482,1563,2.482,1564,2.482,1565,2.482,1566,2.482,1567,2.482,1568,2.482,1569,2.482,1570,2.482,1571,2.482,1572,2.482,1573,2.482,1574,2.482,1575,2.482,1576,2.482,1577,2.482,1578,2.482,1579,2.482,1580,2.482,1581,2.482,1582,3.901,1583,2.482,1584,3.901,1585,2.482,1586,2.482,1587,2.482,1588,2.482,1589,2.482,1590,2.482,1591,2.482,1592,2.482,1593,2.482,1594,2.482,1595,2.482,1596,2.482,1597,2.482]],["title/classes/UserInfosDto.html",[19,0.113,1447,2.893]],["body/classes/UserInfosDto.html",[3,0.115,4,0.115,5,0.103,11,0.007,12,0.192,13,0.011,18,0.115,19,0.149,22,0.007,44,0.442,47,2.046,48,0.881,51,1.295,133,0.881,153,1.982,229,1.743,263,1.382,266,4.472,269,4.359,270,3.828,331,4.382,411,4.382,413,4.382,417,3.365,421,1.951,489,3.71,699,5.514,700,4.692,701,5.08,702,5.08,709,4.692,952,3.813,1447,3.813,1477,5.599,1598,3.507,1599,4.001,1600,4.001,1601,4.001,1602,4.001,1603,4.001,1604,4.001,1605,4.001,1606,4.001,1607,4.001]],["title/modules/UserInfosModule.html",[23,0.833,77,2.723]],["body/modules/UserInfosModule.html",[2,1.337,3,0.141,4,0.141,5,0.126,11,0.008,12,0.259,13,0.011,14,0.393,18,0.141,19,0.132,22,0.008,23,1.401,25,1.646,26,1.698,27,1.808,28,1.808,29,1.698,30,2.609,31,2.609,34,2.349,35,1.752,36,1.752,66,5.146,77,5.368,85,3.899,107,4.306,620,5.193,1528,5.206,1552,4.306,1608,4.306,1609,4.306,1610,4.913,1611,4.306,1612,4.913,1613,4.913]],["title/classes/UserNotFoundException.html",[19,0.113,222,1.773]],["body/classes/UserNotFoundException.html",[3,0.159,4,0.159,5,0.143,11,0.009,12,0.192,13,0.011,14,0.445,18,0.159,19,0.149,22,0.009,48,0.615,51,1.239,127,1.703,131,1.036,132,0.918,133,0.615,134,1.006,141,3.826,160,3.233,193,1.923,222,3.159,263,1.923,434,4.59,1271,3.594,1614,6.055,1615,3.818,1616,6.055,1617,4.426,1618,6.055,1619,4.088]],["title/classes/UserNotFoundException-1.html",[19,0.094,222,1.479,1017,2.798]],["body/classes/UserNotFoundException-1.html",[3,0.159,4,0.159,5,0.143,11,0.009,12,0.192,13,0.011,14,0.445,18,0.159,19,0.149,22,0.009,48,0.615,51,1.239,127,1.703,131,1.036,132,0.918,133,0.615,134,1.006,141,3.826,160,3.233,193,1.923,222,3.159,263,1.923,434,4.59,1271,3.594,1615,3.818,1616,6.055,1617,4.426,1618,6.055,1619,4.088,1620,6.055]],["title/classes/UserNotFoundException-2.html",[19,0.094,222,1.479,1019,3.084]],["body/classes/UserNotFoundException-2.html",[3,0.148,4,0.148,5,0.133,11,0.009,12,0.178,13,0.011,14,0.414,18,0.189,19,0.177,22,0.009,48,0.572,51,1.262,127,1.583,131,0.963,132,0.853,133,0.572,134,0.935,141,4.023,160,3.004,222,3.054,223,4.846,263,1.787,412,2.28,434,4.675,638,3.34,1271,3.34,1466,3.549,1615,3.549,1617,4.114,1619,4.846,1621,6.367,1622,6.367,1623,4.534]],["title/classes/UserWithoutSidekickException.html",[19,0.113,1466,2.893]],["body/classes/UserWithoutSidekickException.html",[3,0.148,4,0.148,5,0.133,11,0.009,12,0.178,13,0.011,14,0.414,18,0.189,19,0.177,22,0.009,48,0.572,51,1.262,127,1.583,131,0.963,132,0.853,133,0.572,134,0.935,141,4.023,160,3.004,222,2.774,223,4.846,263,1.787,412,2.28,434,4.675,638,3.34,1271,3.34,1466,4.526,1615,3.549,1619,4.846,1621,6.367,1622,6.367,1623,4.534,1624,5.173]],["title/coverage.html",[1625,5.053]],["body/coverage.html",[0,1.652,1,1.699,5,0.06,6,2.71,7,2.71,8,2.028,11,0.005,13,0.011,15,1.494,19,0.214,22,0.005,29,0.799,39,1.332,41,2.028,42,1.699,43,2.028,52,1.494,78,1.494,79,1.414,80,1.414,82,1.587,83,1.587,84,1.699,93,1.699,121,2.028,125,2.028,133,0.256,151,1.414,152,2.028,154,0.909,173,1.699,174,2.028,185,1.587,222,1.935,223,2.71,226,1.414,264,2.028,273,1.587,282,2.028,288,0.799,318,1.045,353,2.028,396,1.699,397,2.028,402,1.587,405,1.494,410,2.028,426,2.028,441,2.028,449,1.587,459,1.587,488,2.028,497,2.028,532,2.028,545,2.028,555,1.699,556,2.028,562,1.414,563,1.414,569,1.699,570,2.028,617,2.028,618,1.699,620,1.414,655,7.64,682,1.494,683,2.028,684,2.934,694,1.699,695,2.028,696,2.934,697,1.587,698,2.028,713,1.699,714,2.028,731,1.587,735,1.494,755,2.028,770,1.699,771,2.028,783,1.414,797,2.028,827,1.699,828,2.028,832,1.587,836,1.494,841,2.028,860,2.028,875,2.028,907,2.028,915,1.587,924,1.587,951,2.028,968,2.028,992,1.699,993,2.028,1000,1.494,1011,2.028,1046,1.699,1047,2.028,1052,1.494,1062,2.028,1108,1.699,1109,2.028,1137,1.494,1162,2.028,1191,1.699,1192,2.028,1197,1.587,1200,1.494,1211,2.028,1225,2.028,1238,1.699,1239,2.028,1249,1.494,1260,2.028,1279,1.84,1315,1.699,1316,2.028,1321,1.587,1336,1.494,1354,2.028,1362,2.028,1384,1.699,1385,2.028,1388,1.494,1396,2.028,1405,2.028,1410,2.028,1416,2.028,1423,1.84,1424,2.028,1427,2.028,1428,2.028,1437,2.028,1447,1.587,1466,1.587,1528,1.699,1529,2.028,1598,2.028,1614,2.028,1615,3.602,1620,2.028,1625,2.028,1626,2.028,1627,2.314,1628,2.314,1629,6.414,1630,7.614,1631,5.251,1632,5.251,1633,3.69,1634,7.186,1635,3.69,1636,6.113,1637,5.737,1638,4.602,1639,2.028,1640,3.69,1641,2.028,1642,6.113,1643,2.314,1644,2.028,1645,2.314,1646,2.314]],["title/dependencies.html",[26,1.754,1647,3.084]],["body/dependencies.html",[11,0.008,13,0.011,14,0.387,19,0.169,22,0.008,26,1.67,88,3.119,92,3.842,140,3.549,229,2.105,281,3.842,307,3.549,312,4.235,313,4.235,314,4.235,315,4.235,421,2.356,598,4.235,600,3.842,781,5.02,782,3.549,798,5.533,805,4.235,806,4.235,808,4.235,883,5.533,886,4.235,887,4.235,1413,3.842,1414,3.549,1648,4.832,1649,7.736,1650,4.832,1651,4.832,1652,4.832,1653,4.832,1654,4.832,1655,4.832,1656,4.832,1657,4.832,1658,4.832,1659,4.832,1660,4.832,1661,4.832,1662,4.832,1663,4.832,1664,4.832,1665,4.832,1666,4.832,1667,4.832,1668,4.832,1669,4.832,1670,4.832,1671,4.832,1672,4.832,1673,4.832,1674,4.832,1675,4.832]],["title/miscellaneous/functions.html",[1676,2.271,1677,4.448]],["body/miscellaneous/functions.html",[11,0.01,13,0.01,22,0.01,29,2.786,44,0.725,1644,5.753,1676,4.237,1677,5.753,1678,6.563]],["title/index.html",[44,0.389,1679,3.084,1680,3.084]],["body/index.html",[11,0.009,13,0.01,22,0.009,290,5.048,499,3.097,660,5.808,1681,6.099,1682,6.099,1683,6.099,1684,6.099,1685,6.099,1686,7.819,1687,6.099,1688,6.099,1689,6.099,1690,6.099,1691,6.099,1692,6.099,1693,6.099,1694,6.099,1695,6.099,1696,6.099]],["title/license.html",[1679,3.084,1680,3.084,1697,2.798]],["body/license.html",[11,0.008,13,0.008,22,0.008,36,1.7,529,3.792,638,3.079,671,4.18,782,3.503,1277,4.18,1626,4.18,1697,3.792,1698,4.769,1699,6.987,1700,4.769,1701,4.769,1702,6.259,1703,4.769,1704,4.769,1705,4.769,1706,4.769,1707,4.769,1708,4.769,1709,6.259,1710,8.268,1711,4.769,1712,4.769,1713,4.769,1714,6.987,1715,4.769,1716,6.259,1717,4.769,1718,4.769,1719,6.259,1720,4.769,1721,4.769,1722,4.769,1723,4.769,1724,4.769,1725,4.769,1726,6.259,1727,4.769,1728,4.769,1729,4.769,1730,4.769,1731,4.769,1732,4.769,1733,4.769,1734,6.259,1735,6.259,1736,4.769,1737,4.769,1738,4.769,1739,4.769,1740,4.769,1741,4.769,1742,4.769,1743,4.769,1744,4.769,1745,4.769,1746,4.769,1747,4.769,1748,4.769,1749,4.769,1750,4.769,1751,4.769,1752,4.769,1753,4.769,1754,4.769,1755,4.769,1756,4.769,1757,4.769,1758,4.769,1759,4.769,1760,4.769,1761,4.769,1762,4.769]],["title/modules.html",[25,1.931]],["body/modules.html",[11,0.008,13,0.008,22,0.008,24,3.414,25,1.557,56,3.414,60,3.188,61,3.188,62,3.188,63,3.188,64,3.188,65,3.188,66,3.001,67,3.188,68,3.188,69,3.188,70,3.188,71,3.188,72,3.188,73,3.001,74,3.188,75,3.188,76,3.188,77,3.001,1763,8.666,1764,8.666,1765,8.666,1766,8.687,1767,4.648,1768,4.648]],["title/overview.html",[1769,5.053]],["body/overview.html",[2,0.545,11,0.005,13,0.011,15,3.206,22,0.005,23,0.514,24,4.115,25,0.872,26,0.899,27,0.957,28,0.957,29,0.899,30,0.957,31,0.957,32,2.28,33,2.28,34,1.489,35,0.927,36,0.927,40,0.845,52,3.206,56,6.355,57,2.28,58,2.28,59,2.28,60,4.887,61,4.163,62,3.407,63,4.163,64,4.602,65,4.163,66,4.331,67,4.602,68,4.163,69,4.163,70,4.163,71,4.163,72,4.163,73,4.331,74,4.408,75,4.163,76,4.602,77,4.6,78,3.206,79,3.423,80,3.423,151,3.034,226,3.034,263,0.899,271,2.28,272,2.28,273,3.407,288,2.397,405,3.206,422,2.28,423,2.28,563,3.034,611,2.28,612,2.28,620,4.099,735,3.206,751,2.28,752,2.28,783,4.099,792,2.28,793,2.28,794,2.28,836,3.206,855,2.28,856,2.28,1000,3.206,1007,2.28,1008,2.28,1052,3.206,1058,2.28,1059,2.28,1137,3.206,1158,2.28,1159,2.28,1200,3.206,1207,2.28,1208,2.28,1219,2.28,1220,2.28,1221,2.28,1249,3.206,1256,2.28,1257,2.28,1336,3.206,1358,2.28,1359,2.28,1388,3.206,1392,2.28,1393,2.28,1608,2.28,1609,2.28,1611,2.28,1769,2.28,1770,2.601,1771,2.601,1772,2.601,1773,2.601]],["title/properties.html",[153,1.809,1647,3.084]],["body/properties.html",[11,0.01,13,0.011,22,0.01,153,2.309,489,3.761,1697,5.15,1774,6.476,1775,6.476,1776,6.476,1777,6.476]],["title/miscellaneous/typealiases.html",[1676,2.271,1778,5.075]],["body/miscellaneous/typealiases.html",[11,0.01,13,0.01,22,0.01,44,0.685,133,0.901,642,5.867,997,5.085,1279,4.932,1291,6.467,1676,4.004,1779,6.202,1780,7.378,1781,7.378,1782,6.202,1783,6.202]],["title/miscellaneous/variables.html",[1676,2.271,1784,4.448]],["body/miscellaneous/variables.html",[11,0.009,13,0.011,22,0.009,44,0.645,54,1.187,118,3.387,136,5.112,138,5.112,144,2.217,154,2.793,160,4.129,161,5.222,220,2.844,380,2.452,562,4.344,1639,5.112,1641,5.112,1676,3.765,1784,5.112,1785,5.832,1786,5.832,1787,5.832,1788,5.832,1789,5.832,1790,5.832,1791,5.832]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"controllers/AlgoMatchingController.html":{},"modules/AlgoMatchingModule.html":{},"injectables/AlgoMatchingService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AuthConfig.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/BetaUsersController.html":{},"classes/BetaUsersDto.html":{},"modules/BetaUsersModule.html":{},"injectables/BetaUsersService.html":{},"controllers/BugsBetaController.html":{},"classes/BugsBetaDto.html":{},"modules/BugsBetaModule.html":{},"injectables/BugsBetaService.html":{},"controllers/CaloriesController.html":{},"modules/CaloriesModule.html":{},"injectables/CaloriesService.html":{},"controllers/ChatController.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreateExercisesLibraryDto.html":{},"classes/CreateOpenffDto.html":{},"classes/EditInfosDto.html":{},"controllers/ExercisesLibraryController.html":{},"modules/ExercisesLibraryModule.html":{},"injectables/ExercisesLibraryService.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"controllers/FormController.html":{},"classes/FormDto.html":{},"modules/FormModule.html":{},"injectables/FormService.html":{},"injectables/JwtStrategy.html":{},"controllers/MealsController.html":{},"classes/MealsDto.html":{},"modules/MealsModule.html":{},"injectables/MealsService.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OpenffController.html":{},"modules/OpenffModule.html":{},"injectables/OpenffService.html":{},"controllers/PlanningController.html":{},"modules/PlanningModule.html":{},"injectables/PlanningService.html":{},"controllers/PreferencesController.html":{},"modules/PreferencesModule.html":{},"injectables/PreferencesService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ReportsController.html":{},"modules/ReportsModule.html":{},"injectables/ReportsService.html":{},"classes/Rooms.html":{},"controllers/SportsExerciseController.html":{},"classes/SportsExerciseDto.html":{},"modules/SportsExerciseModule.html":{},"injectables/SportsExerciseService.html":{},"controllers/StepsController.html":{},"modules/StepsModule.html":{},"injectables/StepsService.html":{},"classes/UpdateBugsBetaDto.html":{},"classes/UpdateExercisesLibraryDto.html":{},"classes/UpdateMealsDto.html":{},"classes/UpdateOpenffDto.html":{},"classes/UpdatePreferenceDto.html":{},"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{},"classes/UserInfosDto.html":{},"modules/UserInfosModule.html":{},"classes/UserNotFoundException.html":{},"classes/UserNotFoundException-1.html":{},"classes/UserNotFoundException-2.html":{},"classes/UserWithoutSidekickException.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":655,"title":{},"body":{"injectables/ChatService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1775,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1670,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1659,"title":{},"body":{"dependencies.html":{}}}],["0.28.5",{"_index":1656,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1658,"title":{},"body":{"dependencies.html":{}}}],["0.5.3",{"_index":1666,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1629,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1632,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1643,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1633,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1630,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1634,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1642,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1635,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1631,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1636,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1637,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1638,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":1017,"title":{"classes/UserNotFoundException-1.html":{}},"body":{"injectables/MessagesService.html":{},"injectables/OpenffService.html":{}}}],["1.0",{"_index":1085,"title":{},"body":{"injectables/OpenffService.html":{}}}],["10.0.2",{"_index":1652,"title":{},"body":{"dependencies.html":{}}}],["100000000",{"_index":1575,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["1662418101",{"_index":1020,"title":{},"body":{"injectables/MessagesService.html":{}}}],["19",{"_index":1771,"title":{},"body":{"overview.html":{}}}],["1mpnqzsdjrbns",{"_index":1104,"title":{},"body":{"injectables/OpenffService.html":{}}}],["2",{"_index":1019,"title":{"classes/UserNotFoundException-2.html":{}},"body":{"injectables/MessagesService.html":{}}}],["2.1.4",{"_index":1663,"title":{},"body":{"dependencies.html":{}}}],["2.3.1",{"_index":1650,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1770,"title":{},"body":{"overview.html":{}}}],["2022",{"_index":1701,"title":{},"body":{"license.html":{}}}],["21",{"_index":1773,"title":{},"body":{"overview.html":{}}}],["23",{"_index":1772,"title":{},"body":{"overview.html":{}}}],["3.0.1",{"_index":1665,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":1672,"title":{},"body":{"dependencies.html":{}}}],["3.289.0",{"_index":1648,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":1667,"title":{},"body":{"dependencies.html":{}}}],["4.5.0",{"_index":1654,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":893,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["5.1.0",{"_index":1662,"title":{},"body":{"dependencies.html":{}}}],["5.2.10",{"_index":1655,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":1674,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":1675,"title":{},"body":{"dependencies.html":{}}}],["9.0.3",{"_index":1653,"title":{},"body":{"dependencies.html":{}}}],["9.3.9",{"_index":1649,"title":{},"body":{"dependencies.html":{}}}],["_",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{}}}],["_fileservice",{"_index":1445,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["_prismaservice",{"_index":430,"title":{},"body":{"injectables/BetaUsersService.html":{},"injectables/BugsBetaService.html":{},"injectables/CaloriesService.html":{},"injectables/MealsService.html":{},"injectables/PlanningService.html":{},"injectables/SportsExerciseService.html":{},"injectables/StepsService.html":{},"injectables/UserInfoService.html":{}}}],["_res",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["_result",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{}}}],["above",{"_index":1733,"title":{},"body":{"license.html":{}}}],["acceptable",{"_index":1581,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["access_token",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["accesskeyid",{"_index":811,"title":{},"body":{"injectables/FileService.html":{}}}],["acl",{"_index":823,"title":{},"body":{"injectables/FileService.html":{}}}],["action",{"_index":1756,"title":{},"body":{"license.html":{}}}],["add",{"_index":427,"title":{},"body":{"injectables/BetaUsersService.html":{},"injectables/BugsBetaService.html":{},"injectables/MealsService.html":{},"controllers/SportsExerciseController.html":{},"injectables/SportsExerciseService.html":{},"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{}}}],["add(@request",{"_index":1345,"title":{},"body":{"controllers/SportsExerciseController.html":{},"controllers/UserInfosController.html":{}}}],["add(bugbeta",{"_index":501,"title":{},"body":{"injectables/BugsBetaService.html":{}}}],["add(datas",{"_index":431,"title":{},"body":{"injectables/BetaUsersService.html":{},"injectables/MealsService.html":{},"injectables/SportsExerciseService.html":{},"injectables/UserInfoService.html":{}}}],["add(req",{"_index":1320,"title":{},"body":{"controllers/SportsExerciseController.html":{},"controllers/UserInfosController.html":{}}}],["addbugsbeta",{"_index":400,"title":{},"body":{"controllers/BetaUsersController.html":{},"controllers/BugsBetaController.html":{}}}],["addbugsbeta(@body",{"_index":408,"title":{},"body":{"controllers/BetaUsersController.html":{}}}],["addbugsbeta(@request",{"_index":472,"title":{},"body":{"controllers/BugsBetaController.html":{}}}],["addbugsbeta(dto",{"_index":401,"title":{},"body":{"controllers/BetaUsersController.html":{}}}],["addbugsbeta(req",{"_index":448,"title":{},"body":{"controllers/BugsBetaController.html":{}}}],["addmeal",{"_index":909,"title":{},"body":{"controllers/MealsController.html":{}}}],["addmeal(@request",{"_index":935,"title":{},"body":{"controllers/MealsController.html":{}}}],["addmeal(req",{"_index":914,"title":{},"body":{"controllers/MealsController.html":{}}}],["addroom",{"_index":1280,"title":{},"body":{"classes/Rooms.html":{}}}],["addroom(room",{"_index":1288,"title":{},"body":{"classes/Rooms.html":{}}}],["addusertoroom",{"_index":1281,"title":{},"body":{"classes/Rooms.html":{}}}],["addusertoroom(roomid",{"_index":1290,"title":{},"body":{"classes/Rooms.html":{}}}],["algo",{"_index":10,"title":{},"body":{"controllers/AlgoMatchingController.html":{},"modules/AlgoMatchingModule.html":{}}}],["algomatchingcontroller",{"_index":1,"title":{"controllers/AlgoMatchingController.html":{}},"body":{"controllers/AlgoMatchingController.html":{},"modules/AlgoMatchingModule.html":{},"coverage.html":{}}}],["algomatchingmodule",{"_index":24,"title":{"modules/AlgoMatchingModule.html":{}},"body":{"modules/AlgoMatchingModule.html":{},"modules.html":{},"overview.html":{}}}],["algomatchingservice",{"_index":15,"title":{"injectables/AlgoMatchingService.html":{}},"body":{"controllers/AlgoMatchingController.html":{},"modules/AlgoMatchingModule.html":{},"injectables/AlgoMatchingService.html":{},"coverage.html":{},"overview.html":{}}}],["algorithms",{"_index":903,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["aliases",{"_index":1779,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowed",{"_index":1590,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["already",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BetaUsersService.html":{},"injectables/SportsExerciseService.html":{},"injectables/UserInfoService.html":{}}}],["alreadyexists",{"_index":436,"title":{},"body":{"injectables/BetaUsersService.html":{}}}],["amazon",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["and/or",{"_index":1724,"title":{},"body":{"license.html":{}}}],["app",{"_index":1101,"title":{},"body":{"injectables/OpenffService.html":{}}}],["app.controller",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":42,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application/json",{"_index":1068,"title":{},"body":{"injectables/OpenffService.html":{}}}],["appmodule",{"_index":56,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":52,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argon",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FormService.html":{},"injectables/MessagesService.html":{}}}],["argon.hash(dto.password",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon2",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FormService.html":{},"injectables/MessagesService.html":{},"dependencies.html":{}}}],["arising",{"_index":1760,"title":{},"body":{"license.html":{}}}],["associated",{"_index":1711,"title":{},"body":{"license.html":{}}}],["async",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BetaUsersService.html":{},"injectables/BugsBetaService.html":{},"injectables/CaloriesService.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"injectables/ExercisesLibraryService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"controllers/FormController.html":{},"injectables/FormService.html":{},"injectables/JwtStrategy.html":{},"injectables/MealsService.html":{},"injectables/MessagesService.html":{},"injectables/OpenffService.html":{},"controllers/PlanningController.html":{},"injectables/PlanningService.html":{},"injectables/PreferencesService.html":{},"injectables/PrismaService.html":{},"controllers/ReportsController.html":{},"injectables/ReportsService.html":{},"injectables/SportsExerciseService.html":{},"injectables/StepsService.html":{},"injectables/UserInfoService.html":{}}}],["atguard",{"_index":93,"title":{"injectables/AtGuard.html":{}},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"coverage.html":{}}}],["audience",{"_index":897,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["aujourd'hui",{"_index":1028,"title":{},"body":{"injectables/MessagesService.html":{}}}],["auth",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.config",{"_index":276,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["auth.controller",{"_index":277,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["auth/auth.module",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["authconfig",{"_index":151,"title":{"injectables/AuthConfig.html":{}},"body":{"injectables/AuthConfig.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authconfig.authority",{"_index":902,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authconfig.authority}/.well",{"_index":895,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authconfig.clientid",{"_index":898,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authcontroller",{"_index":173,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authdto",{"_index":185,"title":{"classes/AuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["authenticated",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticationdetails",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticationdetails.getpassword",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["authguard",{"_index":139,"title":{},"body":{"injectables/AtGuard.html":{}}}],["authguard('jwt",{"_index":142,"title":{},"body":{"injectables/AtGuard.html":{}}}],["authmodule",{"_index":60,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1777,"title":{},"body":{"properties.html":{}}}],["authority",{"_index":155,"title":{},"body":{"injectables/AuthConfig.html":{}}}],["authors",{"_index":1749,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":226,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":1768,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":1481,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["avec",{"_index":1040,"title":{},"body":{"injectables/MessagesService.html":{}}}],["await",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BetaUsersService.html":{},"injectables/BugsBetaService.html":{},"injectables/CaloriesService.html":{},"injectables/ChatService.html":{},"injectables/ExercisesLibraryService.html":{},"injectables/FileService.html":{},"controllers/FormController.html":{},"injectables/FormService.html":{},"injectables/MealsService.html":{},"injectables/OpenffService.html":{},"injectables/PlanningService.html":{},"injectables/PreferencesService.html":{},"injectables/PrismaService.html":{},"injectables/ReportsService.html":{},"injectables/SportsExerciseService.html":{},"injectables/StepsService.html":{},"injectables/UserInfoService.html":{}}}],["aws",{"_index":805,"title":{},"body":{"injectables/FileService.html":{},"dependencies.html":{}}}],["beta",{"_index":398,"title":{},"body":{"controllers/BetaUsersController.html":{},"controllers/BugsBetaController.html":{}}}],["beta_users.controller",{"_index":425,"title":{},"body":{"modules/BetaUsersModule.html":{}}}],["beta_users.service",{"_index":406,"title":{},"body":{"controllers/BetaUsersController.html":{},"modules/BetaUsersModule.html":{}}}],["beta_users/beta_users.module",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["betauserscontroller",{"_index":396,"title":{"controllers/BetaUsersController.html":{}},"body":{"controllers/BetaUsersController.html":{},"modules/BetaUsersModule.html":{},"coverage.html":{}}}],["betausersdto",{"_index":402,"title":{"classes/BetaUsersDto.html":{}},"body":{"controllers/BetaUsersController.html":{},"classes/BetaUsersDto.html":{},"injectables/BetaUsersService.html":{},"coverage.html":{}}}],["betausersmodule",{"_index":61,"title":{"modules/BetaUsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BetaUsersModule.html":{},"modules.html":{},"overview.html":{}}}],["betausersservice",{"_index":405,"title":{"injectables/BetaUsersService.html":{}},"body":{"controllers/BetaUsersController.html":{},"modules/BetaUsersModule.html":{},"injectables/BetaUsersService.html":{},"coverage.html":{},"overview.html":{}}}],["bio",{"_index":1485,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["birth_date",{"_index":1477,"title":{},"body":{"injectables/UserInfoService.html":{},"classes/UserInfosDto.html":{}}}],["birthdate",{"_index":842,"title":{},"body":{"classes/FormDto.html":{}}}],["body",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BetaUsersController.html":{},"controllers/BugsBetaController.html":{},"controllers/ExercisesLibraryController.html":{},"injectables/FileService.html":{},"controllers/FormController.html":{},"controllers/MealsController.html":{},"controllers/PlanningController.html":{},"controllers/PreferencesController.html":{},"controllers/ReportsController.html":{},"controllers/SportsExerciseController.html":{},"controllers/UserInfosController.html":{}}}],["body(\"email",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{}}}],["body(\"goal",{"_index":1570,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["body(\"pattern",{"_index":949,"title":{},"body":{"controllers/MealsController.html":{},"controllers/SportsExerciseController.html":{}}}],["body(\"reason",{"_index":1252,"title":{},"body":{"controllers/ReportsController.html":{}}}],["body(\"sports",{"_index":1566,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["body(\"verificationcode",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{}}}],["bonjour",{"_index":1021,"title":{},"body":{"injectables/MessagesService.html":{}}}],["boolean",{"_index":146,"title":{},"body":{"injectables/AtGuard.html":{},"classes/UpdatePreferenceDto.html":{}}}],["bootstrap",{"_index":29,"title":{},"body":{"modules/AlgoMatchingModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BetaUsersModule.html":{},"modules/CaloriesModule.html":{},"modules/ChatModule.html":{},"modules/ExercisesLibraryModule.html":{},"modules/FileModule.html":{},"modules/FormModule.html":{},"modules/MealsModule.html":{},"modules/MessagesModule.html":{},"modules/OpenffModule.html":{},"modules/PlanningModule.html":{},"modules/PreferencesModule.html":{},"modules/PrismaModule.html":{},"modules/ReportsModule.html":{},"modules/SportsExerciseModule.html":{},"modules/StepsModule.html":{},"modules/UserInfosModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["brands",{"_index":1077,"title":{},"body":{"injectables/OpenffService.html":{}}}],["browse",{"_index":1766,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1763,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":818,"title":{},"body":{"injectables/FileService.html":{}}}],["bugbeta",{"_index":504,"title":{},"body":{"injectables/BugsBetaService.html":{}}}],["bugs",{"_index":442,"title":{},"body":{"controllers/BugsBetaController.html":{}}}],["bugs_beta.service",{"_index":468,"title":{},"body":{"controllers/BugsBetaController.html":{}}}],["bugs_beta/bugs_beta.controller",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["bugs_beta/bugs_beta.module",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["bugs_beta/bugs_beta.service",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["bugsbetacontroller",{"_index":84,"title":{"controllers/BugsBetaController.html":{}},"body":{"modules/AppModule.html":{},"controllers/BugsBetaController.html":{},"coverage.html":{}}}],["bugsbetadto",{"_index":449,"title":{"classes/BugsBetaDto.html":{}},"body":{"controllers/BugsBetaController.html":{},"classes/BugsBetaDto.html":{},"injectables/BugsBetaService.html":{},"coverage.html":{}}}],["bugsbetamodule",{"_index":62,"title":{"modules/BugsBetaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BugsBetaModule.html":{},"modules.html":{},"overview.html":{}}}],["bugsbetaservice",{"_index":78,"title":{"injectables/BugsBetaService.html":{}},"body":{"modules/AppModule.html":{},"controllers/BugsBetaController.html":{},"injectables/BugsBetaService.html":{},"coverage.html":{},"overview.html":{}}}],["c",{"_index":1700,"title":{},"body":{"license.html":{}}}],["ca",{"_index":1043,"title":{},"body":{"injectables/MessagesService.html":{}}}],["cache",{"_index":890,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["calories.controller",{"_index":544,"title":{},"body":{"modules/CaloriesModule.html":{}}}],["calories.service",{"_index":537,"title":{},"body":{"controllers/CaloriesController.html":{},"modules/CaloriesModule.html":{}}}],["calories/calories.controller",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["calories/calories.module",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["calories/calories.service",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["caloriescontroller",{"_index":82,"title":{"controllers/CaloriesController.html":{}},"body":{"modules/AppModule.html":{},"controllers/CaloriesController.html":{},"modules/CaloriesModule.html":{},"coverage.html":{}}}],["caloriesmodule",{"_index":63,"title":{"modules/CaloriesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CaloriesModule.html":{},"modules.html":{},"overview.html":{}}}],["caloriesservice",{"_index":79,"title":{"injectables/CaloriesService.html":{}},"body":{"modules/AppModule.html":{},"controllers/CaloriesController.html":{},"modules/CaloriesModule.html":{},"injectables/CaloriesService.html":{},"coverage.html":{},"overview.html":{}}}],["calory_data",{"_index":553,"title":{},"body":{"injectables/CaloriesService.html":{}}}],["canactivate",{"_index":126,"title":{},"body":{"injectables/AtGuard.html":{}}}],["canactivate(context",{"_index":135,"title":{},"body":{"injectables/AtGuard.html":{}}}],["carbohydrates_100g",{"_index":1086,"title":{},"body":{"injectables/OpenffService.html":{}}}],["catch",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ChatService.html":{},"injectables/FileService.html":{},"injectables/OpenffService.html":{}}}],["catch((error",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{}}}],["catch(error",{"_index":869,"title":{},"body":{"injectables/FormService.html":{}}}],["cb",{"_index":1578,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["cb(new",{"_index":1587,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["cb(null",{"_index":1586,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["change",{"_index":1241,"title":{},"body":{"controllers/ReportsController.html":{},"injectables/ReportsService.html":{}}}],["change(currentuser",{"_index":1242,"title":{},"body":{"controllers/ReportsController.html":{}}}],["change(reporter",{"_index":1262,"title":{},"body":{"injectables/ReportsService.html":{}}}],["charge",{"_index":1706,"title":{},"body":{"license.html":{}}}],["chat",{"_index":557,"title":{},"body":{"controllers/ChatController.html":{}}}],["chat.controller",{"_index":616,"title":{},"body":{"modules/ChatModule.html":{}}}],["chat.gateway",{"_index":615,"title":{},"body":{"modules/ChatModule.html":{}}}],["chat.helper",{"_index":634,"title":{},"body":{"injectables/ChatService.html":{}}}],["chat.service",{"_index":564,"title":{},"body":{"controllers/ChatController.html":{},"modules/ChatModule.html":{}}}],["chat/chat.module",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["chat/chat.service",{"_index":599,"title":{},"body":{"classes/ChatGateway.html":{}}}],["chatcontroller",{"_index":555,"title":{"controllers/ChatController.html":{}},"body":{"controllers/ChatController.html":{},"modules/ChatModule.html":{},"coverage.html":{}}}],["chatgateway",{"_index":569,"title":{"classes/ChatGateway.html":{}},"body":{"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"coverage.html":{}}}],["chatmodule",{"_index":64,"title":{"modules/ChatModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"modules.html":{},"overview.html":{}}}],["chatservice",{"_index":563,"title":{"injectables/ChatService.html":{}},"body":{"controllers/ChatController.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"coverage.html":{},"overview.html":{}}}],["claim",{"_index":1752,"title":{},"body":{"license.html":{}}}],["class",{"_index":19,"title":{"classes/AuthDto.html":{},"classes/BetaUsersDto.html":{},"classes/BugsBetaDto.html":{},"classes/ChatGateway.html":{},"classes/CreateExercisesLibraryDto.html":{},"classes/CreateOpenffDto.html":{},"classes/EditInfosDto.html":{},"classes/FormDto.html":{},"classes/MealsDto.html":{},"classes/Rooms.html":{},"classes/SportsExerciseDto.html":{},"classes/UpdateBugsBetaDto.html":{},"classes/UpdateExercisesLibraryDto.html":{},"classes/UpdateMealsDto.html":{},"classes/UpdateOpenffDto.html":{},"classes/UpdatePreferenceDto.html":{},"classes/UserInfosDto.html":{},"classes/UserNotFoundException.html":{},"classes/UserNotFoundException-1.html":{},"classes/UserNotFoundException-2.html":{},"classes/UserWithoutSidekickException.html":{}},"body":{"controllers/AlgoMatchingController.html":{},"modules/AlgoMatchingModule.html":{},"injectables/AlgoMatchingService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AuthConfig.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/BetaUsersController.html":{},"classes/BetaUsersDto.html":{},"modules/BetaUsersModule.html":{},"injectables/BetaUsersService.html":{},"controllers/BugsBetaController.html":{},"classes/BugsBetaDto.html":{},"modules/BugsBetaModule.html":{},"injectables/BugsBetaService.html":{},"controllers/CaloriesController.html":{},"modules/CaloriesModule.html":{},"injectables/CaloriesService.html":{},"controllers/ChatController.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreateExercisesLibraryDto.html":{},"classes/CreateOpenffDto.html":{},"classes/EditInfosDto.html":{},"controllers/ExercisesLibraryController.html":{},"modules/ExercisesLibraryModule.html":{},"injectables/ExercisesLibraryService.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"controllers/FormController.html":{},"classes/FormDto.html":{},"modules/FormModule.html":{},"injectables/FormService.html":{},"injectables/JwtStrategy.html":{},"controllers/MealsController.html":{},"classes/MealsDto.html":{},"modules/MealsModule.html":{},"injectables/MealsService.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OpenffController.html":{},"modules/OpenffModule.html":{},"injectables/OpenffService.html":{},"controllers/PlanningController.html":{},"modules/PlanningModule.html":{},"injectables/PlanningService.html":{},"controllers/PreferencesController.html":{},"modules/PreferencesModule.html":{},"injectables/PreferencesService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ReportsController.html":{},"modules/ReportsModule.html":{},"injectables/ReportsService.html":{},"classes/Rooms.html":{},"controllers/SportsExerciseController.html":{},"classes/SportsExerciseDto.html":{},"modules/SportsExerciseModule.html":{},"injectables/SportsExerciseService.html":{},"controllers/StepsController.html":{},"modules/StepsModule.html":{},"injectables/StepsService.html":{},"classes/UpdateBugsBetaDto.html":{},"classes/UpdateExercisesLibraryDto.html":{},"classes/UpdateMealsDto.html":{},"classes/UpdateOpenffDto.html":{},"classes/UpdatePreferenceDto.html":{},"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{},"classes/UserInfosDto.html":{},"modules/UserInfosModule.html":{},"classes/UserNotFoundException.html":{},"classes/UserNotFoundException-1.html":{},"classes/UserNotFoundException-2.html":{},"classes/UserWithoutSidekickException.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":263,"title":{},"body":{"classes/AuthDto.html":{},"classes/BetaUsersDto.html":{},"classes/BugsBetaDto.html":{},"classes/ChatGateway.html":{},"classes/CreateExercisesLibraryDto.html":{},"classes/CreateOpenffDto.html":{},"classes/EditInfosDto.html":{},"classes/FormDto.html":{},"classes/MealsDto.html":{},"classes/Rooms.html":{},"classes/SportsExerciseDto.html":{},"classes/UpdateBugsBetaDto.html":{},"classes/UpdateExercisesLibraryDto.html":{},"classes/UpdateMealsDto.html":{},"classes/UpdateOpenffDto.html":{},"classes/UpdatePreferenceDto.html":{},"classes/UserInfosDto.html":{},"classes/UserNotFoundException.html":{},"classes/UserNotFoundException-1.html":{},"classes/UserNotFoundException-2.html":{},"classes/UserWithoutSidekickException.html":{},"overview.html":{}}}],["cli",{"_index":1661,"title":{},"body":{"dependencies.html":{}}}],["client",{"_index":589,"title":{},"body":{"classes/ChatGateway.html":{}}}],["clientid",{"_index":156,"title":{},"body":{"injectables/AuthConfig.html":{},"injectables/AuthService.html":{}}}],["cluster_algomatchingmodule",{"_index":32,"title":{},"body":{"modules/AlgoMatchingModule.html":{},"overview.html":{}}}],["cluster_algomatchingmodule_providers",{"_index":33,"title":{},"body":{"modules/AlgoMatchingModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":271,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":272,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_betausersmodule",{"_index":422,"title":{},"body":{"modules/BetaUsersModule.html":{},"overview.html":{}}}],["cluster_betausersmodule_providers",{"_index":423,"title":{},"body":{"modules/BetaUsersModule.html":{},"overview.html":{}}}],["cluster_caloriesmodule",{"_index":541,"title":{},"body":{"modules/CaloriesModule.html":{}}}],["cluster_caloriesmodule_providers",{"_index":542,"title":{},"body":{"modules/CaloriesModule.html":{}}}],["cluster_chatmodule",{"_index":611,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_chatmodule_imports",{"_index":613,"title":{},"body":{"modules/ChatModule.html":{}}}],["cluster_chatmodule_providers",{"_index":612,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_exerciseslibrarymodule",{"_index":751,"title":{},"body":{"modules/ExercisesLibraryModule.html":{},"overview.html":{}}}],["cluster_exerciseslibrarymodule_providers",{"_index":752,"title":{},"body":{"modules/ExercisesLibraryModule.html":{},"overview.html":{}}}],["cluster_filemodule",{"_index":792,"title":{},"body":{"modules/FileModule.html":{},"overview.html":{}}}],["cluster_filemodule_exports",{"_index":793,"title":{},"body":{"modules/FileModule.html":{},"overview.html":{}}}],["cluster_filemodule_providers",{"_index":794,"title":{},"body":{"modules/FileModule.html":{},"overview.html":{}}}],["cluster_formmodule",{"_index":855,"title":{},"body":{"modules/FormModule.html":{},"overview.html":{}}}],["cluster_formmodule_imports",{"_index":857,"title":{},"body":{"modules/FormModule.html":{}}}],["cluster_formmodule_providers",{"_index":856,"title":{},"body":{"modules/FormModule.html":{},"overview.html":{}}}],["cluster_mealsmodule",{"_index":964,"title":{},"body":{"modules/MealsModule.html":{}}}],["cluster_mealsmodule_providers",{"_index":965,"title":{},"body":{"modules/MealsModule.html":{}}}],["cluster_messagesmodule",{"_index":1007,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule_providers",{"_index":1008,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_openffmodule",{"_index":1058,"title":{},"body":{"modules/OpenffModule.html":{},"overview.html":{}}}],["cluster_openffmodule_providers",{"_index":1059,"title":{},"body":{"modules/OpenffModule.html":{},"overview.html":{}}}],["cluster_planningmodule",{"_index":1158,"title":{},"body":{"modules/PlanningModule.html":{},"overview.html":{}}}],["cluster_planningmodule_providers",{"_index":1159,"title":{},"body":{"modules/PlanningModule.html":{},"overview.html":{}}}],["cluster_preferencesmodule",{"_index":1207,"title":{},"body":{"modules/PreferencesModule.html":{},"overview.html":{}}}],["cluster_preferencesmodule_providers",{"_index":1208,"title":{},"body":{"modules/PreferencesModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":1219,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":1220,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":1221,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_reportsmodule",{"_index":1256,"title":{},"body":{"modules/ReportsModule.html":{},"overview.html":{}}}],["cluster_reportsmodule_providers",{"_index":1257,"title":{},"body":{"modules/ReportsModule.html":{},"overview.html":{}}}],["cluster_sportsexercisemodule",{"_index":1358,"title":{},"body":{"modules/SportsExerciseModule.html":{},"overview.html":{}}}],["cluster_sportsexercisemodule_providers",{"_index":1359,"title":{},"body":{"modules/SportsExerciseModule.html":{},"overview.html":{}}}],["cluster_stepsmodule",{"_index":1392,"title":{},"body":{"modules/StepsModule.html":{},"overview.html":{}}}],["cluster_stepsmodule_providers",{"_index":1393,"title":{},"body":{"modules/StepsModule.html":{},"overview.html":{}}}],["cluster_userinfosmodule",{"_index":1608,"title":{},"body":{"modules/UserInfosModule.html":{},"overview.html":{}}}],["cluster_userinfosmodule_exports",{"_index":1609,"title":{},"body":{"modules/UserInfosModule.html":{},"overview.html":{}}}],["cluster_userinfosmodule_imports",{"_index":1610,"title":{},"body":{"modules/UserInfosModule.html":{}}}],["cluster_userinfosmodule_providers",{"_index":1611,"title":{},"body":{"modules/UserInfosModule.html":{},"overview.html":{}}}],["cognito",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["cognitoidtoken",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["cognitorefreshtoken",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["cognitouser",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["cognitouser(userdata",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["cognitouserpool",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["comment",{"_index":1022,"title":{},"body":{"injectables/MessagesService.html":{}}}],["common/decorators",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatController.html":{},"controllers/FileController.html":{},"controllers/MessagesController.html":{},"controllers/OpenffController.html":{},"controllers/PreferencesController.html":{},"controllers/UserInfosController.html":{}}}],["common/decorators/current_user.decorator",{"_index":1136,"title":{},"body":{"controllers/PlanningController.html":{},"controllers/ReportsController.html":{}}}],["common/guards",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["compose",{"_index":1683,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":1732,"title":{},"body":{"license.html":{}}}],["configmodule",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"modules/FileModule.html":{},"modules/PrismaModule.html":{}}}],["configmodule.forroot({isglobal",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":801,"title":{},"body":{"injectables/FileService.html":{},"injectables/PrismaService.html":{}}}],["configservice.get('database_url",{"_index":1235,"title":{},"body":{"injectables/PrismaService.html":{}}}],["conflictexception",{"_index":1372,"title":{},"body":{"injectables/SportsExerciseService.html":{},"injectables/UserInfoService.html":{}}}],["conflictexception(\"the",{"_index":1522,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["conflictexception('an",{"_index":1380,"title":{},"body":{"injectables/SportsExerciseService.html":{},"injectables/UserInfoService.html":{}}}],["conflictexception(`an",{"_index":1515,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["connected",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ChatService.html":{}}}],["connection",{"_index":1761,"title":{},"body":{"license.html":{}}}],["console.log(e",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(enumpage",{"_index":519,"title":{},"body":{"injectables/BugsBetaService.html":{}}}],["console.log(err",{"_index":826,"title":{},"body":{"injectables/FileService.html":{}}}],["console.log(req.user",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{}}}],["const",{"_index":144,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AuthService.html":{},"injectables/BugsBetaService.html":{},"injectables/CaloriesService.html":{},"injectables/ChatService.html":{},"injectables/ExercisesLibraryService.html":{},"injectables/FileService.html":{},"injectables/FormService.html":{},"injectables/MealsService.html":{},"injectables/OpenffService.html":{},"injectables/PlanningService.html":{},"injectables/PreferencesService.html":{},"injectables/ReportsService.html":{},"classes/Rooms.html":{},"injectables/SportsExerciseService.html":{},"injectables/StepsService.html":{},"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":127,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AuthService.html":{},"injectables/BetaUsersService.html":{},"injectables/BugsBetaService.html":{},"injectables/CaloriesService.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"injectables/ExercisesLibraryService.html":{},"injectables/FileService.html":{},"injectables/FormService.html":{},"injectables/JwtStrategy.html":{},"injectables/MealsService.html":{},"injectables/MessagesService.html":{},"injectables/OpenffService.html":{},"injectables/PlanningService.html":{},"injectables/PreferencesService.html":{},"injectables/PrismaService.html":{},"injectables/ReportsService.html":{},"classes/Rooms.html":{},"injectables/SportsExerciseService.html":{},"injectables/StepsService.html":{},"injectables/UserInfoService.html":{},"classes/UserNotFoundException.html":{},"classes/UserNotFoundException-1.html":{},"classes/UserNotFoundException-2.html":{},"classes/UserWithoutSidekickException.html":{}}}],["constructor(_prismaservice",{"_index":428,"title":{},"body":{"injectables/BetaUsersService.html":{},"injectables/BugsBetaService.html":{},"injectables/CaloriesService.html":{},"injectables/MealsService.html":{},"injectables/PlanningService.html":{},"injectables/SportsExerciseService.html":{},"injectables/StepsService.html":{},"injectables/UserInfoService.html":{}}}],["constructor(authservice",{"_index":877,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(chatservice",{"_index":577,"title":{},"body":{"classes/ChatGateway.html":{}}}],["constructor(configservice",{"_index":800,"title":{},"body":{"injectables/FileService.html":{},"injectables/PrismaService.html":{}}}],["constructor(postemail",{"_index":1616,"title":{},"body":{"classes/UserNotFoundException.html":{},"classes/UserNotFoundException-1.html":{}}}],["constructor(postid",{"_index":1621,"title":{},"body":{"classes/UserNotFoundException-2.html":{},"classes/UserWithoutSidekickException.html":{}}}],["constructor(prisma",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesLibraryService.html":{},"injectables/FormService.html":{},"injectables/MessagesService.html":{},"injectables/ReportsService.html":{}}}],["constructor(prismaservice",{"_index":1063,"title":{},"body":{"injectables/OpenffService.html":{},"injectables/PreferencesService.html":{}}}],["constructor(private",{"_index":20,"title":{},"body":{"controllers/AlgoMatchingController.html":{},"controllers/AppController.html":{},"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BetaUsersController.html":{},"controllers/BugsBetaController.html":{},"controllers/CaloriesController.html":{},"injectables/CaloriesService.html":{},"controllers/ChatController.html":{},"classes/ChatGateway.html":{},"controllers/ExercisesLibraryController.html":{},"injectables/ExercisesLibraryService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"controllers/FormController.html":{},"injectables/FormService.html":{},"controllers/MealsController.html":{},"injectables/MealsService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"controllers/OpenffController.html":{},"injectables/OpenffService.html":{},"controllers/PlanningController.html":{},"controllers/PreferencesController.html":{},"injectables/PreferencesService.html":{},"controllers/ReportsController.html":{},"injectables/ReportsService.html":{},"controllers/SportsExerciseController.html":{},"injectables/SportsExerciseService.html":{},"controllers/StepsController.html":{},"injectables/StepsService.html":{},"controllers/UserInfosController.html":{}}}],["constructor(reflector",{"_index":128,"title":{},"body":{"injectables/AtGuard.html":{}}}],["constructor(userinfosservice",{"_index":619,"title":{},"body":{"injectables/ChatService.html":{}}}],["content",{"_index":665,"title":{},"body":{"injectables/ChatService.html":{},"injectables/MessagesService.html":{},"injectables/OpenffService.html":{},"injectables/PlanningService.html":{}}}],["contenttype",{"_index":821,"title":{},"body":{"injectables/FileService.html":{}}}],["context",{"_index":138,"title":{},"body":{"injectables/AtGuard.html":{},"miscellaneous/variables.html":{}}}],["context.getclass",{"_index":149,"title":{},"body":{"injectables/AtGuard.html":{}}}],["context.gethandler",{"_index":148,"title":{},"body":{"injectables/AtGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":1789,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contract",{"_index":1757,"title":{},"body":{"license.html":{}}}],["controller",{"_index":0,"title":{"controllers/AlgoMatchingController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/BetaUsersController.html":{},"controllers/BugsBetaController.html":{},"controllers/CaloriesController.html":{},"controllers/ChatController.html":{},"controllers/ExercisesLibraryController.html":{},"controllers/FileController.html":{},"controllers/FormController.html":{},"controllers/MealsController.html":{},"controllers/MessagesController.html":{},"controllers/OpenffController.html":{},"controllers/PlanningController.html":{},"controllers/PreferencesController.html":{},"controllers/ReportsController.html":{},"controllers/SportsExerciseController.html":{},"controllers/StepsController.html":{},"controllers/UserInfosController.html":{}},"body":{"controllers/AlgoMatchingController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/BetaUsersController.html":{},"controllers/BugsBetaController.html":{},"controllers/CaloriesController.html":{},"controllers/ChatController.html":{},"controllers/ExercisesLibraryController.html":{},"controllers/FileController.html":{},"controllers/FormController.html":{},"controllers/MealsController.html":{},"controllers/MessagesController.html":{},"controllers/OpenffController.html":{},"controllers/PlanningController.html":{},"controllers/PreferencesController.html":{},"controllers/ReportsController.html":{},"controllers/SportsExerciseController.html":{},"controllers/StepsController.html":{},"controllers/UserInfosController.html":{},"coverage.html":{}}}],["controller(\"auth",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller(\"chat",{"_index":565,"title":{},"body":{"controllers/ChatController.html":{}}}],["controller(\"reports",{"_index":1251,"title":{},"body":{"controllers/ReportsController.html":{}}}],["controller(\"user_infos",{"_index":1554,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["controller('algo",{"_index":17,"title":{},"body":{"controllers/AlgoMatchingController.html":{}}}],["controller('beta",{"_index":407,"title":{},"body":{"controllers/BetaUsersController.html":{}}}],["controller('bugs",{"_index":471,"title":{},"body":{"controllers/BugsBetaController.html":{}}}],["controller('exercises",{"_index":741,"title":{},"body":{"controllers/ExercisesLibraryController.html":{}}}],["controller('file",{"_index":785,"title":{},"body":{"controllers/FileController.html":{}}}],["controller('form",{"_index":838,"title":{},"body":{"controllers/FormController.html":{}}}],["controller('meals",{"_index":934,"title":{},"body":{"controllers/MealsController.html":{}}}],["controller('messages",{"_index":1002,"title":{},"body":{"controllers/MessagesController.html":{}}}],["controller('openff",{"_index":1054,"title":{},"body":{"controllers/OpenffController.html":{}}}],["controller('planning",{"_index":1139,"title":{},"body":{"controllers/PlanningController.html":{}}}],["controller('preferences",{"_index":1202,"title":{},"body":{"controllers/PreferencesController.html":{}}}],["controller('sports",{"_index":1338,"title":{},"body":{"controllers/SportsExerciseController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AlgoMatchingController.html":{},"modules/AlgoMatchingModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/BetaUsersController.html":{},"modules/BetaUsersModule.html":{},"controllers/BugsBetaController.html":{},"controllers/CaloriesController.html":{},"modules/CaloriesModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"controllers/ExercisesLibraryController.html":{},"modules/ExercisesLibraryModule.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"controllers/FormController.html":{},"modules/FormModule.html":{},"controllers/MealsController.html":{},"modules/MealsModule.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"controllers/OpenffController.html":{},"modules/OpenffModule.html":{},"controllers/PlanningController.html":{},"modules/PlanningModule.html":{},"controllers/PreferencesController.html":{},"modules/PreferencesModule.html":{},"modules/PrismaModule.html":{},"controllers/ReportsController.html":{},"modules/ReportsModule.html":{},"controllers/SportsExerciseController.html":{},"modules/SportsExerciseModule.html":{},"controllers/StepsController.html":{},"modules/StepsModule.html":{},"controllers/UserInfosController.html":{},"modules/UserInfosModule.html":{},"overview.html":{}}}],["copies",{"_index":1726,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1709,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1699,"title":{},"body":{"license.html":{}}}],["cors",{"_index":601,"title":{},"body":{"classes/ChatGateway.html":{}}}],["coverage",{"_index":1625,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ExercisesLibraryController.html":{},"injectables/ExercisesLibraryService.html":{},"injectables/MealsService.html":{},"controllers/ReportsController.html":{},"injectables/ReportsService.html":{},"classes/UpdateExercisesLibraryDto.html":{},"classes/UpdateOpenffDto.html":{}}}],["create(@body",{"_index":742,"title":{},"body":{"controllers/ExercisesLibraryController.html":{}}}],["create(createexerciseslibrarydto",{"_index":720,"title":{},"body":{"controllers/ExercisesLibraryController.html":{},"injectables/ExercisesLibraryService.html":{}}}],["create(currentuser",{"_index":1246,"title":{},"body":{"controllers/ReportsController.html":{}}}],["create(reporter",{"_index":1265,"title":{},"body":{"injectables/ReportsService.html":{}}}],["createexerciseslibrarydto",{"_index":682,"title":{"classes/CreateExercisesLibraryDto.html":{}},"body":{"classes/CreateExercisesLibraryDto.html":{},"controllers/ExercisesLibraryController.html":{},"injectables/ExercisesLibraryService.html":{},"classes/UpdateExercisesLibraryDto.html":{},"coverage.html":{}}}],["createopenffdto",{"_index":694,"title":{"classes/CreateOpenffDto.html":{}},"body":{"classes/CreateOpenffDto.html":{},"classes/UpdateOpenffDto.html":{},"coverage.html":{}}}],["createparamdecorator",{"_index":1787,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createuser",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["createuser(dto",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["credentials",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FileService.html":{}}}],["currentuser",{"_index":1245,"title":{},"body":{"controllers/ReportsController.html":{}}}],["damages",{"_index":1753,"title":{},"body":{"license.html":{}}}],["darkmode",{"_index":1429,"title":{},"body":{"classes/UpdatePreferenceDto.html":{}}}],["data",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BetaUsersService.html":{},"injectables/BugsBetaService.html":{},"injectables/CaloriesService.html":{},"injectables/ChatService.html":{},"injectables/ExercisesLibraryService.html":{},"injectables/FormService.html":{},"injectables/MealsService.html":{},"injectables/OpenffService.html":{},"injectables/PlanningService.html":{},"injectables/PreferencesService.html":{},"injectables/ReportsService.html":{},"injectables/SportsExerciseService.html":{},"injectables/StepsService.html":{},"injectables/UserInfoService.html":{},"miscellaneous/variables.html":{}}}],["data.gender",{"_index":1508,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["data.size",{"_index":1504,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["data.sport_frequence",{"_index":1510,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["data.username",{"_index":1512,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["data.weight",{"_index":1506,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["datas",{"_index":433,"title":{},"body":{"injectables/BetaUsersService.html":{},"injectables/FormService.html":{},"injectables/MealsService.html":{},"injectables/SportsExerciseService.html":{},"injectables/UserInfoService.html":{}}}],["datas.email",{"_index":438,"title":{},"body":{"injectables/BetaUsersService.html":{}}}],["datas.name",{"_index":1377,"title":{},"body":{"injectables/SportsExerciseService.html":{}}}],["datas.userid",{"_index":1378,"title":{},"body":{"injectables/SportsExerciseService.html":{}}}],["datasources",{"_index":1233,"title":{},"body":{"injectables/PrismaService.html":{}}}],["date",{"_index":952,"title":{},"body":{"classes/MealsDto.html":{},"injectables/MealsService.html":{},"injectables/MessagesService.html":{},"classes/UpdateMealsDto.html":{},"classes/UserInfosDto.html":{}}}],["date(datas.birth_date",{"_index":1496,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["date(datas.date",{"_index":985,"title":{},"body":{"injectables/MealsService.html":{}}}],["date(date",{"_index":991,"title":{},"body":{"injectables/MealsService.html":{}}}],["date(number(day",{"_index":1189,"title":{},"body":{"injectables/PlanningService.html":{}}}],["date(number(req.day",{"_index":1179,"title":{},"body":{"injectables/PlanningService.html":{}}}],["day",{"_index":920,"title":{},"body":{"controllers/MealsController.html":{},"controllers/PlanningController.html":{},"injectables/PlanningService.html":{}}}],["db",{"_index":660,"title":{},"body":{"injectables/ChatService.html":{},"injectables/PrismaService.html":{},"index.html":{}}}],["deal",{"_index":1713,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1762,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":28,"title":{},"body":{"modules/AlgoMatchingModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BetaUsersModule.html":{},"modules/CaloriesModule.html":{},"modules/ChatModule.html":{},"modules/ExercisesLibraryModule.html":{},"modules/FileModule.html":{},"modules/FormModule.html":{},"modules/MealsModule.html":{},"modules/MessagesModule.html":{},"modules/OpenffModule.html":{},"modules/PlanningModule.html":{},"modules/PreferencesModule.html":{},"modules/PrismaModule.html":{},"modules/ReportsModule.html":{},"modules/SportsExerciseModule.html":{},"modules/StepsModule.html":{},"modules/UserInfosModule.html":{},"overview.html":{}}}],["decorators",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"controllers/BetaUsersController.html":{},"classes/BetaUsersDto.html":{},"controllers/BugsBetaController.html":{},"classes/BugsBetaDto.html":{},"controllers/CaloriesController.html":{},"controllers/ChatController.html":{},"classes/ChatGateway.html":{},"classes/CreateExercisesLibraryDto.html":{},"classes/EditInfosDto.html":{},"controllers/ExercisesLibraryController.html":{},"controllers/FileController.html":{},"controllers/FormController.html":{},"classes/FormDto.html":{},"controllers/MealsController.html":{},"classes/MealsDto.html":{},"controllers/MessagesController.html":{},"controllers/OpenffController.html":{},"controllers/PlanningController.html":{},"controllers/PreferencesController.html":{},"controllers/ReportsController.html":{},"controllers/SportsExerciseController.html":{},"classes/SportsExerciseDto.html":{},"controllers/StepsController.html":{},"classes/UpdateBugsBetaDto.html":{},"classes/UpdateExercisesLibraryDto.html":{},"classes/UpdateMealsDto.html":{},"classes/UpdatePreferenceDto.html":{},"controllers/UserInfosController.html":{},"classes/UserInfosDto.html":{}}}],["default",{"_index":160,"title":{},"body":{"injectables/AuthConfig.html":{},"injectables/ChatService.html":{},"classes/Rooms.html":{},"classes/UserNotFoundException.html":{},"classes/UserNotFoundException-1.html":{},"classes/UserNotFoundException-2.html":{},"classes/UserWithoutSidekickException.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":280,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AuthConfig.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"controllers/BetaUsersController.html":{},"classes/BetaUsersDto.html":{},"injectables/BetaUsersService.html":{},"controllers/BugsBetaController.html":{},"classes/BugsBetaDto.html":{},"injectables/BugsBetaService.html":{},"controllers/CaloriesController.html":{},"injectables/CaloriesService.html":{},"controllers/ChatController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CreateExercisesLibraryDto.html":{},"classes/EditInfosDto.html":{},"controllers/ExercisesLibraryController.html":{},"injectables/ExercisesLibraryService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"controllers/FormController.html":{},"classes/FormDto.html":{},"injectables/FormService.html":{},"injectables/JwtStrategy.html":{},"controllers/MealsController.html":{},"classes/MealsDto.html":{},"injectables/MealsService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"controllers/OpenffController.html":{},"injectables/OpenffService.html":{},"controllers/PlanningController.html":{},"injectables/PlanningService.html":{},"controllers/PreferencesController.html":{},"injectables/PreferencesService.html":{},"injectables/PrismaService.html":{},"controllers/ReportsController.html":{},"injectables/ReportsService.html":{},"classes/Rooms.html":{},"controllers/SportsExerciseController.html":{},"classes/SportsExerciseDto.html":{},"injectables/SportsExerciseService.html":{},"controllers/StepsController.html":{},"injectables/StepsService.html":{},"classes/UpdateBugsBetaDto.html":{},"classes/UpdateExercisesLibraryDto.html":{},"classes/UpdateMealsDto.html":{},"classes/UpdatePreferenceDto.html":{},"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{},"classes/UserInfosDto.html":{},"classes/UserNotFoundException.html":{},"classes/UserNotFoundException-1.html":{},"classes/UserNotFoundException-2.html":{},"classes/UserWithoutSidekickException.html":{}}}],["delete",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BugsBetaController.html":{},"injectables/BugsBetaService.html":{},"controllers/ExercisesLibraryController.html":{},"controllers/MealsController.html":{},"injectables/MealsService.html":{},"controllers/PlanningController.html":{},"controllers/SportsExerciseController.html":{}}}],["delete(\"/:id",{"_index":478,"title":{},"body":{"controllers/BugsBetaController.html":{},"controllers/MealsController.html":{}}}],["delete(\"remove/:id",{"_index":1349,"title":{},"body":{"controllers/SportsExerciseController.html":{}}}],["delete('/:id",{"_index":463,"title":{},"body":{"controllers/BugsBetaController.html":{},"controllers/MealsController.html":{},"controllers/PlanningController.html":{}}}],["delete(':id",{"_index":728,"title":{},"body":{"controllers/ExercisesLibraryController.html":{}}}],["delete('remove/:id",{"_index":1328,"title":{},"body":{"controllers/SportsExerciseController.html":{}}}],["delete(@body",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{}}}],["delete(dto",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["delete(id",{"_index":505,"title":{},"body":{"injectables/BugsBetaService.html":{},"injectables/MealsService.html":{}}}],["deleteevent",{"_index":1111,"title":{},"body":{"controllers/PlanningController.html":{},"injectables/PlanningService.html":{}}}],["deleteevent(@param('id",{"_index":1156,"title":{},"body":{"controllers/PlanningController.html":{}}}],["deleteevent(id",{"_index":1118,"title":{},"body":{"controllers/PlanningController.html":{},"injectables/PlanningService.html":{}}}],["deleteplanningbyday",{"_index":1112,"title":{},"body":{"controllers/PlanningController.html":{},"injectables/PlanningService.html":{}}}],["deleteplanningbyday(@getcurrentuseremail",{"_index":1142,"title":{},"body":{"controllers/PlanningController.html":{}}}],["deleteplanningbyday(email",{"_index":1120,"title":{},"body":{"controllers/PlanningController.html":{},"injectables/PlanningService.html":{}}}],["deleteuser",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["deleteuser(email",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["dependencies",{"_index":26,"title":{"dependencies.html":{}},"body":{"modules/AlgoMatchingModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BetaUsersModule.html":{},"modules/CaloriesModule.html":{},"modules/ChatModule.html":{},"modules/ExercisesLibraryModule.html":{},"modules/FileModule.html":{},"modules/FormModule.html":{},"modules/MealsModule.html":{},"modules/MessagesModule.html":{},"modules/OpenffModule.html":{},"modules/PlanningModule.html":{},"modules/PreferencesModule.html":{},"modules/PrismaModule.html":{},"modules/ReportsModule.html":{},"modules/SportsExerciseModule.html":{},"modules/StepsModule.html":{},"modules/UserInfosModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":489,"title":{},"body":{"classes/BugsBetaDto.html":{},"classes/CreateExercisesLibraryDto.html":{},"classes/EditInfosDto.html":{},"injectables/ExercisesLibraryService.html":{},"classes/FormDto.html":{},"classes/UpdateBugsBetaDto.html":{},"classes/UserInfosDto.html":{},"properties.html":{}}}],["design",{"_index":1099,"title":{},"body":{"injectables/OpenffService.html":{}}}],["dev",{"_index":1696,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":1722,"title":{},"body":{"license.html":{}}}],["docker",{"_index":1682,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1626,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["doesn\\'t",{"_index":1623,"title":{},"body":{"classes/UserNotFoundException-2.html":{},"classes/UserWithoutSidekickException.html":{}}}],["dotenv",{"_index":1660,"title":{},"body":{"dependencies.html":{}}}],["dto",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BetaUsersController.html":{},"controllers/BugsBetaController.html":{},"controllers/FormController.html":{},"controllers/MealsController.html":{},"controllers/PreferencesController.html":{},"controllers/SportsExerciseController.html":{},"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{}}}],["dto.email",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.password",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto/beta_users.dto",{"_index":404,"title":{},"body":{"controllers/BetaUsersController.html":{},"injectables/BetaUsersService.html":{}}}],["dto/bugs_beta.dto",{"_index":469,"title":{},"body":{"controllers/BugsBetaController.html":{},"injectables/BugsBetaService.html":{}}}],["dto/create",{"_index":737,"title":{},"body":{"controllers/ExercisesLibraryController.html":{},"injectables/ExercisesLibraryService.html":{}}}],["dto/edit.dto",{"_index":1468,"title":{},"body":{"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{}}}],["dto/form.dto",{"_index":835,"title":{},"body":{"controllers/FormController.html":{},"injectables/FormService.html":{}}}],["dto/meals.dto",{"_index":932,"title":{},"body":{"controllers/MealsController.html":{},"injectables/MealsService.html":{}}}],["dto/sports_exercices.dto",{"_index":1335,"title":{},"body":{"controllers/SportsExerciseController.html":{},"injectables/SportsExerciseService.html":{}}}],["dto/update",{"_index":739,"title":{},"body":{"controllers/ExercisesLibraryController.html":{},"injectables/ExercisesLibraryService.html":{},"controllers/PreferencesController.html":{},"injectables/PreferencesService.html":{}}}],["dto/update.dto",{"_index":470,"title":{},"body":{"controllers/BugsBetaController.html":{},"injectables/BugsBetaService.html":{},"controllers/MealsController.html":{},"injectables/MealsService.html":{}}}],["dto/user.dto",{"_index":1467,"title":{},"body":{"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{}}}],["du",{"_index":1026,"title":{},"body":{"injectables/MessagesService.html":{}}}],["e",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ChatService.html":{}}}],["editinfosdto",{"_index":697,"title":{"classes/EditInfosDto.html":{}},"body":{"classes/EditInfosDto.html":{},"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{},"coverage.html":{}}}],["email",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/BetaUsersDto.html":{},"injectables/BetaUsersService.html":{},"injectables/BugsBetaService.html":{},"injectables/CaloriesService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"injectables/JwtStrategy.html":{},"injectables/MealsService.html":{},"controllers/PlanningController.html":{},"injectables/PlanningService.html":{},"controllers/PreferencesController.html":{},"injectables/PreferencesService.html":{},"injectables/ReportsService.html":{},"injectables/SportsExerciseService.html":{},"injectables/StepsService.html":{},"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{},"classes/UserNotFoundException.html":{},"classes/UserNotFoundException-1.html":{}}}],["encore",{"_index":1031,"title":{},"body":{"injectables/MessagesService.html":{}}}],["energy_kcal_100g",{"_index":1081,"title":{},"body":{"injectables/OpenffService.html":{}}}],["ensemble",{"_index":1039,"title":{},"body":{"injectables/MessagesService.html":{}}}],["enumpage",{"_index":517,"title":{},"body":{"injectables/BugsBetaService.html":{}}}],["err",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FileService.html":{}}}],["err.message",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{}}}],["error",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FormService.html":{},"injectables/OpenffService.html":{}}}],["error('only",{"_index":1588,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["error.code",{"_index":871,"title":{},"body":{"injectables/FormService.html":{}}}],["event",{"_index":671,"title":{},"body":{"injectables/ChatService.html":{},"license.html":{}}}],["eventcalendar",{"_index":1176,"title":{},"body":{"injectables/PlanningService.html":{}}}],["eventcalendar.meal",{"_index":1185,"title":{},"body":{"injectables/PlanningService.html":{}}}],["eventcalendar.sports_exercise",{"_index":1180,"title":{},"body":{"injectables/PlanningService.html":{}}}],["exceptions/not",{"_index":981,"title":{},"body":{"injectables/MealsService.html":{},"injectables/SportsExerciseService.html":{},"injectables/UserInfoService.html":{}}}],["executioncontext",{"_index":136,"title":{},"body":{"injectables/AtGuard.html":{},"miscellaneous/variables.html":{}}}],["exercise",{"_index":1318,"title":{},"body":{"controllers/SportsExerciseController.html":{},"injectables/SportsExerciseService.html":{}}}],["exercise_id",{"_index":1146,"title":{},"body":{"controllers/PlanningController.html":{},"injectables/PlanningService.html":{}}}],["exercises",{"_index":715,"title":{},"body":{"controllers/ExercisesLibraryController.html":{}}}],["exercises_library.controller",{"_index":754,"title":{},"body":{"modules/ExercisesLibraryModule.html":{}}}],["exercises_library.dto",{"_index":738,"title":{},"body":{"controllers/ExercisesLibraryController.html":{},"injectables/ExercisesLibraryService.html":{},"classes/UpdateExercisesLibraryDto.html":{}}}],["exercises_library.dto.ts",{"_index":684,"title":{},"body":{"classes/CreateExercisesLibraryDto.html":{},"classes/UpdateExercisesLibraryDto.html":{},"coverage.html":{}}}],["exercises_library.dto.ts:11",{"_index":688,"title":{},"body":{"classes/CreateExercisesLibraryDto.html":{}}}],["exercises_library.dto.ts:15",{"_index":693,"title":{},"body":{"classes/CreateExercisesLibraryDto.html":{}}}],["exercises_library.dto.ts:18",{"_index":692,"title":{},"body":{"classes/CreateExercisesLibraryDto.html":{}}}],["exercises_library.dto.ts:22",{"_index":689,"title":{},"body":{"classes/CreateExercisesLibraryDto.html":{}}}],["exercises_library.dto.ts:7",{"_index":690,"title":{},"body":{"classes/CreateExercisesLibraryDto.html":{}}}],["exercises_library.dto.ts:8",{"_index":1411,"title":{},"body":{"classes/UpdateExercisesLibraryDto.html":{}}}],["exercises_library.service",{"_index":736,"title":{},"body":{"controllers/ExercisesLibraryController.html":{},"modules/ExercisesLibraryModule.html":{}}}],["exercises_library/exercises_library.module",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["exerciseslibrary",{"_index":763,"title":{},"body":{"injectables/ExercisesLibraryService.html":{}}}],["exerciseslibrarycontroller",{"_index":713,"title":{"controllers/ExercisesLibraryController.html":{}},"body":{"controllers/ExercisesLibraryController.html":{},"modules/ExercisesLibraryModule.html":{},"coverage.html":{}}}],["exerciseslibrarymodule",{"_index":65,"title":{"modules/ExercisesLibraryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ExercisesLibraryModule.html":{},"modules.html":{},"overview.html":{}}}],["exerciseslibraryservice",{"_index":735,"title":{"injectables/ExercisesLibraryService.html":{}},"body":{"controllers/ExercisesLibraryController.html":{},"modules/ExercisesLibraryModule.html":{},"injectables/ExercisesLibraryService.html":{},"coverage.html":{},"overview.html":{}}}],["exist",{"_index":1381,"title":{},"body":{"injectables/SportsExerciseService.html":{},"injectables/UserInfoService.html":{}}}],["existinguser",{"_index":1513,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["existinguser.userid",{"_index":1514,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["exists",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BetaUsersService.html":{},"injectables/UserInfoService.html":{}}}],["export",{"_index":18,"title":{},"body":{"controllers/AlgoMatchingController.html":{},"modules/AlgoMatchingModule.html":{},"injectables/AlgoMatchingService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AuthConfig.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/BetaUsersController.html":{},"classes/BetaUsersDto.html":{},"modules/BetaUsersModule.html":{},"injectables/BetaUsersService.html":{},"controllers/BugsBetaController.html":{},"classes/BugsBetaDto.html":{},"modules/BugsBetaModule.html":{},"injectables/BugsBetaService.html":{},"controllers/CaloriesController.html":{},"modules/CaloriesModule.html":{},"injectables/CaloriesService.html":{},"controllers/ChatController.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreateExercisesLibraryDto.html":{},"classes/CreateOpenffDto.html":{},"classes/EditInfosDto.html":{},"controllers/ExercisesLibraryController.html":{},"modules/ExercisesLibraryModule.html":{},"injectables/ExercisesLibraryService.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"controllers/FormController.html":{},"classes/FormDto.html":{},"modules/FormModule.html":{},"injectables/FormService.html":{},"injectables/JwtStrategy.html":{},"controllers/MealsController.html":{},"classes/MealsDto.html":{},"modules/MealsModule.html":{},"injectables/MealsService.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OpenffController.html":{},"modules/OpenffModule.html":{},"injectables/OpenffService.html":{},"controllers/PlanningController.html":{},"modules/PlanningModule.html":{},"injectables/PlanningService.html":{},"controllers/PreferencesController.html":{},"modules/PreferencesModule.html":{},"injectables/PreferencesService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ReportsController.html":{},"modules/ReportsModule.html":{},"injectables/ReportsService.html":{},"classes/Rooms.html":{},"controllers/SportsExerciseController.html":{},"classes/SportsExerciseDto.html":{},"modules/SportsExerciseModule.html":{},"injectables/SportsExerciseService.html":{},"controllers/StepsController.html":{},"modules/StepsModule.html":{},"injectables/StepsService.html":{},"classes/UpdateBugsBetaDto.html":{},"classes/UpdateExercisesLibraryDto.html":{},"classes/UpdateMealsDto.html":{},"classes/UpdateOpenffDto.html":{},"classes/UpdatePreferenceDto.html":{},"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{},"classes/UserInfosDto.html":{},"modules/UserInfosModule.html":{},"classes/UserNotFoundException.html":{},"classes/UserNotFoundException-1.html":{},"classes/UserNotFoundException-2.html":{},"classes/UserWithoutSidekickException.html":{}}}],["exports",{"_index":31,"title":{},"body":{"modules/AlgoMatchingModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BetaUsersModule.html":{},"modules/CaloriesModule.html":{},"modules/ChatModule.html":{},"modules/ExercisesLibraryModule.html":{},"modules/FileModule.html":{},"modules/FormModule.html":{},"modules/MealsModule.html":{},"modules/MessagesModule.html":{},"modules/OpenffModule.html":{},"modules/PlanningModule.html":{},"modules/PreferencesModule.html":{},"modules/PrismaModule.html":{},"modules/ReportsModule.html":{},"modules/SportsExerciseModule.html":{},"modules/StepsModule.html":{},"modules/UserInfosModule.html":{},"overview.html":{}}}],["express",{"_index":782,"title":{},"body":{"controllers/FileController.html":{},"controllers/UserInfosController.html":{},"dependencies.html":{},"license.html":{}}}],["express.multer.file",{"_index":774,"title":{},"body":{"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/UserInfoService.html":{}}}],["extends",{"_index":141,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"classes/UpdateExercisesLibraryDto.html":{},"classes/UpdateOpenffDto.html":{},"classes/UserNotFoundException.html":{},"classes/UserNotFoundException-1.html":{},"classes/UserNotFoundException-2.html":{},"classes/UserWithoutSidekickException.html":{}}}],["extname",{"_index":1582,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["extractjwt",{"_index":881,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":900,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fais",{"_index":1025,"title":{},"body":{"injectables/MessagesService.html":{}}}],["fait",{"_index":1032,"title":{},"body":{"injectables/MessagesService.html":{}}}],["false",{"_index":675,"title":{},"body":{"injectables/ChatService.html":{},"injectables/MessagesService.html":{},"controllers/UserInfosController.html":{}}}],["fasse",{"_index":1038,"title":{},"body":{"injectables/MessagesService.html":{}}}],["fat_100g",{"_index":1088,"title":{},"body":{"injectables/OpenffService.html":{}}}],["fetch(request",{"_index":1066,"title":{},"body":{"injectables/OpenffService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AlgoMatchingController.html":{},"modules/AlgoMatchingModule.html":{},"injectables/AlgoMatchingService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AuthConfig.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/BetaUsersController.html":{},"classes/BetaUsersDto.html":{},"modules/BetaUsersModule.html":{},"injectables/BetaUsersService.html":{},"controllers/BugsBetaController.html":{},"classes/BugsBetaDto.html":{},"modules/BugsBetaModule.html":{},"injectables/BugsBetaService.html":{},"controllers/CaloriesController.html":{},"modules/CaloriesModule.html":{},"injectables/CaloriesService.html":{},"controllers/ChatController.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreateExercisesLibraryDto.html":{},"classes/CreateOpenffDto.html":{},"classes/EditInfosDto.html":{},"controllers/ExercisesLibraryController.html":{},"modules/ExercisesLibraryModule.html":{},"injectables/ExercisesLibraryService.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"controllers/FormController.html":{},"classes/FormDto.html":{},"modules/FormModule.html":{},"injectables/FormService.html":{},"injectables/JwtStrategy.html":{},"controllers/MealsController.html":{},"classes/MealsDto.html":{},"modules/MealsModule.html":{},"injectables/MealsService.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OpenffController.html":{},"modules/OpenffModule.html":{},"injectables/OpenffService.html":{},"controllers/PlanningController.html":{},"modules/PlanningModule.html":{},"injectables/PlanningService.html":{},"controllers/PreferencesController.html":{},"modules/PreferencesModule.html":{},"injectables/PreferencesService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ReportsController.html":{},"modules/ReportsModule.html":{},"injectables/ReportsService.html":{},"classes/Rooms.html":{},"controllers/SportsExerciseController.html":{},"classes/SportsExerciseDto.html":{},"modules/SportsExerciseModule.html":{},"injectables/SportsExerciseService.html":{},"controllers/StepsController.html":{},"modules/StepsModule.html":{},"injectables/StepsService.html":{},"classes/UpdateBugsBetaDto.html":{},"classes/UpdateExercisesLibraryDto.html":{},"classes/UpdateMealsDto.html":{},"classes/UpdateOpenffDto.html":{},"classes/UpdatePreferenceDto.html":{},"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{},"classes/UserInfosDto.html":{},"modules/UserInfosModule.html":{},"classes/UserNotFoundException.html":{},"classes/UserNotFoundException-1.html":{},"classes/UserNotFoundException-2.html":{},"classes/UserWithoutSidekickException.html":{},"coverage.html":{}}}],["file.buffer",{"_index":820,"title":{},"body":{"injectables/FileService.html":{}}}],["file.controller",{"_index":796,"title":{},"body":{"modules/FileModule.html":{}}}],["file.mimetype",{"_index":822,"title":{},"body":{"injectables/FileService.html":{}}}],["file.service",{"_index":784,"title":{},"body":{"controllers/FileController.html":{},"modules/FileModule.html":{}}}],["file/file.module",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"modules/UserInfosModule.html":{}}}],["file/file.service",{"_index":1469,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["filecontroller",{"_index":770,"title":{"controllers/FileController.html":{}},"body":{"controllers/FileController.html":{},"modules/FileModule.html":{},"coverage.html":{}}}],["filefilter",{"_index":1577,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["fileinterceptor",{"_index":780,"title":{},"body":{"controllers/FileController.html":{},"controllers/UserInfosController.html":{}}}],["filemodule",{"_index":66,"title":{"modules/FileModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FileModule.html":{},"modules/UserInfosModule.html":{},"modules.html":{},"overview.html":{}}}],["files",{"_index":1712,"title":{},"body":{"license.html":{}}}],["fileservice",{"_index":783,"title":{"injectables/FileService.html":{}},"body":{"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"injectables/UserInfoService.html":{},"coverage.html":{},"overview.html":{}}}],["filesize",{"_index":1574,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["filetypes",{"_index":1579,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["filetypes.test(file.mimetype",{"_index":1585,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["filetypes.test(path.extname(file.originalname).tolowercase",{"_index":1583,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["filetypevalidator",{"_index":1550,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["find",{"_index":969,"title":{},"body":{"injectables/MealsService.html":{},"controllers/SportsExerciseController.html":{},"injectables/SportsExerciseService.html":{},"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{}}}],["find(@param('id",{"_index":1340,"title":{},"body":{"controllers/SportsExerciseController.html":{}}}],["find(@request",{"_index":1555,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["find(id",{"_index":1324,"title":{},"body":{"controllers/SportsExerciseController.html":{},"injectables/SportsExerciseService.html":{}}}],["find(req",{"_index":1532,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["find(useremail",{"_index":974,"title":{},"body":{"injectables/MealsService.html":{},"injectables/UserInfoService.html":{}}}],["findall",{"_index":717,"title":{},"body":{"controllers/ExercisesLibraryController.html":{},"injectables/ExercisesLibraryService.html":{},"controllers/OpenffController.html":{},"injectables/OpenffService.html":{},"controllers/SportsExerciseController.html":{},"injectables/SportsExerciseService.html":{}}}],["findall(@param(\"request",{"_index":1056,"title":{},"body":{"controllers/OpenffController.html":{}}}],["findall(@request",{"_index":1342,"title":{},"body":{"controllers/SportsExerciseController.html":{}}}],["findall(email",{"_index":1366,"title":{},"body":{"injectables/SportsExerciseService.html":{}}}],["findall(req",{"_index":1326,"title":{},"body":{"controllers/SportsExerciseController.html":{}}}],["findall(request",{"_index":1049,"title":{},"body":{"controllers/OpenffController.html":{},"injectables/OpenffService.html":{}}}],["findbyday",{"_index":970,"title":{},"body":{"injectables/MealsService.html":{}}}],["findbyday(useremail",{"_index":976,"title":{},"body":{"injectables/MealsService.html":{}}}],["findone",{"_index":718,"title":{},"body":{"controllers/ExercisesLibraryController.html":{},"injectables/ExercisesLibraryService.html":{},"injectables/MealsService.html":{}}}],["findone(@param('id",{"_index":745,"title":{},"body":{"controllers/ExercisesLibraryController.html":{}}}],["findone(id",{"_index":724,"title":{},"body":{"controllers/ExercisesLibraryController.html":{},"injectables/ExercisesLibraryService.html":{},"injectables/MealsService.html":{}}}],["findsidekick",{"_index":1438,"title":{},"body":{"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{}}}],["findsidekick(@request",{"_index":1558,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["findsidekick(req",{"_index":1534,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["findsidekick(useremail",{"_index":1450,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["finduserbysocketid",{"_index":1282,"title":{},"body":{"classes/Rooms.html":{}}}],["finduserbysocketid(socketid",{"_index":1294,"title":{},"body":{"classes/Rooms.html":{}}}],["finduserswithoutsidekick",{"_index":1439,"title":{},"body":{"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{}}}],["firstname",{"_index":411,"title":{},"body":{"classes/BetaUsersDto.html":{},"classes/EditInfosDto.html":{},"classes/FormDto.html":{},"injectables/UserInfoService.html":{},"classes/UserInfosDto.html":{}}}],["fitness",{"_index":1745,"title":{},"body":{"license.html":{}}}],["following",{"_index":1731,"title":{},"body":{"license.html":{}}}],["forbiddenexception",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FormService.html":{},"injectables/MessagesService.html":{},"injectables/UserInfoService.html":{}}}],["forbiddenexception(\"user",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception('credentials",{"_index":873,"title":{},"body":{"injectables/FormService.html":{}}}],["forgotpassword",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["forgotpassword(@body(\"email",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{}}}],["forgotpassword(email",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["form",{"_index":829,"title":{},"body":{"controllers/FormController.html":{}}}],["form.controller",{"_index":859,"title":{},"body":{"modules/FormModule.html":{}}}],["form.service",{"_index":837,"title":{},"body":{"controllers/FormController.html":{},"modules/FormModule.html":{}}}],["form/form.module",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["formatteddate",{"_index":990,"title":{},"body":{"injectables/MealsService.html":{}}}],["formcontroller",{"_index":827,"title":{"controllers/FormController.html":{}},"body":{"controllers/FormController.html":{},"modules/FormModule.html":{},"coverage.html":{}}}],["formdto",{"_index":832,"title":{"classes/FormDto.html":{}},"body":{"controllers/FormController.html":{},"classes/FormDto.html":{},"injectables/FormService.html":{},"coverage.html":{}}}],["formmodule",{"_index":67,"title":{"modules/FormModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FormModule.html":{},"modules.html":{},"overview.html":{}}}],["formservice",{"_index":836,"title":{"injectables/FormService.html":{}},"body":{"controllers/FormController.html":{},"modules/FormModule.html":{},"injectables/FormService.html":{},"coverage.html":{},"overview.html":{}}}],["found",{"_index":1271,"title":{},"body":{"injectables/ReportsService.html":{},"injectables/SportsExerciseService.html":{},"classes/UserNotFoundException.html":{},"classes/UserNotFoundException-1.html":{},"classes/UserNotFoundException-2.html":{},"classes/UserWithoutSidekickException.html":{}}}],["found.exception",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{},"injectables/BugsBetaService.html":{},"injectables/CaloriesService.html":{},"injectables/MealsService.html":{},"injectables/PlanningService.html":{},"injectables/SportsExerciseService.html":{},"injectables/StepsService.html":{},"injectables/UserInfoService.html":{}}}],["found.exception.ts",{"_index":1615,"title":{},"body":{"classes/UserNotFoundException.html":{},"classes/UserNotFoundException-1.html":{},"classes/UserNotFoundException-2.html":{},"classes/UserWithoutSidekickException.html":{},"coverage.html":{}}}],["found.exception.ts:3",{"_index":1617,"title":{},"body":{"classes/UserNotFoundException.html":{},"classes/UserNotFoundException-1.html":{},"classes/UserNotFoundException-2.html":{}}}],["found.exception.ts:9",{"_index":1624,"title":{},"body":{"classes/UserWithoutSidekickException.html":{}}}],["free",{"_index":1705,"title":{},"body":{"license.html":{}}}],["frequence_sportive",{"_index":1487,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["from_id",{"_index":662,"title":{},"body":{"injectables/ChatService.html":{}}}],["fulluser",{"_index":678,"title":{},"body":{"injectables/ChatService.html":{}}}],["fulluser.sidekick_id",{"_index":681,"title":{},"body":{"injectables/ChatService.html":{}}}],["function",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["functions",{"_index":1677,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":1729,"title":{},"body":{"license.html":{}}}],["gender",{"_index":699,"title":{},"body":{"classes/EditInfosDto.html":{},"classes/FormDto.html":{},"injectables/UserInfoService.html":{},"classes/UserInfosDto.html":{}}}],["gender[data.gender",{"_index":1509,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["gender[datas[\"gender",{"_index":1494,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["generateseed",{"_index":1687,"title":{},"body":{"index.html":{}}}],["get(\"/:id",{"_index":485,"title":{},"body":{"controllers/BugsBetaController.html":{},"controllers/MealsController.html":{},"controllers/SportsExerciseController.html":{}}}],["get(\"/all",{"_index":566,"title":{},"body":{"controllers/ChatController.html":{}}}],["get(\"/findbypage",{"_index":482,"title":{},"body":{"controllers/BugsBetaController.html":{}}}],["get(\":request",{"_index":1055,"title":{},"body":{"controllers/OpenffController.html":{}}}],["get(\"calories",{"_index":538,"title":{},"body":{"controllers/CaloriesController.html":{}}}],["get(\"find_users_without_sidekick",{"_index":1596,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["get(\"findbyday",{"_index":937,"title":{},"body":{"controllers/MealsController.html":{}}}],["get(\"getmessages",{"_index":1004,"title":{},"body":{"controllers/MessagesController.html":{}}}],["get(\"me",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(\"public",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(\"sidekick",{"_index":1557,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["get(\"steps",{"_index":1390,"title":{},"body":{"controllers/StepsController.html":{}}}],["get('/:id",{"_index":453,"title":{},"body":{"controllers/BugsBetaController.html":{},"controllers/MealsController.html":{},"controllers/SportsExerciseController.html":{}}}],["get('/all",{"_index":560,"title":{},"body":{"controllers/ChatController.html":{}}}],["get('/findbypage",{"_index":456,"title":{},"body":{"controllers/BugsBetaController.html":{}}}],["get(':id",{"_index":725,"title":{},"body":{"controllers/ExercisesLibraryController.html":{}}}],["get('calories",{"_index":535,"title":{},"body":{"controllers/CaloriesController.html":{}}}],["get('findbyday",{"_index":921,"title":{},"body":{"controllers/MealsController.html":{}}}],["get('me",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('sidekick",{"_index":1535,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["get('steps",{"_index":1386,"title":{},"body":{"controllers/StepsController.html":{}}}],["get(@getcurrentuseremail",{"_index":1205,"title":{},"body":{"controllers/PreferencesController.html":{}}}],["get(email",{"_index":1194,"title":{},"body":{"controllers/PreferencesController.html":{},"injectables/PreferencesService.html":{}}}],["getall",{"_index":443,"title":{},"body":{"controllers/BugsBetaController.html":{},"injectables/BugsBetaService.html":{},"injectables/ChatService.html":{}}}],["getall(email",{"_index":623,"title":{},"body":{"injectables/ChatService.html":{}}}],["getallmessages",{"_index":558,"title":{},"body":{"controllers/ChatController.html":{}}}],["getallmessages(@getcurrentuseremail",{"_index":567,"title":{},"body":{"controllers/ChatController.html":{}}}],["getallmessages(email",{"_index":559,"title":{},"body":{"controllers/ChatController.html":{}}}],["getbyid",{"_index":444,"title":{},"body":{"controllers/BugsBetaController.html":{},"injectables/BugsBetaService.html":{}}}],["getbyid(@param('id",{"_index":486,"title":{},"body":{"controllers/BugsBetaController.html":{}}}],["getbyid(id",{"_index":452,"title":{},"body":{"controllers/BugsBetaController.html":{},"injectables/BugsBetaService.html":{}}}],["getbypage",{"_index":498,"title":{},"body":{"injectables/BugsBetaService.html":{}}}],["getbypage(page",{"_index":509,"title":{},"body":{"injectables/BugsBetaService.html":{}}}],["getcalories",{"_index":533,"title":{},"body":{"controllers/CaloriesController.html":{},"controllers/StepsController.html":{}}}],["getcalories(@request",{"_index":539,"title":{},"body":{"controllers/CaloriesController.html":{},"controllers/StepsController.html":{}}}],["getcalories(req",{"_index":534,"title":{},"body":{"controllers/CaloriesController.html":{},"controllers/StepsController.html":{}}}],["getcaloriesbyid",{"_index":546,"title":{},"body":{"injectables/CaloriesService.html":{}}}],["getcaloriesbyid(useremail",{"_index":548,"title":{},"body":{"injectables/CaloriesService.html":{}}}],["getcurrentuseremail",{"_index":562,"title":{},"body":{"controllers/ChatController.html":{},"controllers/PlanningController.html":{},"controllers/PreferencesController.html":{},"controllers/ReportsController.html":{},"controllers/UserInfosController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["gethello",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmeal",{"_index":910,"title":{},"body":{"controllers/MealsController.html":{}}}],["getmeal(@param('id",{"_index":941,"title":{},"body":{"controllers/MealsController.html":{}}}],["getmeal(id",{"_index":917,"title":{},"body":{"controllers/MealsController.html":{}}}],["getmealsforoneday",{"_index":445,"title":{},"body":{"controllers/BugsBetaController.html":{},"controllers/MealsController.html":{}}}],["getmealsforoneday(@query('page",{"_index":483,"title":{},"body":{"controllers/BugsBetaController.html":{}}}],["getmealsforoneday(@request",{"_index":938,"title":{},"body":{"controllers/MealsController.html":{}}}],["getmealsforoneday(page",{"_index":455,"title":{},"body":{"controllers/BugsBetaController.html":{}}}],["getmealsforoneday(req",{"_index":919,"title":{},"body":{"controllers/MealsController.html":{}}}],["getmessages",{"_index":1012,"title":{},"body":{"injectables/MessagesService.html":{}}}],["getmessages(userid",{"_index":1014,"title":{},"body":{"injectables/MessagesService.html":{}}}],["getplanningbyday",{"_index":1113,"title":{},"body":{"controllers/PlanningController.html":{},"injectables/PlanningService.html":{}}}],["getplanningbyday(@getcurrentuseremail",{"_index":1140,"title":{},"body":{"controllers/PlanningController.html":{}}}],["getplanningbyday(email",{"_index":1122,"title":{},"body":{"controllers/PlanningController.html":{},"injectables/PlanningService.html":{}}}],["getroom",{"_index":1283,"title":{},"body":{"classes/Rooms.html":{}}}],["getroom(roomid",{"_index":1296,"title":{},"body":{"classes/Rooms.html":{}}}],["getroomusers",{"_index":1284,"title":{},"body":{"classes/Rooms.html":{}}}],["getroomusers(roomid",{"_index":1298,"title":{},"body":{"classes/Rooms.html":{}}}],["getstepsbyid",{"_index":1397,"title":{},"body":{"injectables/StepsService.html":{}}}],["getstepsbyid(useremail",{"_index":1399,"title":{},"body":{"injectables/StepsService.html":{}}}],["getting",{"_index":1679,"title":{"index.html":{},"license.html":{}},"body":{}}],["getuserfromid",{"_index":1440,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["getuserfromid(id",{"_index":1453,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["getuserinfos",{"_index":995,"title":{},"body":{"controllers/MessagesController.html":{}}}],["getuserinfos(@query",{"_index":1005,"title":{},"body":{"controllers/MessagesController.html":{}}}],["getuserinfos(query",{"_index":996,"title":{},"body":{"controllers/MessagesController.html":{}}}],["global",{"_index":1223,"title":{},"body":{"modules/PrismaModule.html":{}}}],["goal",{"_index":1460,"title":{},"body":{"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{}}}],["goal[goal.touppercase",{"_index":1527,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["granted",{"_index":1704,"title":{},"body":{"license.html":{}}}],["graph",{"_index":1767,"title":{},"body":{"modules.html":{}}}],["handleconnection",{"_index":572,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{}}}],["handleconnection(socket",{"_index":580,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{}}}],["handledisconnect",{"_index":573,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{}}}],["handledisconnect(socket",{"_index":583,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{}}}],["handlemessage",{"_index":574,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{}}}],["handlemessage(client",{"_index":585,"title":{},"body":{"classes/ChatGateway.html":{}}}],["handlemessage(socket",{"_index":627,"title":{},"body":{"injectables/ChatService.html":{}}}],["handleseen",{"_index":575,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{}}}],["handleseen(client",{"_index":590,"title":{},"body":{"classes/ChatGateway.html":{}}}],["handleseen(socket",{"_index":629,"title":{},"body":{"injectables/ChatService.html":{}}}],["handlewriting",{"_index":576,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{}}}],["handlewriting(client",{"_index":593,"title":{},"body":{"classes/ChatGateway.html":{}}}],["handlewriting(socket",{"_index":631,"title":{},"body":{"injectables/ChatService.html":{}}}],["hash",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{}}}],["headers",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OpenffService.html":{}}}],["hello",{"_index":123,"title":{},"body":{"injectables/AppService.html":{}}}],["hereby",{"_index":1703,"title":{},"body":{"license.html":{}}}],["heure",{"_index":1045,"title":{},"body":{"injectables/MessagesService.html":{}}}],["holders",{"_index":1750,"title":{},"body":{"license.html":{}}}],["https://${this.configservice.get(\"aws_bucket_name\")}.s3.${this.configservice.get(\"aws_region\")}.amazonaws.com/${key",{"_index":825,"title":{},"body":{"injectables/FileService.html":{}}}],["https://cognito",{"_index":162,"title":{},"body":{"injectables/AuthConfig.html":{}}}],["https://media.istockphoto.com/id/1357365823/vector/default",{"_index":1092,"title":{},"body":{"injectables/OpenffService.html":{}}}],["httpstatus",{"_index":1465,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["httpstatus.ok",{"_index":1524,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["icon",{"_index":1094,"title":{},"body":{"injectables/OpenffService.html":{}}}],["id",{"_index":412,"title":{},"body":{"classes/BetaUsersDto.html":{},"controllers/BugsBetaController.html":{},"classes/BugsBetaDto.html":{},"injectables/BugsBetaService.html":{},"injectables/ChatService.html":{},"controllers/ExercisesLibraryController.html":{},"injectables/ExercisesLibraryService.html":{},"controllers/MealsController.html":{},"classes/MealsDto.html":{},"injectables/MealsService.html":{},"controllers/MessagesController.html":{},"controllers/PlanningController.html":{},"injectables/PlanningService.html":{},"controllers/SportsExerciseController.html":{},"classes/SportsExerciseDto.html":{},"injectables/SportsExerciseService.html":{},"classes/UpdateBugsBetaDto.html":{},"classes/UpdateExercisesLibraryDto.html":{},"classes/UpdateMealsDto.html":{},"injectables/UserInfoService.html":{},"classes/UserNotFoundException-2.html":{},"classes/UserWithoutSidekickException.html":{}}}],["id1",{"_index":1517,"title":{},"body":{"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{}}}],["id2",{"_index":1518,"title":{},"body":{"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{}}}],["identifier",{"_index":1627,"title":{},"body":{"coverage.html":{}}}],["identity",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["idp.${process.env.cognito_region}.amazonaws.com/${process.env.cognito_user_pool_id",{"_index":163,"title":{},"body":{"injectables/AuthConfig.html":{}}}],["image",{"_index":1093,"title":{},"body":{"injectables/OpenffService.html":{}}}],["image_front_url",{"_index":1090,"title":{},"body":{"injectables/OpenffService.html":{}}}],["images",{"_index":1589,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["implements",{"_index":1232,"title":{},"body":{"injectables/PrismaService.html":{}}}],["implied",{"_index":1741,"title":{},"body":{"license.html":{}}}],["import",{"_index":12,"title":{},"body":{"controllers/AlgoMatchingController.html":{},"modules/AlgoMatchingModule.html":{},"injectables/AlgoMatchingService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AuthConfig.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/BetaUsersController.html":{},"classes/BetaUsersDto.html":{},"modules/BetaUsersModule.html":{},"injectables/BetaUsersService.html":{},"controllers/BugsBetaController.html":{},"classes/BugsBetaDto.html":{},"modules/BugsBetaModule.html":{},"injectables/BugsBetaService.html":{},"controllers/CaloriesController.html":{},"modules/CaloriesModule.html":{},"injectables/CaloriesService.html":{},"controllers/ChatController.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreateExercisesLibraryDto.html":{},"classes/EditInfosDto.html":{},"controllers/ExercisesLibraryController.html":{},"modules/ExercisesLibraryModule.html":{},"injectables/ExercisesLibraryService.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"controllers/FormController.html":{},"classes/FormDto.html":{},"modules/FormModule.html":{},"injectables/FormService.html":{},"injectables/JwtStrategy.html":{},"controllers/MealsController.html":{},"classes/MealsDto.html":{},"modules/MealsModule.html":{},"injectables/MealsService.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OpenffController.html":{},"modules/OpenffModule.html":{},"injectables/OpenffService.html":{},"controllers/PlanningController.html":{},"modules/PlanningModule.html":{},"injectables/PlanningService.html":{},"controllers/PreferencesController.html":{},"modules/PreferencesModule.html":{},"injectables/PreferencesService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ReportsController.html":{},"modules/ReportsModule.html":{},"injectables/ReportsService.html":{},"controllers/SportsExerciseController.html":{},"classes/SportsExerciseDto.html":{},"modules/SportsExerciseModule.html":{},"injectables/SportsExerciseService.html":{},"controllers/StepsController.html":{},"modules/StepsModule.html":{},"injectables/StepsService.html":{},"classes/UpdateBugsBetaDto.html":{},"classes/UpdateExercisesLibraryDto.html":{},"classes/UpdateMealsDto.html":{},"classes/UpdateOpenffDto.html":{},"classes/UpdatePreferenceDto.html":{},"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{},"classes/UserInfosDto.html":{},"modules/UserInfosModule.html":{},"classes/UserNotFoundException.html":{},"classes/UserNotFoundException-1.html":{},"classes/UserNotFoundException-2.html":{},"classes/UserWithoutSidekickException.html":{}}}],["imports",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/FileModule.html":{},"modules/FormModule.html":{},"modules/PrismaModule.html":{},"modules/UserInfosModule.html":{}}}],["include",{"_index":1217,"title":{},"body":{"injectables/PreferencesService.html":{}}}],["included",{"_index":1736,"title":{},"body":{"license.html":{}}}],["including",{"_index":1716,"title":{},"body":{"license.html":{}}}],["incorrect",{"_index":874,"title":{},"body":{"injectables/FormService.html":{}}}],["index",{"_index":44,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AuthConfig.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"controllers/BetaUsersController.html":{},"classes/BetaUsersDto.html":{},"injectables/BetaUsersService.html":{},"controllers/BugsBetaController.html":{},"classes/BugsBetaDto.html":{},"injectables/BugsBetaService.html":{},"controllers/CaloriesController.html":{},"injectables/CaloriesService.html":{},"controllers/ChatController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CreateExercisesLibraryDto.html":{},"classes/EditInfosDto.html":{},"controllers/ExercisesLibraryController.html":{},"injectables/ExercisesLibraryService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"controllers/FormController.html":{},"classes/FormDto.html":{},"injectables/FormService.html":{},"injectables/JwtStrategy.html":{},"controllers/MealsController.html":{},"classes/MealsDto.html":{},"injectables/MealsService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"controllers/OpenffController.html":{},"injectables/OpenffService.html":{},"controllers/PlanningController.html":{},"injectables/PlanningService.html":{},"controllers/PreferencesController.html":{},"injectables/PreferencesService.html":{},"injectables/PrismaService.html":{},"controllers/ReportsController.html":{},"injectables/ReportsService.html":{},"classes/Rooms.html":{},"controllers/SportsExerciseController.html":{},"classes/SportsExerciseDto.html":{},"injectables/SportsExerciseService.html":{},"controllers/StepsController.html":{},"injectables/StepsService.html":{},"classes/UpdateBugsBetaDto.html":{},"classes/UpdateExercisesLibraryDto.html":{},"classes/UpdateMealsDto.html":{},"classes/UpdatePreferenceDto.html":{},"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{},"classes/UserInfosDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AlgoMatchingController.html":{},"modules/AlgoMatchingModule.html":{},"injectables/AlgoMatchingService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AuthConfig.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/BetaUsersController.html":{},"classes/BetaUsersDto.html":{},"modules/BetaUsersModule.html":{},"injectables/BetaUsersService.html":{},"controllers/BugsBetaController.html":{},"classes/BugsBetaDto.html":{},"modules/BugsBetaModule.html":{},"injectables/BugsBetaService.html":{},"controllers/CaloriesController.html":{},"modules/CaloriesModule.html":{},"injectables/CaloriesService.html":{},"controllers/ChatController.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreateExercisesLibraryDto.html":{},"classes/CreateOpenffDto.html":{},"classes/EditInfosDto.html":{},"controllers/ExercisesLibraryController.html":{},"modules/ExercisesLibraryModule.html":{},"injectables/ExercisesLibraryService.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"controllers/FormController.html":{},"classes/FormDto.html":{},"modules/FormModule.html":{},"injectables/FormService.html":{},"injectables/JwtStrategy.html":{},"controllers/MealsController.html":{},"classes/MealsDto.html":{},"modules/MealsModule.html":{},"injectables/MealsService.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OpenffController.html":{},"modules/OpenffModule.html":{},"injectables/OpenffService.html":{},"controllers/PlanningController.html":{},"modules/PlanningModule.html":{},"injectables/PlanningService.html":{},"controllers/PreferencesController.html":{},"modules/PreferencesModule.html":{},"injectables/PreferencesService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ReportsController.html":{},"modules/ReportsModule.html":{},"injectables/ReportsService.html":{},"classes/Rooms.html":{},"controllers/SportsExerciseController.html":{},"classes/SportsExerciseDto.html":{},"modules/SportsExerciseModule.html":{},"injectables/SportsExerciseService.html":{},"controllers/StepsController.html":{},"modules/StepsModule.html":{},"injectables/StepsService.html":{},"classes/UpdateBugsBetaDto.html":{},"classes/UpdateExercisesLibraryDto.html":{},"classes/UpdateMealsDto.html":{},"classes/UpdateOpenffDto.html":{},"classes/UpdatePreferenceDto.html":{},"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{},"classes/UserInfosDto.html":{},"modules/UserInfosModule.html":{},"classes/UserNotFoundException.html":{},"classes/UserNotFoundException-1.html":{},"classes/UserNotFoundException-2.html":{},"classes/UserWithoutSidekickException.html":{}}}],["ingredients",{"_index":953,"title":{},"body":{"classes/MealsDto.html":{},"classes/UpdateMealsDto.html":{}}}],["initiated",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectable",{"_index":39,"title":{"injectables/AlgoMatchingService.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AuthConfig.html":{},"injectables/AuthService.html":{},"injectables/BetaUsersService.html":{},"injectables/BugsBetaService.html":{},"injectables/CaloriesService.html":{},"injectables/ChatService.html":{},"injectables/ExercisesLibraryService.html":{},"injectables/FileService.html":{},"injectables/FormService.html":{},"injectables/JwtStrategy.html":{},"injectables/MealsService.html":{},"injectables/MessagesService.html":{},"injectables/OpenffService.html":{},"injectables/PlanningService.html":{},"injectables/PreferencesService.html":{},"injectables/PrismaService.html":{},"injectables/ReportsService.html":{},"injectables/SportsExerciseService.html":{},"injectables/StepsService.html":{},"injectables/UserInfoService.html":{}},"body":{"injectables/AlgoMatchingService.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AuthConfig.html":{},"injectables/AuthService.html":{},"injectables/BetaUsersService.html":{},"injectables/BugsBetaService.html":{},"injectables/CaloriesService.html":{},"injectables/ChatService.html":{},"injectables/ExercisesLibraryService.html":{},"injectables/FileService.html":{},"injectables/FormService.html":{},"injectables/JwtStrategy.html":{},"injectables/MealsService.html":{},"injectables/MessagesService.html":{},"injectables/OpenffService.html":{},"injectables/PlanningService.html":{},"injectables/PreferencesService.html":{},"injectables/PrismaService.html":{},"injectables/ReportsService.html":{},"injectables/SportsExerciseService.html":{},"injectables/StepsService.html":{},"injectables/UserInfoService.html":{},"coverage.html":{}}}],["injectables",{"_index":40,"title":{},"body":{"injectables/AlgoMatchingService.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AuthConfig.html":{},"injectables/AuthService.html":{},"injectables/BetaUsersService.html":{},"injectables/BugsBetaService.html":{},"injectables/CaloriesService.html":{},"injectables/ChatService.html":{},"injectables/ExercisesLibraryService.html":{},"injectables/FileService.html":{},"injectables/FormService.html":{},"injectables/JwtStrategy.html":{},"injectables/MealsService.html":{},"injectables/MessagesService.html":{},"injectables/OpenffService.html":{},"injectables/PlanningService.html":{},"injectables/PreferencesService.html":{},"injectables/PrismaService.html":{},"injectables/ReportsService.html":{},"injectables/SportsExerciseService.html":{},"injectables/StepsService.html":{},"injectables/UserInfoService.html":{},"overview.html":{}}}],["instanceof",{"_index":870,"title":{},"body":{"injectables/FormService.html":{}}}],["internalservererrorexception",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["isarray",{"_index":961,"title":{},"body":{"classes/MealsDto.html":{},"classes/UpdateMealsDto.html":{}}}],["isboolean",{"_index":1436,"title":{},"body":{"classes/UpdatePreferenceDto.html":{}}}],["isdate",{"_index":962,"title":{},"body":{"classes/MealsDto.html":{},"classes/UpdateMealsDto.html":{}}}],["isemail",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{}}}],["isint",{"_index":854,"title":{},"body":{"classes/FormDto.html":{},"classes/MealsDto.html":{},"classes/UpdateMealsDto.html":{}}}],["isjson",{"_index":963,"title":{},"body":{"classes/MealsDto.html":{},"classes/UpdateMealsDto.html":{}}}],["isnotempty",{"_index":269,"title":{},"body":{"classes/AuthDto.html":{},"classes/BetaUsersDto.html":{},"classes/BugsBetaDto.html":{},"classes/CreateExercisesLibraryDto.html":{},"classes/FormDto.html":{},"classes/MealsDto.html":{},"classes/SportsExerciseDto.html":{},"classes/UpdateExercisesLibraryDto.html":{},"classes/UpdateMealsDto.html":{},"classes/UserInfosDto.html":{}}}],["isnotempty()@isint",{"_index":848,"title":{},"body":{"classes/FormDto.html":{}}}],["isnotempty()@isstring",{"_index":266,"title":{},"body":{"classes/AuthDto.html":{},"classes/BugsBetaDto.html":{},"classes/CreateExercisesLibraryDto.html":{},"classes/FormDto.html":{},"classes/MealsDto.html":{},"classes/SportsExerciseDto.html":{},"classes/UpdateExercisesLibraryDto.html":{},"classes/UserInfosDto.html":{}}}],["isoptional",{"_index":691,"title":{},"body":{"classes/CreateExercisesLibraryDto.html":{},"classes/EditInfosDto.html":{},"classes/UpdateBugsBetaDto.html":{},"classes/UpdateMealsDto.html":{},"classes/UpdatePreferenceDto.html":{}}}],["isoptional()@isboolean",{"_index":1432,"title":{},"body":{"classes/UpdatePreferenceDto.html":{}}}],["isoptional()@isstring",{"_index":703,"title":{},"body":{"classes/EditInfosDto.html":{},"classes/UpdateBugsBetaDto.html":{},"classes/UpdateMealsDto.html":{}}}],["ispublic",{"_index":145,"title":{},"body":{"injectables/AtGuard.html":{}}}],["isstring",{"_index":270,"title":{},"body":{"classes/AuthDto.html":{},"classes/BetaUsersDto.html":{},"classes/BugsBetaDto.html":{},"classes/CreateExercisesLibraryDto.html":{},"classes/EditInfosDto.html":{},"classes/FormDto.html":{},"classes/MealsDto.html":{},"classes/SportsExerciseDto.html":{},"classes/UpdateBugsBetaDto.html":{},"classes/UpdateExercisesLibraryDto.html":{},"classes/UpdateMealsDto.html":{},"classes/UserInfosDto.html":{}}}],["isstring()@isnotempty",{"_index":414,"title":{},"body":{"classes/BetaUsersDto.html":{}}}],["issuer",{"_index":901,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["j'ai",{"_index":1029,"title":{},"body":{"injectables/MessagesService.html":{}}}],["jpeg|jpg|png",{"_index":1580,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["js",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["jwks",{"_index":886,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwksrequestsperminute",{"_index":892,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwksuri",{"_index":894,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwt",{"_index":281,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":899,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtstrategy",{"_index":273,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":815,"title":{},"body":{"injectables/FileService.html":{}}}],["kill",{"_index":866,"title":{},"body":{"injectables/FormService.html":{},"injectables/MessagesService.html":{}}}],["kind",{"_index":1740,"title":{},"body":{"license.html":{}}}],["known/jwks.json",{"_index":896,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["la",{"_index":1037,"title":{},"body":{"injectables/MessagesService.html":{}}}],["lastname",{"_index":413,"title":{},"body":{"classes/BetaUsersDto.html":{},"classes/EditInfosDto.html":{},"classes/FormDto.html":{},"injectables/UserInfoService.html":{},"classes/UserInfosDto.html":{}}}],["launch",{"_index":1681,"title":{},"body":{"index.html":{}}}],["legend",{"_index":27,"title":{},"body":{"modules/AlgoMatchingModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BetaUsersModule.html":{},"modules/CaloriesModule.html":{},"modules/ChatModule.html":{},"modules/ExercisesLibraryModule.html":{},"modules/FileModule.html":{},"modules/FormModule.html":{},"modules/MealsModule.html":{},"modules/MessagesModule.html":{},"modules/OpenffModule.html":{},"modules/PlanningModule.html":{},"modules/PreferencesModule.html":{},"modules/PrismaModule.html":{},"modules/ReportsModule.html":{},"modules/SportsExerciseModule.html":{},"modules/StepsModule.html":{},"modules/UserInfosModule.html":{},"overview.html":{}}}],["liability",{"_index":1754,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1751,"title":{},"body":{"license.html":{}}}],["library",{"_index":716,"title":{},"body":{"controllers/ExercisesLibraryController.html":{}}}],["license",{"_index":1697,"title":{"license.html":{}},"body":{"license.html":{},"properties.html":{}}}],["limit",{"_index":1576,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["limitation",{"_index":1717,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1742,"title":{},"body":{"license.html":{}}}],["limits",{"_index":1573,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["linkusers",{"_index":1441,"title":{},"body":{"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{}}}],["linkusers(@body",{"_index":1594,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["linkusers(req",{"_index":1455,"title":{},"body":{"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{}}}],["literal",{"_index":997,"title":{},"body":{"controllers/MessagesController.html":{},"controllers/PlanningController.html":{},"injectables/PlanningService.html":{},"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{},"miscellaneous/typealiases.html":{}}}],["login",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(dto",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(@body",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(email",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["ma",{"_index":1033,"title":{},"body":{"injectables/MessagesService.html":{}}}],["matching",{"_index":11,"title":{},"body":{"controllers/AlgoMatchingController.html":{},"modules/AlgoMatchingModule.html":{},"injectables/AlgoMatchingService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AuthConfig.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/BetaUsersController.html":{},"classes/BetaUsersDto.html":{},"modules/BetaUsersModule.html":{},"injectables/BetaUsersService.html":{},"controllers/BugsBetaController.html":{},"classes/BugsBetaDto.html":{},"modules/BugsBetaModule.html":{},"injectables/BugsBetaService.html":{},"controllers/CaloriesController.html":{},"modules/CaloriesModule.html":{},"injectables/CaloriesService.html":{},"controllers/ChatController.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreateExercisesLibraryDto.html":{},"classes/CreateOpenffDto.html":{},"classes/EditInfosDto.html":{},"controllers/ExercisesLibraryController.html":{},"modules/ExercisesLibraryModule.html":{},"injectables/ExercisesLibraryService.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"controllers/FormController.html":{},"classes/FormDto.html":{},"modules/FormModule.html":{},"injectables/FormService.html":{},"injectables/JwtStrategy.html":{},"controllers/MealsController.html":{},"classes/MealsDto.html":{},"modules/MealsModule.html":{},"injectables/MealsService.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OpenffController.html":{},"modules/OpenffModule.html":{},"injectables/OpenffService.html":{},"controllers/PlanningController.html":{},"modules/PlanningModule.html":{},"injectables/PlanningService.html":{},"controllers/PreferencesController.html":{},"modules/PreferencesModule.html":{},"injectables/PreferencesService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ReportsController.html":{},"modules/ReportsModule.html":{},"injectables/ReportsService.html":{},"classes/Rooms.html":{},"controllers/SportsExerciseController.html":{},"classes/SportsExerciseDto.html":{},"modules/SportsExerciseModule.html":{},"injectables/SportsExerciseService.html":{},"controllers/StepsController.html":{},"modules/StepsModule.html":{},"injectables/StepsService.html":{},"classes/UpdateBugsBetaDto.html":{},"classes/UpdateExercisesLibraryDto.html":{},"classes/UpdateMealsDto.html":{},"classes/UpdateOpenffDto.html":{},"classes/UpdatePreferenceDto.html":{},"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{},"classes/UserInfosDto.html":{},"modules/UserInfosModule.html":{},"classes/UserNotFoundException.html":{},"classes/UserNotFoundException-1.html":{},"classes/UserNotFoundException-2.html":{},"classes/UserWithoutSidekickException.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matching.controller",{"_index":38,"title":{},"body":{"modules/AlgoMatchingModule.html":{}}}],["matching.controller.ts",{"_index":8,"title":{},"body":{"controllers/AlgoMatchingController.html":{},"coverage.html":{}}}],["matching.module.ts",{"_index":37,"title":{},"body":{"modules/AlgoMatchingModule.html":{}}}],["matching.service",{"_index":16,"title":{},"body":{"controllers/AlgoMatchingController.html":{},"modules/AlgoMatchingModule.html":{}}}],["matching.service.ts",{"_index":41,"title":{},"body":{"injectables/AlgoMatchingService.html":{},"coverage.html":{}}}],["matching/algo",{"_index":7,"title":{},"body":{"controllers/AlgoMatchingController.html":{},"modules/AlgoMatchingModule.html":{},"injectables/AlgoMatchingService.html":{},"coverage.html":{}}}],["maxfilesizevalidator",{"_index":1551,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["me(@request",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{}}}],["me(req",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["meal",{"_index":527,"title":{},"body":{"injectables/BugsBetaService.html":{},"injectables/MealsService.html":{}}}],["meal_id",{"_index":1152,"title":{},"body":{"controllers/PlanningController.html":{},"injectables/PlanningService.html":{}}}],["meals",{"_index":908,"title":{},"body":{"controllers/MealsController.html":{}}}],["meals.controller",{"_index":967,"title":{},"body":{"modules/MealsModule.html":{}}}],["meals.service",{"_index":933,"title":{},"body":{"controllers/MealsController.html":{},"modules/MealsModule.html":{}}}],["meals/meals.controller",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["meals/meals.module",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["meals/meals.service",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["mealscontroller",{"_index":83,"title":{"controllers/MealsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/MealsController.html":{},"modules/MealsModule.html":{},"coverage.html":{}}}],["mealsdto",{"_index":915,"title":{"classes/MealsDto.html":{}},"body":{"controllers/MealsController.html":{},"classes/MealsDto.html":{},"injectables/MealsService.html":{},"coverage.html":{}}}],["mealsmodule",{"_index":68,"title":{"modules/MealsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MealsModule.html":{},"modules.html":{},"overview.html":{}}}],["mealsservice",{"_index":80,"title":{"injectables/MealsService.html":{}},"body":{"modules/AppModule.html":{},"controllers/MealsController.html":{},"modules/MealsModule.html":{},"injectables/MealsService.html":{},"coverage.html":{},"overview.html":{}}}],["merchantability",{"_index":1744,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1720,"title":{},"body":{"license.html":{}}}],["message",{"_index":659,"title":{},"body":{"injectables/ChatService.html":{}}}],["messages",{"_index":994,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/MessagesService.html":{}}}],["messages.controller",{"_index":1010,"title":{},"body":{"modules/MessagesModule.html":{}}}],["messages.service",{"_index":1001,"title":{},"body":{"controllers/MessagesController.html":{},"modules/MessagesModule.html":{}}}],["messages/messages.module",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["messagescontroller",{"_index":992,"title":{"controllers/MessagesController.html":{}},"body":{"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"coverage.html":{}}}],["messagesmodule",{"_index":69,"title":{"modules/MessagesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MessagesModule.html":{},"modules.html":{},"overview.html":{}}}],["messagesservice",{"_index":1000,"title":{"injectables/MessagesService.html":{}},"body":{"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"coverage.html":{},"overview.html":{}}}],["messagesuserservice",{"_index":1003,"title":{},"body":{"controllers/MessagesController.html":{}}}],["metadata",{"_index":1669,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":1067,"title":{},"body":{"injectables/OpenffService.html":{}}}],["methods",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BetaUsersController.html":{},"injectables/BetaUsersService.html":{},"controllers/BugsBetaController.html":{},"injectables/BugsBetaService.html":{},"controllers/CaloriesController.html":{},"injectables/CaloriesService.html":{},"controllers/ChatController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/ExercisesLibraryController.html":{},"injectables/ExercisesLibraryService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"controllers/FormController.html":{},"injectables/FormService.html":{},"injectables/JwtStrategy.html":{},"controllers/MealsController.html":{},"injectables/MealsService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"controllers/OpenffController.html":{},"injectables/OpenffService.html":{},"controllers/PlanningController.html":{},"injectables/PlanningService.html":{},"controllers/PreferencesController.html":{},"injectables/PreferencesService.html":{},"injectables/PrismaService.html":{},"controllers/ReportsController.html":{},"injectables/ReportsService.html":{},"classes/Rooms.html":{},"controllers/SportsExerciseController.html":{},"injectables/SportsExerciseService.html":{},"controllers/StepsController.html":{},"injectables/StepsService.html":{},"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{}}}],["migrate",{"_index":1695,"title":{},"body":{"index.html":{}}}],["mimetype",{"_index":1584,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["miscellaneous",{"_index":1676,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":1096,"title":{},"body":{"injectables/OpenffService.html":{}}}],["mit",{"_index":1698,"title":{},"body":{"license.html":{}}}],["mobile",{"_index":1100,"title":{},"body":{"injectables/OpenffService.html":{}}}],["modify",{"_index":529,"title":{},"body":{"injectables/BugsBetaService.html":{},"injectables/MealsService.html":{},"license.html":{}}}],["modifybugsbeta",{"_index":446,"title":{},"body":{"controllers/BugsBetaController.html":{}}}],["modifybugsbeta(@param('id",{"_index":476,"title":{},"body":{"controllers/BugsBetaController.html":{}}}],["modifybugsbeta(id",{"_index":458,"title":{},"body":{"controllers/BugsBetaController.html":{}}}],["modifying",{"_index":1693,"title":{},"body":{"index.html":{}}}],["modifymeal",{"_index":911,"title":{},"body":{"controllers/MealsController.html":{}}}],["modifymeal(@param('id",{"_index":943,"title":{},"body":{"controllers/MealsController.html":{}}}],["modifymeal(id",{"_index":923,"title":{},"body":{"controllers/MealsController.html":{}}}],["module",{"_index":23,"title":{"modules/AlgoMatchingModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BetaUsersModule.html":{},"modules/BugsBetaModule.html":{},"modules/CaloriesModule.html":{},"modules/ChatModule.html":{},"modules/ExercisesLibraryModule.html":{},"modules/FileModule.html":{},"modules/FormModule.html":{},"modules/MealsModule.html":{},"modules/MessagesModule.html":{},"modules/OpenffModule.html":{},"modules/PlanningModule.html":{},"modules/PreferencesModule.html":{},"modules/PrismaModule.html":{},"modules/ReportsModule.html":{},"modules/SportsExerciseModule.html":{},"modules/StepsModule.html":{},"modules/UserInfosModule.html":{}},"body":{"modules/AlgoMatchingModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BetaUsersModule.html":{},"modules/BugsBetaModule.html":{},"modules/CaloriesModule.html":{},"modules/ChatModule.html":{},"modules/ExercisesLibraryModule.html":{},"modules/FileModule.html":{},"modules/FormModule.html":{},"modules/MealsModule.html":{},"modules/MessagesModule.html":{},"modules/OpenffModule.html":{},"modules/PlanningModule.html":{},"modules/PreferencesModule.html":{},"modules/PrismaModule.html":{},"modules/ReportsModule.html":{},"modules/SportsExerciseModule.html":{},"modules/StepsModule.html":{},"modules/UserInfosModule.html":{},"overview.html":{}}}],["modules",{"_index":25,"title":{"modules.html":{}},"body":{"modules/AlgoMatchingModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BetaUsersModule.html":{},"modules/BugsBetaModule.html":{},"modules/CaloriesModule.html":{},"modules/ChatModule.html":{},"modules/ExercisesLibraryModule.html":{},"modules/FileModule.html":{},"modules/FormModule.html":{},"modules/MealsModule.html":{},"modules/MessagesModule.html":{},"modules/OpenffModule.html":{},"modules/PlanningModule.html":{},"modules/PreferencesModule.html":{},"modules/PrismaModule.html":{},"modules/ReportsModule.html":{},"modules/SportsExerciseModule.html":{},"modules/StepsModule.html":{},"modules/UserInfosModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":1147,"title":{},"body":{"controllers/PlanningController.html":{},"injectables/PlanningService.html":{}}}],["multer",{"_index":1664,"title":{},"body":{"dependencies.html":{}}}],["muscle_group",{"_index":765,"title":{},"body":{"injectables/ExercisesLibraryService.html":{}}}],["musclegroup",{"_index":685,"title":{},"body":{"classes/CreateExercisesLibraryDto.html":{},"injectables/ExercisesLibraryService.html":{}}}],["name",{"_index":132,"title":{},"body":{"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BetaUsersController.html":{},"injectables/BetaUsersService.html":{},"controllers/BugsBetaController.html":{},"injectables/BugsBetaService.html":{},"controllers/CaloriesController.html":{},"injectables/CaloriesService.html":{},"controllers/ChatController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CreateExercisesLibraryDto.html":{},"controllers/ExercisesLibraryController.html":{},"injectables/ExercisesLibraryService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"controllers/FormController.html":{},"injectables/FormService.html":{},"injectables/JwtStrategy.html":{},"controllers/MealsController.html":{},"classes/MealsDto.html":{},"injectables/MealsService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"controllers/OpenffController.html":{},"injectables/OpenffService.html":{},"controllers/PlanningController.html":{},"injectables/PlanningService.html":{},"controllers/PreferencesController.html":{},"injectables/PreferencesService.html":{},"injectables/PrismaService.html":{},"controllers/ReportsController.html":{},"injectables/ReportsService.html":{},"classes/Rooms.html":{},"controllers/SportsExerciseController.html":{},"classes/SportsExerciseDto.html":{},"injectables/SportsExerciseService.html":{},"controllers/StepsController.html":{},"injectables/StepsService.html":{},"classes/UpdateMealsDto.html":{},"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{},"classes/UserNotFoundException.html":{},"classes/UserNotFoundException-1.html":{},"classes/UserNotFoundException-2.html":{},"classes/UserWithoutSidekickException.html":{}}}],["need",{"_index":528,"title":{},"body":{"injectables/BugsBetaService.html":{},"injectables/MealsService.html":{}}}],["nestjs/common",{"_index":14,"title":{},"body":{"controllers/AlgoMatchingController.html":{},"modules/AlgoMatchingModule.html":{},"injectables/AlgoMatchingService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AuthConfig.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/BetaUsersController.html":{},"modules/BetaUsersModule.html":{},"injectables/BetaUsersService.html":{},"controllers/BugsBetaController.html":{},"modules/BugsBetaModule.html":{},"injectables/BugsBetaService.html":{},"controllers/CaloriesController.html":{},"modules/CaloriesModule.html":{},"injectables/CaloriesService.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"controllers/ExercisesLibraryController.html":{},"modules/ExercisesLibraryModule.html":{},"injectables/ExercisesLibraryService.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"controllers/FormController.html":{},"modules/FormModule.html":{},"injectables/FormService.html":{},"injectables/JwtStrategy.html":{},"controllers/MealsController.html":{},"modules/MealsModule.html":{},"injectables/MealsService.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OpenffController.html":{},"modules/OpenffModule.html":{},"injectables/OpenffService.html":{},"controllers/PlanningController.html":{},"modules/PlanningModule.html":{},"injectables/PlanningService.html":{},"controllers/PreferencesController.html":{},"modules/PreferencesModule.html":{},"injectables/PreferencesService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ReportsController.html":{},"modules/ReportsModule.html":{},"injectables/ReportsService.html":{},"controllers/SportsExerciseController.html":{},"modules/SportsExerciseModule.html":{},"injectables/SportsExerciseService.html":{},"controllers/StepsController.html":{},"modules/StepsModule.html":{},"injectables/StepsService.html":{},"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{},"modules/UserInfosModule.html":{},"classes/UserNotFoundException.html":{},"classes/UserNotFoundException-1.html":{},"classes/UserNotFoundException-2.html":{},"classes/UserWithoutSidekickException.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":1651,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":1413,"title":{},"body":{"classes/UpdateExercisesLibraryDto.html":{},"classes/UpdateOpenffDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":140,"title":{},"body":{"injectables/AtGuard.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":781,"title":{},"body":{"controllers/FileController.html":{},"controllers/UserInfosController.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":598,"title":{},"body":{"classes/ChatGateway.html":{},"dependencies.html":{}}}],["new",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BetaUsersService.html":{},"injectables/BugsBetaService.html":{},"injectables/CaloriesService.html":{},"injectables/ChatService.html":{},"injectables/FileService.html":{},"injectables/FormService.html":{},"injectables/MealsService.html":{},"injectables/PlanningService.html":{},"injectables/ReportsService.html":{},"injectables/SportsExerciseService.html":{},"injectables/StepsService.html":{},"injectables/UserInfoService.html":{},"coverage.html":{}}}],["newdatas",{"_index":520,"title":{},"body":{"injectables/BugsBetaService.html":{},"injectables/MealsService.html":{},"injectables/UserInfoService.html":{}}}],["newdatas.username",{"_index":1502,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["newdatas[\"birth_date",{"_index":1495,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["newdatas[\"gender",{"_index":1493,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["newdatas[\"size",{"_index":1489,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["newdatas[\"sport_frequence",{"_index":1497,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["newdatas[\"userid",{"_index":1499,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["newdatas[\"weight",{"_index":1491,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["newdatas['date",{"_index":984,"title":{},"body":{"injectables/MealsService.html":{}}}],["newdatas['page",{"_index":524,"title":{},"body":{"injectables/BugsBetaService.html":{}}}],["newdatas['userid",{"_index":523,"title":{},"body":{"injectables/BugsBetaService.html":{},"injectables/MealsService.html":{}}}],["newpasswordrequired",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.authenticateuser(authenticationdetails",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.completenewpasswordchallenge",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{}}}],["noninfringement",{"_index":1748,"title":{},"body":{"license.html":{}}}],["notfoundexception",{"_index":434,"title":{},"body":{"injectables/BetaUsersService.html":{},"injectables/ReportsService.html":{},"injectables/SportsExerciseService.html":{},"classes/UserNotFoundException.html":{},"classes/UserNotFoundException-1.html":{},"classes/UserNotFoundException-2.html":{},"classes/UserWithoutSidekickException.html":{}}}],["notfoundexception(\"user",{"_index":1270,"title":{},"body":{"injectables/ReportsService.html":{}}}],["notfoundexception('beta",{"_index":439,"title":{},"body":{"injectables/BetaUsersService.html":{}}}],["notfoundexception('no",{"_index":1374,"title":{},"body":{"injectables/SportsExerciseService.html":{}}}],["notice",{"_index":1734,"title":{},"body":{"license.html":{}}}],["notifications",{"_index":1430,"title":{},"body":{"classes/UpdatePreferenceDto.html":{}}}],["npm",{"_index":1689,"title":{},"body":{"index.html":{}}}],["npx",{"_index":1686,"title":{},"body":{"index.html":{}}}],["null",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChatService.html":{},"injectables/FileService.html":{},"injectables/ReportsService.html":{},"injectables/UserInfoService.html":{}}}],["number",{"_index":417,"title":{},"body":{"classes/BetaUsersDto.html":{},"classes/BugsBetaDto.html":{},"classes/EditInfosDto.html":{},"injectables/ExercisesLibraryService.html":{},"classes/FormDto.html":{},"classes/MealsDto.html":{},"controllers/PlanningController.html":{},"injectables/PlanningService.html":{},"classes/SportsExerciseDto.html":{},"classes/UpdateBugsBetaDto.html":{},"classes/UpdateMealsDto.html":{},"classes/UserInfosDto.html":{}}}],["number(datas[\"size",{"_index":1490,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["number(datas[\"weight",{"_index":1492,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["number(dto.size",{"_index":1505,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["number(dto.weight",{"_index":1507,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["number(id",{"_index":516,"title":{},"body":{"injectables/BugsBetaService.html":{},"injectables/MealsService.html":{},"injectables/PlanningService.html":{},"injectables/SportsExerciseService.html":{}}}],["nutriments",{"_index":1080,"title":{},"body":{"injectables/OpenffService.html":{}}}],["nutrition_grades",{"_index":1105,"title":{},"body":{"injectables/OpenffService.html":{}}}],["obtaining",{"_index":1708,"title":{},"body":{"license.html":{}}}],["onfailure",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["onfailure(err",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{}}}],["onmoduledestroy",{"_index":1227,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":1228,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onsuccess",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["onsuccess(res",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{}}}],["openff",{"_index":1048,"title":{},"body":{"controllers/OpenffController.html":{}}}],["openff.controller",{"_index":1061,"title":{},"body":{"modules/OpenffModule.html":{}}}],["openff.dto",{"_index":1425,"title":{},"body":{"classes/UpdateOpenffDto.html":{}}}],["openff.dto.ts",{"_index":696,"title":{},"body":{"classes/CreateOpenffDto.html":{},"classes/UpdateOpenffDto.html":{},"coverage.html":{}}}],["openff.service",{"_index":1053,"title":{},"body":{"controllers/OpenffController.html":{},"modules/OpenffModule.html":{}}}],["openff/openff.module",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["openffcontroller",{"_index":1046,"title":{"controllers/OpenffController.html":{}},"body":{"controllers/OpenffController.html":{},"modules/OpenffModule.html":{},"coverage.html":{}}}],["openffmodule",{"_index":70,"title":{"modules/OpenffModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OpenffModule.html":{},"modules.html":{},"overview.html":{}}}],["openffservice",{"_index":1052,"title":{"injectables/OpenffService.html":{}},"body":{"controllers/OpenffController.html":{},"modules/OpenffModule.html":{},"injectables/OpenffService.html":{},"coverage.html":{},"overview.html":{}}}],["optional",{"_index":134,"title":{},"body":{"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BetaUsersController.html":{},"injectables/BetaUsersService.html":{},"controllers/BugsBetaController.html":{},"injectables/BugsBetaService.html":{},"controllers/CaloriesController.html":{},"injectables/CaloriesService.html":{},"controllers/ChatController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/EditInfosDto.html":{},"controllers/ExercisesLibraryController.html":{},"injectables/ExercisesLibraryService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"controllers/FormController.html":{},"injectables/FormService.html":{},"injectables/JwtStrategy.html":{},"controllers/MealsController.html":{},"injectables/MealsService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"controllers/OpenffController.html":{},"injectables/OpenffService.html":{},"controllers/PlanningController.html":{},"injectables/PlanningService.html":{},"controllers/PreferencesController.html":{},"injectables/PreferencesService.html":{},"injectables/PrismaService.html":{},"controllers/ReportsController.html":{},"injectables/ReportsService.html":{},"classes/Rooms.html":{},"controllers/SportsExerciseController.html":{},"injectables/SportsExerciseService.html":{},"controllers/StepsController.html":{},"injectables/StepsService.html":{},"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{},"classes/UserNotFoundException.html":{},"classes/UserNotFoundException-1.html":{},"classes/UserNotFoundException-2.html":{},"classes/UserWithoutSidekickException.html":{}}}],["origin",{"_index":602,"title":{},"body":{"classes/ChatGateway.html":{}}}],["otherwise",{"_index":1759,"title":{},"body":{"license.html":{}}}],["out",{"_index":36,"title":{},"body":{"modules/AlgoMatchingModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BetaUsersModule.html":{},"modules/CaloriesModule.html":{},"modules/ChatModule.html":{},"modules/ExercisesLibraryModule.html":{},"modules/FileModule.html":{},"modules/FormModule.html":{},"modules/MealsModule.html":{},"modules/MessagesModule.html":{},"modules/OpenffModule.html":{},"modules/PlanningModule.html":{},"modules/PreferencesModule.html":{},"modules/PrismaModule.html":{},"modules/ReportsModule.html":{},"modules/SportsExerciseModule.html":{},"modules/StepsModule.html":{},"modules/UserInfosModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":1769,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p2002",{"_index":872,"title":{},"body":{"injectables/FormService.html":{}}}],["package",{"_index":1647,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":420,"title":{},"body":{"classes/BetaUsersDto.html":{},"controllers/BugsBetaController.html":{},"classes/BugsBetaDto.html":{},"injectables/BugsBetaService.html":{},"injectables/OpenffService.html":{},"classes/UpdateBugsBetaDto.html":{}}}],["page[bugbeta.page",{"_index":525,"title":{},"body":{"injectables/BugsBetaService.html":{}}}],["page[page",{"_index":518,"title":{},"body":{"injectables/BugsBetaService.html":{}}}],["param",{"_index":465,"title":{},"body":{"controllers/BugsBetaController.html":{},"controllers/ChatController.html":{},"controllers/ExercisesLibraryController.html":{},"controllers/MealsController.html":{},"controllers/OpenffController.html":{},"controllers/PlanningController.html":{},"controllers/SportsExerciseController.html":{}}}],["parameters",{"_index":131,"title":{},"body":{"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BetaUsersController.html":{},"injectables/BetaUsersService.html":{},"controllers/BugsBetaController.html":{},"injectables/BugsBetaService.html":{},"controllers/CaloriesController.html":{},"injectables/CaloriesService.html":{},"controllers/ChatController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/ExercisesLibraryController.html":{},"injectables/ExercisesLibraryService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"controllers/FormController.html":{},"injectables/FormService.html":{},"injectables/JwtStrategy.html":{},"controllers/MealsController.html":{},"injectables/MealsService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"controllers/OpenffController.html":{},"injectables/OpenffService.html":{},"controllers/PlanningController.html":{},"injectables/PlanningService.html":{},"controllers/PreferencesController.html":{},"injectables/PreferencesService.html":{},"injectables/PrismaService.html":{},"controllers/ReportsController.html":{},"injectables/ReportsService.html":{},"classes/Rooms.html":{},"controllers/SportsExerciseController.html":{},"injectables/SportsExerciseService.html":{},"controllers/StepsController.html":{},"injectables/StepsService.html":{},"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{},"classes/UserNotFoundException.html":{},"classes/UserNotFoundException-1.html":{},"classes/UserNotFoundException-2.html":{},"classes/UserWithoutSidekickException.html":{}}}],["parsefilepipe",{"_index":777,"title":{},"body":{"controllers/FileController.html":{},"controllers/UserInfosController.html":{}}}],["partialtype",{"_index":1412,"title":{},"body":{"classes/UpdateExercisesLibraryDto.html":{},"classes/UpdateOpenffDto.html":{}}}],["partialtype(createexerciseslibrarydto",{"_index":1415,"title":{},"body":{"classes/UpdateExercisesLibraryDto.html":{}}}],["partialtype(createopenffdto",{"_index":1426,"title":{},"body":{"classes/UpdateOpenffDto.html":{}}}],["particular",{"_index":1746,"title":{},"body":{"license.html":{}}}],["pas",{"_index":1030,"title":{},"body":{"injectables/MessagesService.html":{}}}],["passport",{"_index":883,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportjwtsecret",{"_index":885,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportmodule",{"_index":275,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":279,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":884,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":888,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":265,"title":{},"body":{"classes/AuthDto.html":{},"injectables/AuthService.html":{}}}],["patch",{"_index":734,"title":{},"body":{"controllers/ExercisesLibraryController.html":{}}}],["patch(':id",{"_index":732,"title":{},"body":{"controllers/ExercisesLibraryController.html":{}}}],["path",{"_index":1553,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["pattern",{"_index":929,"title":{},"body":{"controllers/MealsController.html":{},"injectables/MealsService.html":{},"controllers/SportsExerciseController.html":{},"injectables/SportsExerciseService.html":{}}}],["payload",{"_index":586,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":906,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":905,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["period",{"_index":954,"title":{},"body":{"classes/MealsDto.html":{},"classes/UpdateMealsDto.html":{}}}],["permission",{"_index":1702,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1727,"title":{},"body":{"license.html":{}}}],["person",{"_index":1707,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1728,"title":{},"body":{"license.html":{}}}],["photo.jpg?s=612x612&w=0&k=20&c=pm_optehhbtzkujqllcjlz",{"_index":1102,"title":{},"body":{"injectables/OpenffService.html":{}}}],["picture",{"_index":1097,"title":{},"body":{"injectables/OpenffService.html":{}}}],["plaisir",{"_index":1041,"title":{},"body":{"injectables/MessagesService.html":{}}}],["planning",{"_index":1110,"title":{},"body":{"controllers/PlanningController.html":{}}}],["planning.controller",{"_index":1161,"title":{},"body":{"modules/PlanningModule.html":{}}}],["planning.service",{"_index":1138,"title":{},"body":{"controllers/PlanningController.html":{},"modules/PlanningModule.html":{}}}],["planning/planning.module",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["planningcontroller",{"_index":1108,"title":{"controllers/PlanningController.html":{}},"body":{"controllers/PlanningController.html":{},"modules/PlanningModule.html":{},"coverage.html":{}}}],["planningmodule",{"_index":71,"title":{"modules/PlanningModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PlanningModule.html":{},"modules.html":{},"overview.html":{}}}],["planningservice",{"_index":1137,"title":{"injectables/PlanningService.html":{}},"body":{"controllers/PlanningController.html":{},"modules/PlanningModule.html":{},"injectables/PlanningService.html":{},"coverage.html":{},"overview.html":{}}}],["pool",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{}}}],["poolurl",{"_index":157,"title":{},"body":{"injectables/AuthConfig.html":{}}}],["portions",{"_index":1738,"title":{},"body":{"license.html":{}}}],["post",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BetaUsersController.html":{},"controllers/BugsBetaController.html":{},"controllers/ExercisesLibraryController.html":{},"controllers/FileController.html":{},"controllers/FormController.html":{},"controllers/MealsController.html":{},"controllers/PlanningController.html":{},"controllers/PreferencesController.html":{},"controllers/ReportsController.html":{},"controllers/SportsExerciseController.html":{},"controllers/UserInfosController.html":{}}}],["post(\"/goal",{"_index":1568,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["post(\"/sports",{"_index":1564,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["post(\"add",{"_index":1344,"title":{},"body":{"controllers/SportsExerciseController.html":{}}}],["post(\"change",{"_index":1254,"title":{},"body":{"controllers/ReportsController.html":{}}}],["post(\"delete",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"find",{"_index":947,"title":{},"body":{"controllers/MealsController.html":{}}}],["post(\"forgotpassword",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"link_users",{"_index":1593,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["post(\"login",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"logout",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"refresh",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"register",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"resetpassword",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"search",{"_index":1351,"title":{},"body":{"controllers/SportsExerciseController.html":{}}}],["post('/avatar",{"_index":1572,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["post('/avatar')@useinterceptors(undefined",{"_index":1541,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["post('/exercise",{"_index":1128,"title":{},"body":{"controllers/PlanningController.html":{}}}],["post('/goal",{"_index":1543,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["post('/meal",{"_index":1125,"title":{},"body":{"controllers/PlanningController.html":{}}}],["post('/sports",{"_index":1545,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["post('add",{"_index":1322,"title":{},"body":{"controllers/SportsExerciseController.html":{}}}],["post('change",{"_index":1243,"title":{},"body":{"controllers/ReportsController.html":{}}}],["post('find",{"_index":930,"title":{},"body":{"controllers/MealsController.html":{}}}],["post('save",{"_index":833,"title":{},"body":{"controllers/FormController.html":{}}}],["post('search",{"_index":1331,"title":{},"body":{"controllers/SportsExerciseController.html":{}}}],["post('upload",{"_index":787,"title":{},"body":{"controllers/FileController.html":{}}}],["postemail",{"_index":1618,"title":{},"body":{"classes/UserNotFoundException.html":{},"classes/UserNotFoundException-1.html":{}}}],["postid",{"_index":1622,"title":{},"body":{"classes/UserNotFoundException-2.html":{},"classes/UserWithoutSidekickException.html":{}}}],["preference.dto",{"_index":1199,"title":{},"body":{"controllers/PreferencesController.html":{},"injectables/PreferencesService.html":{}}}],["preference.dto.ts",{"_index":1428,"title":{},"body":{"classes/UpdatePreferenceDto.html":{},"coverage.html":{}}}],["preference.dto.ts:10",{"_index":1435,"title":{},"body":{"classes/UpdatePreferenceDto.html":{}}}],["preference.dto.ts:14",{"_index":1434,"title":{},"body":{"classes/UpdatePreferenceDto.html":{}}}],["preference.dto.ts:6",{"_index":1433,"title":{},"body":{"classes/UpdatePreferenceDto.html":{}}}],["preferences",{"_index":1193,"title":{},"body":{"controllers/PreferencesController.html":{},"injectables/PreferencesService.html":{}}}],["preferences.controller",{"_index":1210,"title":{},"body":{"modules/PreferencesModule.html":{}}}],["preferences.service",{"_index":1201,"title":{},"body":{"controllers/PreferencesController.html":{},"modules/PreferencesModule.html":{}}}],["preferences/preferences.module",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["preferencescontroller",{"_index":1191,"title":{"controllers/PreferencesController.html":{}},"body":{"controllers/PreferencesController.html":{},"modules/PreferencesModule.html":{},"coverage.html":{}}}],["preferencesmodule",{"_index":72,"title":{"modules/PreferencesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PreferencesModule.html":{},"modules.html":{},"overview.html":{}}}],["preferencesservice",{"_index":1200,"title":{"injectables/PreferencesService.html":{}},"body":{"controllers/PreferencesController.html":{},"modules/PreferencesModule.html":{},"injectables/PreferencesService.html":{},"coverage.html":{},"overview.html":{}}}],["prefix",{"_index":9,"title":{},"body":{"controllers/AlgoMatchingController.html":{},"controllers/AuthController.html":{},"controllers/BetaUsersController.html":{},"controllers/BugsBetaController.html":{},"controllers/ChatController.html":{},"controllers/ExercisesLibraryController.html":{},"controllers/FileController.html":{},"controllers/FormController.html":{},"controllers/MealsController.html":{},"controllers/MessagesController.html":{},"controllers/OpenffController.html":{},"controllers/PlanningController.html":{},"controllers/PreferencesController.html":{},"controllers/ReportsController.html":{},"controllers/SportsExerciseController.html":{},"controllers/UserInfosController.html":{}}}],["prisma",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExercisesLibraryService.html":{},"injectables/FormService.html":{},"injectables/MessagesService.html":{},"injectables/ReportsService.html":{},"index.html":{}}}],["prisma.service",{"_index":1224,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/client",{"_index":421,"title":{},"body":{"classes/BetaUsersDto.html":{},"classes/BugsBetaDto.html":{},"injectables/BugsBetaService.html":{},"classes/CreateExercisesLibraryDto.html":{},"classes/EditInfosDto.html":{},"classes/FormDto.html":{},"injectables/PlanningService.html":{},"injectables/PrismaService.html":{},"classes/UpdateBugsBetaDto.html":{},"injectables/UserInfoService.html":{},"classes/UserInfosDto.html":{},"dependencies.html":{}}}],["prisma/client/runtime/library",{"_index":865,"title":{},"body":{"injectables/FormService.html":{}}}],["prisma/prisma.module",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"modules/FormModule.html":{}}}],["prisma/prisma.service",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BetaUsersService.html":{},"injectables/BugsBetaService.html":{},"injectables/CaloriesService.html":{},"injectables/ChatService.html":{},"injectables/FormService.html":{},"injectables/MealsService.html":{},"injectables/MessagesService.html":{},"injectables/OpenffService.html":{},"injectables/PlanningService.html":{},"injectables/PreferencesService.html":{},"injectables/ReportsService.html":{},"injectables/SportsExerciseService.html":{},"modules/StepsModule.html":{},"injectables/StepsService.html":{},"injectables/UserInfoService.html":{}}}],["prismaclient",{"_index":1226,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaclientknownrequesterror",{"_index":864,"title":{},"body":{"injectables/FormService.html":{}}}],["prismamodule",{"_index":73,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FormModule.html":{},"modules/PrismaModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":288,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/BetaUsersService.html":{},"injectables/BugsBetaService.html":{},"injectables/CaloriesService.html":{},"injectables/ChatService.html":{},"injectables/ExercisesLibraryService.html":{},"injectables/FormService.html":{},"injectables/MealsService.html":{},"injectables/MessagesService.html":{},"injectables/OpenffService.html":{},"injectables/PlanningService.html":{},"injectables/PreferencesService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/ReportsService.html":{},"injectables/SportsExerciseService.html":{},"modules/StepsModule.html":{},"injectables/StepsService.html":{},"injectables/UserInfoService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BetaUsersService.html":{},"injectables/BugsBetaService.html":{},"injectables/ChatService.html":{},"injectables/FileService.html":{},"injectables/JwtStrategy.html":{},"injectables/PlanningService.html":{},"classes/Rooms.html":{},"injectables/UserInfoService.html":{}}}],["process",{"_index":867,"title":{},"body":{"injectables/FormService.html":{},"injectables/MessagesService.html":{}}}],["process.env.cognito_client_id",{"_index":165,"title":{},"body":{"injectables/AuthConfig.html":{}}}],["process.env.cognito_pool_url",{"_index":167,"title":{},"body":{"injectables/AuthConfig.html":{}}}],["process.env.cognito_region",{"_index":169,"title":{},"body":{"injectables/AuthConfig.html":{}}}],["process.env.cognito_user_pool_id",{"_index":171,"title":{},"body":{"injectables/AuthConfig.html":{}}}],["product.brands",{"_index":1078,"title":{},"body":{"injectables/OpenffService.html":{}}}],["product.carbohydrates_100g",{"_index":1087,"title":{},"body":{"injectables/OpenffService.html":{}}}],["product.energy_kcal_100g",{"_index":1082,"title":{},"body":{"injectables/OpenffService.html":{}}}],["product.fat_100g",{"_index":1089,"title":{},"body":{"injectables/OpenffService.html":{}}}],["product.image_front_url",{"_index":1091,"title":{},"body":{"injectables/OpenffService.html":{}}}],["product.nutriscore",{"_index":1106,"title":{},"body":{"injectables/OpenffService.html":{}}}],["product.product_name",{"_index":1075,"title":{},"body":{"injectables/OpenffService.html":{}}}],["product.proteins_100g",{"_index":1084,"title":{},"body":{"injectables/OpenffService.html":{}}}],["product_name",{"_index":1074,"title":{},"body":{"injectables/OpenffService.html":{}}}],["products",{"_index":1071,"title":{},"body":{"injectables/OpenffService.html":{}}}],["products.map((product",{"_index":1073,"title":{},"body":{"injectables/OpenffService.html":{}}}],["promise",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["promise((resolve",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["promise.all",{"_index":1273,"title":{},"body":{"injectables/ReportsService.html":{},"injectables/UserInfoService.html":{}}}],["properties",{"_index":153,"title":{"properties.html":{}},"body":{"injectables/AuthConfig.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/BetaUsersDto.html":{},"classes/BugsBetaDto.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CreateExercisesLibraryDto.html":{},"classes/EditInfosDto.html":{},"injectables/FileService.html":{},"classes/FormDto.html":{},"classes/MealsDto.html":{},"classes/Rooms.html":{},"classes/SportsExerciseDto.html":{},"classes/UpdateBugsBetaDto.html":{},"classes/UpdateExercisesLibraryDto.html":{},"classes/UpdateMealsDto.html":{},"classes/UpdatePreferenceDto.html":{},"classes/UserInfosDto.html":{},"properties.html":{}}}],["proteins_100g",{"_index":1083,"title":{},"body":{"injectables/OpenffService.html":{}}}],["provide",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["provided",{"_index":1277,"title":{},"body":{"injectables/ReportsService.html":{},"license.html":{}}}],["providers",{"_index":30,"title":{},"body":{"modules/AlgoMatchingModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BetaUsersModule.html":{},"modules/CaloriesModule.html":{},"modules/ChatModule.html":{},"modules/ExercisesLibraryModule.html":{},"modules/FileModule.html":{},"modules/FormModule.html":{},"modules/MealsModule.html":{},"modules/MessagesModule.html":{},"modules/OpenffModule.html":{},"modules/PlanningModule.html":{},"modules/PreferencesModule.html":{},"modules/PrismaModule.html":{},"modules/ReportsModule.html":{},"modules/SportsExerciseModule.html":{},"modules/StepsModule.html":{},"modules/UserInfosModule.html":{},"overview.html":{}}}],["public",{"_index":154,"title":{},"body":{"injectables/AuthConfig.html":{},"controllers/AuthController.html":{},"injectables/CaloriesService.html":{},"controllers/ExercisesLibraryController.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"injectables/FormService.html":{},"injectables/JwtStrategy.html":{},"injectables/MealsService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"controllers/OpenffController.html":{},"injectables/SportsExerciseService.html":{},"injectables/StepsService.html":{},"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@get(':request",{"_index":1050,"title":{},"body":{"controllers/OpenffController.html":{}}}],["public()@get('find_users_without_sidekick",{"_index":1537,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["public()@get('getmessages",{"_index":998,"title":{},"body":{"controllers/MessagesController.html":{}}}],["public()@get('public",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post",{"_index":721,"title":{},"body":{"controllers/ExercisesLibraryController.html":{}}}],["public()@post('delete",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('forgotpassword",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('link_users",{"_index":1539,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["public()@post('login",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('logout",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('refresh",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('register",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('resetpassword",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('upload')@useinterceptors(undefined",{"_index":775,"title":{},"body":{"controllers/FileController.html":{}}}],["publish",{"_index":1721,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":1747,"title":{},"body":{"license.html":{}}}],["put",{"_index":466,"title":{},"body":{"controllers/BugsBetaController.html":{},"controllers/MealsController.html":{},"controllers/PlanningController.html":{},"controllers/SportsExerciseController.html":{},"controllers/UserInfosController.html":{}}}],["put(\"/:id",{"_index":475,"title":{},"body":{"controllers/BugsBetaController.html":{},"controllers/MealsController.html":{}}}],["put(\"/update",{"_index":1561,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["put(\"update/:id",{"_index":1347,"title":{},"body":{"controllers/SportsExerciseController.html":{}}}],["put('/:id",{"_index":460,"title":{},"body":{"controllers/BugsBetaController.html":{},"controllers/MealsController.html":{}}}],["put('/exercise/:id",{"_index":1134,"title":{},"body":{"controllers/PlanningController.html":{}}}],["put('/meal/:id",{"_index":1131,"title":{},"body":{"controllers/PlanningController.html":{}}}],["put('/update",{"_index":1548,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["put('update/:id",{"_index":1333,"title":{},"body":{"controllers/SportsExerciseController.html":{}}}],["que",{"_index":1036,"title":{},"body":{"injectables/MessagesService.html":{}}}],["quelle",{"_index":1044,"title":{},"body":{"injectables/MessagesService.html":{}}}],["query",{"_index":467,"title":{},"body":{"controllers/BugsBetaController.html":{},"controllers/CaloriesController.html":{},"controllers/MealsController.html":{},"controllers/MessagesController.html":{},"controllers/PlanningController.html":{},"controllers/StepsController.html":{},"controllers/UserInfosController.html":{}}}],["query('day",{"_index":939,"title":{},"body":{"controllers/MealsController.html":{},"controllers/PlanningController.html":{}}}],["ratelimit",{"_index":891,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["read",{"_index":824,"title":{},"body":{"injectables/FileService.html":{}}}],["readonly",{"_index":21,"title":{},"body":{"controllers/AlgoMatchingController.html":{},"controllers/AppController.html":{},"controllers/ExercisesLibraryController.html":{},"controllers/FileController.html":{},"injectables/JwtStrategy.html":{},"controllers/OpenffController.html":{},"controllers/PreferencesController.html":{},"controllers/ReportsController.html":{}}}],["reason",{"_index":1247,"title":{},"body":{"controllers/ReportsController.html":{},"injectables/ReportsService.html":{}}}],["received",{"_index":669,"title":{},"body":{"injectables/ChatService.html":{}}}],["receverid",{"_index":1018,"title":{},"body":{"injectables/MessagesService.html":{}}}],["reflect",{"_index":1668,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":129,"title":{},"body":{"injectables/AtGuard.html":{}}}],["refresh",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refresh(@body(\"rt",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh(rt",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refresh_token",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtoken",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{}}}],["region",{"_index":158,"title":{},"body":{"injectables/AuthConfig.html":{},"injectables/FileService.html":{}}}],["register",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(dto",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["reject",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["reject(e",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{}}}],["reject(err",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{}}}],["reject(new",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{}}}],["remove",{"_index":719,"title":{},"body":{"controllers/ExercisesLibraryController.html":{},"injectables/ExercisesLibraryService.html":{},"controllers/SportsExerciseController.html":{},"injectables/SportsExerciseService.html":{}}}],["remove(@param('id",{"_index":749,"title":{},"body":{"controllers/ExercisesLibraryController.html":{},"controllers/SportsExerciseController.html":{}}}],["remove(id",{"_index":727,"title":{},"body":{"controllers/ExercisesLibraryController.html":{},"injectables/ExercisesLibraryService.html":{},"controllers/SportsExerciseController.html":{},"injectables/SportsExerciseService.html":{}}}],["removebugsbeta",{"_index":447,"title":{},"body":{"controllers/BugsBetaController.html":{}}}],["removebugsbeta(@param('id",{"_index":479,"title":{},"body":{"controllers/BugsBetaController.html":{}}}],["removebugsbeta(id",{"_index":462,"title":{},"body":{"controllers/BugsBetaController.html":{}}}],["removemeal",{"_index":912,"title":{},"body":{"controllers/MealsController.html":{}}}],["removemeal(@param('id",{"_index":945,"title":{},"body":{"controllers/MealsController.html":{}}}],["removemeal(id",{"_index":926,"title":{},"body":{"controllers/MealsController.html":{}}}],["removeroom",{"_index":1285,"title":{},"body":{"classes/Rooms.html":{}}}],["removeroom(roomid",{"_index":1300,"title":{},"body":{"classes/Rooms.html":{}}}],["removeuserfromroom",{"_index":1286,"title":{},"body":{"classes/Rooms.html":{}}}],["removeuserfromroom(roomid",{"_index":1302,"title":{},"body":{"classes/Rooms.html":{}}}],["repetitions",{"_index":1145,"title":{},"body":{"controllers/PlanningController.html":{},"injectables/PlanningService.html":{}}}],["reporter",{"_index":1264,"title":{},"body":{"injectables/ReportsService.html":{}}}],["reporteremail",{"_index":1278,"title":{},"body":{"injectables/ReportsService.html":{}}}],["reports",{"_index":1240,"title":{},"body":{"controllers/ReportsController.html":{}}}],["reports.controller",{"_index":1259,"title":{},"body":{"modules/ReportsModule.html":{}}}],["reports.service",{"_index":1250,"title":{},"body":{"controllers/ReportsController.html":{},"modules/ReportsModule.html":{}}}],["reports/reports.module",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["reportscontroller",{"_index":1238,"title":{"controllers/ReportsController.html":{}},"body":{"controllers/ReportsController.html":{},"modules/ReportsModule.html":{},"coverage.html":{}}}],["reportsmodule",{"_index":74,"title":{"modules/ReportsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ReportsModule.html":{},"modules.html":{},"overview.html":{}}}],["reportsservice",{"_index":1249,"title":{"injectables/ReportsService.html":{}},"body":{"controllers/ReportsController.html":{},"modules/ReportsModule.html":{},"injectables/ReportsService.html":{},"coverage.html":{},"overview.html":{}}}],["req",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BugsBetaController.html":{},"controllers/CaloriesController.html":{},"controllers/MealsController.html":{},"controllers/PlanningController.html":{},"injectables/PlanningService.html":{},"controllers/SportsExerciseController.html":{},"controllers/StepsController.html":{},"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{}}}],["req.exercise_id",{"_index":1181,"title":{},"body":{"injectables/PlanningService.html":{}}}],["req.meal_id",{"_index":1186,"title":{},"body":{"injectables/PlanningService.html":{}}}],["req.moment",{"_index":1182,"title":{},"body":{"injectables/PlanningService.html":{}}}],["req.repetitions",{"_index":1183,"title":{},"body":{"injectables/PlanningService.html":{}}}],["req.user.email",{"_index":474,"title":{},"body":{"controllers/BugsBetaController.html":{},"controllers/MealsController.html":{},"controllers/SportsExerciseController.html":{},"controllers/UserInfosController.html":{}}}],["request",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BetaUsersController.html":{},"controllers/BugsBetaController.html":{},"controllers/CaloriesController.html":{},"controllers/MealsController.html":{},"controllers/OpenffController.html":{},"injectables/OpenffService.html":{},"controllers/SportsExerciseController.html":{},"controllers/StepsController.html":{},"controllers/UserInfosController.html":{},"miscellaneous/variables.html":{}}}],["request?.user?.email",{"_index":1790,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requiredattributes",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["res",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FormService.html":{},"injectables/OpenffService.html":{}}}],["res.getidtoken().getjwttoken",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{}}}],["res.getrefreshtoken().gettoken",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{}}}],["res.then((response",{"_index":1069,"title":{},"body":{"injectables/OpenffService.html":{}}}],["res?.getidtoken()?.getjwttoken",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{}}}],["res?.getrefreshtoken()?.gettoken",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{}}}],["reset",{"_index":35,"title":{},"body":{"modules/AlgoMatchingModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BetaUsersModule.html":{},"modules/CaloriesModule.html":{},"modules/ChatModule.html":{},"modules/ExercisesLibraryModule.html":{},"modules/FileModule.html":{},"modules/FormModule.html":{},"modules/MealsModule.html":{},"modules/MessagesModule.html":{},"modules/OpenffModule.html":{},"modules/PlanningModule.html":{},"modules/PreferencesModule.html":{},"modules/PrismaModule.html":{},"modules/ReportsModule.html":{},"modules/SportsExerciseModule.html":{},"modules/StepsModule.html":{},"modules/UserInfosModule.html":{},"overview.html":{}}}],["resetpassword",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetpassword(@body",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword(dto",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resolve",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["resolve(data",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{}}}],["resolve(res",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{}}}],["resolve(result",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{}}}],["response.json",{"_index":1070,"title":{},"body":{"injectables/OpenffService.html":{}}}],["restriction",{"_index":1715,"title":{},"body":{"license.html":{}}}],["result",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["result.getidtoken().getjwttoken",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["result.getrefreshtoken().gettoken",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["results",{"_index":22,"title":{},"body":{"controllers/AlgoMatchingController.html":{},"modules/AlgoMatchingModule.html":{},"injectables/AlgoMatchingService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AuthConfig.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/BetaUsersController.html":{},"classes/BetaUsersDto.html":{},"modules/BetaUsersModule.html":{},"injectables/BetaUsersService.html":{},"controllers/BugsBetaController.html":{},"classes/BugsBetaDto.html":{},"modules/BugsBetaModule.html":{},"injectables/BugsBetaService.html":{},"controllers/CaloriesController.html":{},"modules/CaloriesModule.html":{},"injectables/CaloriesService.html":{},"controllers/ChatController.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreateExercisesLibraryDto.html":{},"classes/CreateOpenffDto.html":{},"classes/EditInfosDto.html":{},"controllers/ExercisesLibraryController.html":{},"modules/ExercisesLibraryModule.html":{},"injectables/ExercisesLibraryService.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"controllers/FormController.html":{},"classes/FormDto.html":{},"modules/FormModule.html":{},"injectables/FormService.html":{},"injectables/JwtStrategy.html":{},"controllers/MealsController.html":{},"classes/MealsDto.html":{},"modules/MealsModule.html":{},"injectables/MealsService.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OpenffController.html":{},"modules/OpenffModule.html":{},"injectables/OpenffService.html":{},"controllers/PlanningController.html":{},"modules/PlanningModule.html":{},"injectables/PlanningService.html":{},"controllers/PreferencesController.html":{},"modules/PreferencesModule.html":{},"injectables/PreferencesService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ReportsController.html":{},"modules/ReportsModule.html":{},"injectables/ReportsService.html":{},"classes/Rooms.html":{},"controllers/SportsExerciseController.html":{},"classes/SportsExerciseDto.html":{},"modules/SportsExerciseModule.html":{},"injectables/SportsExerciseService.html":{},"controllers/StepsController.html":{},"modules/StepsModule.html":{},"injectables/StepsService.html":{},"classes/UpdateBugsBetaDto.html":{},"classes/UpdateExercisesLibraryDto.html":{},"classes/UpdateMealsDto.html":{},"classes/UpdateOpenffDto.html":{},"classes/UpdatePreferenceDto.html":{},"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{},"classes/UserInfosDto.html":{},"modules/UserInfosModule.html":{},"classes/UserNotFoundException.html":{},"classes/UserNotFoundException-1.html":{},"classes/UserNotFoundException-2.html":{},"classes/UserWithoutSidekickException.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":54,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BetaUsersController.html":{},"injectables/BetaUsersService.html":{},"controllers/BugsBetaController.html":{},"injectables/BugsBetaService.html":{},"controllers/CaloriesController.html":{},"injectables/CaloriesService.html":{},"controllers/ChatController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/ExercisesLibraryController.html":{},"injectables/ExercisesLibraryService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"controllers/FormController.html":{},"injectables/JwtStrategy.html":{},"controllers/MealsController.html":{},"injectables/MealsService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"controllers/OpenffController.html":{},"injectables/OpenffService.html":{},"controllers/PlanningController.html":{},"injectables/PlanningService.html":{},"controllers/PreferencesController.html":{},"injectables/PreferencesService.html":{},"controllers/ReportsController.html":{},"injectables/ReportsService.html":{},"classes/Rooms.html":{},"controllers/SportsExerciseController.html":{},"injectables/SportsExerciseService.html":{},"controllers/StepsController.html":{},"injectables/StepsService.html":{},"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BetaUsersController.html":{},"injectables/BetaUsersService.html":{},"controllers/BugsBetaController.html":{},"injectables/BugsBetaService.html":{},"controllers/CaloriesController.html":{},"injectables/CaloriesService.html":{},"controllers/ChatController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/ExercisesLibraryController.html":{},"injectables/ExercisesLibraryService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"controllers/FormController.html":{},"injectables/FormService.html":{},"injectables/JwtStrategy.html":{},"controllers/MealsController.html":{},"injectables/MealsService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"controllers/OpenffController.html":{},"injectables/OpenffService.html":{},"controllers/PlanningController.html":{},"injectables/PlanningService.html":{},"controllers/PreferencesController.html":{},"injectables/PreferencesService.html":{},"injectables/PrismaService.html":{},"controllers/ReportsController.html":{},"injectables/ReportsService.html":{},"classes/Rooms.html":{},"controllers/SportsExerciseController.html":{},"injectables/SportsExerciseService.html":{},"controllers/StepsController.html":{},"injectables/StepsService.html":{},"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{}}}],["rights",{"_index":1718,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":1671,"title":{},"body":{"dependencies.html":{}}}],["room",{"_index":642,"title":{},"body":{"injectables/ChatService.html":{},"classes/Rooms.html":{},"miscellaneous/typealiases.html":{}}}],["room.name",{"_index":1307,"title":{},"body":{"classes/Rooms.html":{}}}],["room.users",{"_index":1311,"title":{},"body":{"classes/Rooms.html":{}}}],["room.users.filter((user",{"_index":1312,"title":{},"body":{"classes/Rooms.html":{}}}],["room.users.find((user",{"_index":1313,"title":{},"body":{"classes/Rooms.html":{}}}],["room.users.push(user",{"_index":1310,"title":{},"body":{"classes/Rooms.html":{}}}],["roomid",{"_index":1293,"title":{},"body":{"classes/Rooms.html":{}}}],["roomname",{"_index":640,"title":{},"body":{"injectables/ChatService.html":{}}}],["rooms",{"_index":618,"title":{"classes/Rooms.html":{}},"body":{"injectables/ChatService.html":{},"classes/Rooms.html":{},"coverage.html":{}}}],["rs256",{"_index":904,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["rsa",{"_index":887,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["rt",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["run",{"_index":1690,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1673,"title":{},"body":{"dependencies.html":{}}}],["s3",{"_index":798,"title":{},"body":{"injectables/FileService.html":{},"dependencies.html":{}}}],["save",{"_index":658,"title":{},"body":{"injectables/ChatService.html":{}}}],["saveformdatas",{"_index":830,"title":{},"body":{"controllers/FormController.html":{},"injectables/FormService.html":{}}}],["saveformdatas(@body",{"_index":839,"title":{},"body":{"controllers/FormController.html":{}}}],["saveformdatas(datas",{"_index":862,"title":{},"body":{"injectables/FormService.html":{}}}],["saveformdatas(dto",{"_index":831,"title":{},"body":{"controllers/FormController.html":{}}}],["schema",{"_index":1685,"title":{},"body":{"index.html":{}}}],["schema.prisma",{"_index":1694,"title":{},"body":{"index.html":{}}}],["sdk/client",{"_index":806,"title":{},"body":{"injectables/FileService.html":{},"dependencies.html":{}}}],["se",{"_index":1042,"title":{},"body":{"injectables/MessagesService.html":{}}}],["search",{"_index":1319,"title":{},"body":{"controllers/SportsExerciseController.html":{},"injectables/SportsExerciseService.html":{}}}],["search(@request",{"_index":1352,"title":{},"body":{"controllers/SportsExerciseController.html":{}}}],["search(req",{"_index":1330,"title":{},"body":{"controllers/SportsExerciseController.html":{}}}],["search(useremail",{"_index":1369,"title":{},"body":{"injectables/SportsExerciseService.html":{}}}],["searchmeal",{"_index":913,"title":{},"body":{"controllers/MealsController.html":{}}}],["searchmeal(@request",{"_index":948,"title":{},"body":{"controllers/MealsController.html":{}}}],["searchmeal(req",{"_index":928,"title":{},"body":{"controllers/MealsController.html":{}}}],["secretaccesskey",{"_index":813,"title":{},"body":{"injectables/FileService.html":{}}}],["secretorkeyprovider",{"_index":889,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["seeddev",{"_index":1688,"title":{},"body":{"index.html":{}}}],["seen",{"_index":674,"title":{},"body":{"injectables/ChatService.html":{},"injectables/MessagesService.html":{}}}],["sell",{"_index":1725,"title":{},"body":{"license.html":{}}}],["senderid",{"_index":1016,"title":{},"body":{"injectables/MessagesService.html":{}}}],["sent",{"_index":666,"title":{},"body":{"injectables/ChatService.html":{}}}],["server",{"_index":571,"title":{},"body":{"classes/ChatGateway.html":{}}}],["setavatar",{"_index":1442,"title":{},"body":{"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{}}}],["setavatar(@getcurrentuseremail",{"_index":1591,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["setavatar(email",{"_index":1457,"title":{},"body":{"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{}}}],["setexercise",{"_index":1163,"title":{},"body":{"injectables/PlanningService.html":{}}}],["setexercise(email",{"_index":1169,"title":{},"body":{"injectables/PlanningService.html":{}}}],["setgoal",{"_index":1443,"title":{},"body":{"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{}}}],["setgoal(@getcurrentuseremail",{"_index":1569,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["setgoal(email",{"_index":1459,"title":{},"body":{"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{}}}],["setmeal",{"_index":1114,"title":{},"body":{"controllers/PlanningController.html":{},"injectables/PlanningService.html":{}}}],["setmeal(@getcurrentuseremail",{"_index":1151,"title":{},"body":{"controllers/PlanningController.html":{}}}],["setmeal(email",{"_index":1124,"title":{},"body":{"controllers/PlanningController.html":{},"injectables/PlanningService.html":{}}}],["setmetadata('ispublic",{"_index":1791,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setsports",{"_index":1444,"title":{},"body":{"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{}}}],["setsports(@getcurrentuseremail",{"_index":1565,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["setsports(email",{"_index":1462,"title":{},"body":{"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{}}}],["setsportsexercises",{"_index":1115,"title":{},"body":{"controllers/PlanningController.html":{}}}],["setsportsexercises(@getcurrentuseremail",{"_index":1144,"title":{},"body":{"controllers/PlanningController.html":{}}}],["setsportsexercises(email",{"_index":1127,"title":{},"body":{"controllers/PlanningController.html":{}}}],["shall",{"_index":1735,"title":{},"body":{"license.html":{}}}],["sidekick",{"_index":638,"title":{},"body":{"injectables/ChatService.html":{},"injectables/MessagesService.html":{},"injectables/ReportsService.html":{},"classes/UserNotFoundException-2.html":{},"classes/UserWithoutSidekickException.html":{},"license.html":{}}}],["sidekick].sort().join(\"_",{"_index":641,"title":{},"body":{"injectables/ChatService.html":{}}}],["sidekick_id",{"_index":1275,"title":{},"body":{"injectables/ReportsService.html":{},"injectables/UserInfoService.html":{}}}],["sidekickdatas",{"_index":1476,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["sidekickdatas.avatar",{"_index":1482,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["sidekickdatas.birth_date",{"_index":1478,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["sidekickdatas.description",{"_index":1486,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["sidekickdatas.firstname",{"_index":1484,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["sidekickdatas.gender",{"_index":1479,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["sidekickdatas.lastname",{"_index":1483,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["sidekickdatas.sport_frequence",{"_index":1488,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["sidekickdatas.username",{"_index":1480,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["sidekickid",{"_index":648,"title":{},"body":{"injectables/ChatService.html":{},"classes/Rooms.html":{}}}],["size",{"_index":700,"title":{},"body":{"classes/EditInfosDto.html":{},"classes/FormDto.html":{},"controllers/UserInfosController.html":{},"classes/UserInfosDto.html":{}}}],["socket",{"_index":581,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{}}}],["socket.broadcast.emit(\"message",{"_index":657,"title":{},"body":{"injectables/ChatService.html":{}}}],["socket.broadcast.emit(\"seen",{"_index":672,"title":{},"body":{"injectables/ChatService.html":{}}}],["socket.broadcast.emit(\"writing",{"_index":667,"title":{},"body":{"injectables/ChatService.html":{}}}],["socket.disconnect",{"_index":636,"title":{},"body":{"injectables/ChatService.html":{}}}],["socket.emit(\"message",{"_index":650,"title":{},"body":{"injectables/ChatService.html":{}}}],["socket.emit(\"seen",{"_index":676,"title":{},"body":{"injectables/ChatService.html":{}}}],["socket.emit(\"writing",{"_index":668,"title":{},"body":{"injectables/ChatService.html":{}}}],["socket.handshake.auth.token",{"_index":635,"title":{},"body":{"injectables/ChatService.html":{}}}],["socket.id",{"_index":647,"title":{},"body":{"injectables/ChatService.html":{}}}],["socket.io",{"_index":600,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"dependencies.html":{}}}],["socket.join(roomname",{"_index":649,"title":{},"body":{"injectables/ChatService.html":{}}}],["socketid",{"_index":646,"title":{},"body":{"injectables/ChatService.html":{},"classes/Rooms.html":{}}}],["socketuser",{"_index":1291,"title":{},"body":{"classes/Rooms.html":{},"miscellaneous/typealiases.html":{}}}],["software",{"_index":1710,"title":{},"body":{"license.html":{}}}],["sounds",{"_index":1431,"title":{},"body":{"classes/UpdatePreferenceDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AlgoMatchingController.html":{},"modules/AlgoMatchingModule.html":{},"injectables/AlgoMatchingService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AuthConfig.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/BetaUsersController.html":{},"classes/BetaUsersDto.html":{},"modules/BetaUsersModule.html":{},"injectables/BetaUsersService.html":{},"controllers/BugsBetaController.html":{},"classes/BugsBetaDto.html":{},"modules/BugsBetaModule.html":{},"injectables/BugsBetaService.html":{},"controllers/CaloriesController.html":{},"modules/CaloriesModule.html":{},"injectables/CaloriesService.html":{},"controllers/ChatController.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreateExercisesLibraryDto.html":{},"classes/CreateOpenffDto.html":{},"classes/EditInfosDto.html":{},"controllers/ExercisesLibraryController.html":{},"modules/ExercisesLibraryModule.html":{},"injectables/ExercisesLibraryService.html":{},"controllers/FileController.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"controllers/FormController.html":{},"classes/FormDto.html":{},"modules/FormModule.html":{},"injectables/FormService.html":{},"injectables/JwtStrategy.html":{},"controllers/MealsController.html":{},"classes/MealsDto.html":{},"modules/MealsModule.html":{},"injectables/MealsService.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"controllers/OpenffController.html":{},"modules/OpenffModule.html":{},"injectables/OpenffService.html":{},"controllers/PlanningController.html":{},"modules/PlanningModule.html":{},"injectables/PlanningService.html":{},"controllers/PreferencesController.html":{},"modules/PreferencesModule.html":{},"injectables/PreferencesService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ReportsController.html":{},"modules/ReportsModule.html":{},"injectables/ReportsService.html":{},"classes/Rooms.html":{},"controllers/SportsExerciseController.html":{},"classes/SportsExerciseDto.html":{},"modules/SportsExerciseModule.html":{},"injectables/SportsExerciseService.html":{},"controllers/StepsController.html":{},"modules/StepsModule.html":{},"injectables/StepsService.html":{},"classes/UpdateBugsBetaDto.html":{},"classes/UpdateExercisesLibraryDto.html":{},"classes/UpdateMealsDto.html":{},"classes/UpdateOpenffDto.html":{},"classes/UpdatePreferenceDto.html":{},"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{},"classes/UserInfosDto.html":{},"modules/UserInfosModule.html":{},"classes/UserNotFoundException.html":{},"classes/UserNotFoundException-1.html":{},"classes/UserNotFoundException-2.html":{},"classes/UserWithoutSidekickException.html":{}}}],["sport",{"_index":1027,"title":{},"body":{"injectables/MessagesService.html":{}}}],["sport_frequence",{"_index":701,"title":{},"body":{"classes/EditInfosDto.html":{},"classes/FormDto.html":{},"classes/UserInfosDto.html":{}}}],["sportfrequence",{"_index":709,"title":{},"body":{"classes/EditInfosDto.html":{},"classes/FormDto.html":{},"injectables/UserInfoService.html":{},"classes/UserInfosDto.html":{}}}],["sportfrequence[datas[\"sport_frequence\"].touppercase",{"_index":1498,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["sportfrequence[dto.sport_frequence?.touppercase",{"_index":1511,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["sports",{"_index":1317,"title":{},"body":{"controllers/SportsExerciseController.html":{},"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{}}}],["sports_exercises.controller",{"_index":1361,"title":{},"body":{"modules/SportsExerciseModule.html":{}}}],["sports_exercises.service",{"_index":1337,"title":{},"body":{"controllers/SportsExerciseController.html":{},"modules/SportsExerciseModule.html":{}}}],["sports_exercises/sports_exercises.module",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["sportsexercicseservice",{"_index":1339,"title":{},"body":{"controllers/SportsExerciseController.html":{}}}],["sportsexercisecontroller",{"_index":1315,"title":{"controllers/SportsExerciseController.html":{}},"body":{"controllers/SportsExerciseController.html":{},"modules/SportsExerciseModule.html":{},"coverage.html":{}}}],["sportsexercisedto",{"_index":1321,"title":{"classes/SportsExerciseDto.html":{}},"body":{"controllers/SportsExerciseController.html":{},"classes/SportsExerciseDto.html":{},"injectables/SportsExerciseService.html":{},"coverage.html":{}}}],["sportsexercisemodule",{"_index":75,"title":{"modules/SportsExerciseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SportsExerciseModule.html":{},"modules.html":{},"overview.html":{}}}],["sportsexerciseservice",{"_index":1336,"title":{"injectables/SportsExerciseService.html":{}},"body":{"controllers/SportsExerciseController.html":{},"modules/SportsExerciseModule.html":{},"injectables/SportsExerciseService.html":{},"coverage.html":{},"overview.html":{}}}],["src/.../chat.helper.ts",{"_index":1780,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../current_user.decorator.ts",{"_index":1785,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1678,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../public.decorator.ts",{"_index":1786,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../tokens.types.ts",{"_index":1782,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/algo",{"_index":6,"title":{},"body":{"controllers/AlgoMatchingController.html":{},"modules/AlgoMatchingModule.html":{},"injectables/AlgoMatchingService.html":{},"coverage.html":{}}}],["src/app.controller.ts",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":49,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":121,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":122,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.config.ts",{"_index":152,"title":{},"body":{"injectables/AuthConfig.html":{},"coverage.html":{}}}],["src/auth/auth.config.ts:5",{"_index":172,"title":{},"body":{"injectables/AuthConfig.html":{}}}],["src/auth/auth.config.ts:6",{"_index":166,"title":{},"body":{"injectables/AuthConfig.html":{}}}],["src/auth/auth.config.ts:7",{"_index":170,"title":{},"body":{"injectables/AuthConfig.html":{}}}],["src/auth/auth.config.ts:8",{"_index":164,"title":{},"body":{"injectables/AuthConfig.html":{}}}],["src/auth/auth.config.ts:9",{"_index":168,"title":{},"body":{"injectables/AuthConfig.html":{}}}],["src/auth/auth.controller.ts",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:14",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:20",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:30",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:36",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:42",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:52",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:58",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:63",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:70",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":274,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:127",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:141",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:178",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:199",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:21",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:218",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:238",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:262",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:29",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:74",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/auth.dto.ts",{"_index":264,"title":{},"body":{"classes/AuthDto.html":{},"coverage.html":{}}}],["src/auth/dto/auth.dto.ts:10",{"_index":268,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/auth/dto/auth.dto.ts:6",{"_index":267,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/auth/strategies/aws.strategy.ts",{"_index":875,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/aws.strategy.ts:29",{"_index":880,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/aws.strategy.ts:9",{"_index":878,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/types/tokens.types.ts",{"_index":1783,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/beta_users/beta_users.controller.ts",{"_index":397,"title":{},"body":{"controllers/BetaUsersController.html":{},"coverage.html":{}}}],["src/beta_users/beta_users.controller.ts:10",{"_index":403,"title":{},"body":{"controllers/BetaUsersController.html":{}}}],["src/beta_users/beta_users.module.ts",{"_index":424,"title":{},"body":{"modules/BetaUsersModule.html":{}}}],["src/beta_users/beta_users.service.ts",{"_index":426,"title":{},"body":{"injectables/BetaUsersService.html":{},"coverage.html":{}}}],["src/beta_users/beta_users.service.ts:11",{"_index":432,"title":{},"body":{"injectables/BetaUsersService.html":{}}}],["src/beta_users/beta_users.service.ts:6",{"_index":429,"title":{},"body":{"injectables/BetaUsersService.html":{}}}],["src/beta_users/dto/beta_users.dto.ts",{"_index":410,"title":{},"body":{"classes/BetaUsersDto.html":{},"coverage.html":{}}}],["src/beta_users/dto/beta_users.dto.ts:13",{"_index":419,"title":{},"body":{"classes/BetaUsersDto.html":{}}}],["src/beta_users/dto/beta_users.dto.ts:17",{"_index":416,"title":{},"body":{"classes/BetaUsersDto.html":{}}}],["src/beta_users/dto/beta_users.dto.ts:5",{"_index":418,"title":{},"body":{"classes/BetaUsersDto.html":{}}}],["src/beta_users/dto/beta_users.dto.ts:9",{"_index":415,"title":{},"body":{"classes/BetaUsersDto.html":{}}}],["src/bugs_beta/bugs_beta.controller.ts",{"_index":441,"title":{},"body":{"controllers/BugsBetaController.html":{},"coverage.html":{}}}],["src/bugs_beta/bugs_beta.controller.ts:11",{"_index":450,"title":{},"body":{"controllers/BugsBetaController.html":{}}}],["src/bugs_beta/bugs_beta.controller.ts:16",{"_index":461,"title":{},"body":{"controllers/BugsBetaController.html":{}}}],["src/bugs_beta/bugs_beta.controller.ts:21",{"_index":464,"title":{},"body":{"controllers/BugsBetaController.html":{}}}],["src/bugs_beta/bugs_beta.controller.ts:26",{"_index":451,"title":{},"body":{"controllers/BugsBetaController.html":{}}}],["src/bugs_beta/bugs_beta.controller.ts:31",{"_index":457,"title":{},"body":{"controllers/BugsBetaController.html":{}}}],["src/bugs_beta/bugs_beta.controller.ts:36",{"_index":454,"title":{},"body":{"controllers/BugsBetaController.html":{}}}],["src/bugs_beta/bugs_beta.module.ts",{"_index":496,"title":{},"body":{"modules/BugsBetaModule.html":{}}}],["src/bugs_beta/bugs_beta.service.ts",{"_index":497,"title":{},"body":{"injectables/BugsBetaService.html":{},"coverage.html":{}}}],["src/bugs_beta/bugs_beta.service.ts:10",{"_index":500,"title":{},"body":{"injectables/BugsBetaService.html":{}}}],["src/bugs_beta/bugs_beta.service.ts:15",{"_index":507,"title":{},"body":{"injectables/BugsBetaService.html":{}}}],["src/bugs_beta/bugs_beta.service.ts:19",{"_index":508,"title":{},"body":{"injectables/BugsBetaService.html":{}}}],["src/bugs_beta/bugs_beta.service.ts:27",{"_index":510,"title":{},"body":{"injectables/BugsBetaService.html":{}}}],["src/bugs_beta/bugs_beta.service.ts:37",{"_index":503,"title":{},"body":{"injectables/BugsBetaService.html":{}}}],["src/bugs_beta/bugs_beta.service.ts:58",{"_index":512,"title":{},"body":{"injectables/BugsBetaService.html":{}}}],["src/bugs_beta/bugs_beta.service.ts:68",{"_index":506,"title":{},"body":{"injectables/BugsBetaService.html":{}}}],["src/bugs_beta/dto/bugs_beta.dto.ts",{"_index":488,"title":{},"body":{"classes/BugsBetaDto.html":{},"coverage.html":{}}}],["src/bugs_beta/dto/bugs_beta.dto.ts:10",{"_index":494,"title":{},"body":{"classes/BugsBetaDto.html":{}}}],["src/bugs_beta/dto/bugs_beta.dto.ts:14",{"_index":491,"title":{},"body":{"classes/BugsBetaDto.html":{}}}],["src/bugs_beta/dto/bugs_beta.dto.ts:17",{"_index":493,"title":{},"body":{"classes/BugsBetaDto.html":{}}}],["src/bugs_beta/dto/bugs_beta.dto.ts:5",{"_index":495,"title":{},"body":{"classes/BugsBetaDto.html":{}}}],["src/bugs_beta/dto/bugs_beta.dto.ts:6",{"_index":492,"title":{},"body":{"classes/BugsBetaDto.html":{}}}],["src/bugs_beta/dto/update.dto.ts",{"_index":1405,"title":{},"body":{"classes/UpdateBugsBetaDto.html":{},"coverage.html":{}}}],["src/bugs_beta/dto/update.dto.ts:13",{"_index":1406,"title":{},"body":{"classes/UpdateBugsBetaDto.html":{}}}],["src/bugs_beta/dto/update.dto.ts:17",{"_index":1408,"title":{},"body":{"classes/UpdateBugsBetaDto.html":{}}}],["src/bugs_beta/dto/update.dto.ts:5",{"_index":1407,"title":{},"body":{"classes/UpdateBugsBetaDto.html":{}}}],["src/bugs_beta/dto/update.dto.ts:9",{"_index":1409,"title":{},"body":{"classes/UpdateBugsBetaDto.html":{}}}],["src/calories/calories.controller.ts",{"_index":532,"title":{},"body":{"controllers/CaloriesController.html":{},"coverage.html":{}}}],["src/calories/calories.controller.ts:9",{"_index":536,"title":{},"body":{"controllers/CaloriesController.html":{}}}],["src/calories/calories.module.ts",{"_index":543,"title":{},"body":{"modules/CaloriesModule.html":{}}}],["src/calories/calories.service.ts",{"_index":545,"title":{},"body":{"injectables/CaloriesService.html":{},"coverage.html":{}}}],["src/calories/calories.service.ts:6",{"_index":547,"title":{},"body":{"injectables/CaloriesService.html":{}}}],["src/calories/calories.service.ts:9",{"_index":549,"title":{},"body":{"injectables/CaloriesService.html":{}}}],["src/chat/chat.controller.ts",{"_index":556,"title":{},"body":{"controllers/ChatController.html":{},"coverage.html":{}}}],["src/chat/chat.controller.ts:10",{"_index":561,"title":{},"body":{"controllers/ChatController.html":{}}}],["src/chat/chat.gateway.ts",{"_index":570,"title":{},"body":{"classes/ChatGateway.html":{},"coverage.html":{}}}],["src/chat/chat.gateway.ts:11",{"_index":578,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.gateway.ts:15",{"_index":582,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.gateway.ts:19",{"_index":584,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.gateway.ts:24",{"_index":588,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.gateway.ts:29",{"_index":595,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.gateway.ts:34",{"_index":592,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.helper.ts",{"_index":1279,"title":{},"body":{"classes/Rooms.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/chat/chat.helper.ts:13",{"_index":1287,"title":{},"body":{"classes/Rooms.html":{}}}],["src/chat/chat.helper.ts:17",{"_index":1289,"title":{},"body":{"classes/Rooms.html":{}}}],["src/chat/chat.helper.ts:21",{"_index":1301,"title":{},"body":{"classes/Rooms.html":{}}}],["src/chat/chat.helper.ts:25",{"_index":1297,"title":{},"body":{"classes/Rooms.html":{}}}],["src/chat/chat.helper.ts:29",{"_index":1292,"title":{},"body":{"classes/Rooms.html":{}}}],["src/chat/chat.helper.ts:36",{"_index":1303,"title":{},"body":{"classes/Rooms.html":{}}}],["src/chat/chat.helper.ts:43",{"_index":1299,"title":{},"body":{"classes/Rooms.html":{}}}],["src/chat/chat.helper.ts:50",{"_index":1295,"title":{},"body":{"classes/Rooms.html":{}}}],["src/chat/chat.module.ts",{"_index":614,"title":{},"body":{"modules/ChatModule.html":{}}}],["src/chat/chat.service.ts",{"_index":617,"title":{},"body":{"injectables/ChatService.html":{},"coverage.html":{}}}],["src/chat/chat.service.ts:116",{"_index":624,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:16",{"_index":625,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:57",{"_index":626,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:72",{"_index":628,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:9",{"_index":621,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:91",{"_index":632,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:97",{"_index":630,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/common/decorators",{"_index":740,"title":{},"body":{"controllers/ExercisesLibraryController.html":{}}}],["src/common/decorators/current_user.decorator.ts",{"_index":1639,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/public.decorator.ts",{"_index":1641,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/guards/at.guard.ts",{"_index":125,"title":{},"body":{"injectables/AtGuard.html":{},"coverage.html":{}}}],["src/common/guards/at.guard.ts:11",{"_index":137,"title":{},"body":{"injectables/AtGuard.html":{}}}],["src/common/guards/at.guard.ts:6",{"_index":130,"title":{},"body":{"injectables/AtGuard.html":{}}}],["src/exercises_library/dto/create",{"_index":683,"title":{},"body":{"classes/CreateExercisesLibraryDto.html":{},"coverage.html":{}}}],["src/exercises_library/dto/update",{"_index":1410,"title":{},"body":{"classes/UpdateExercisesLibraryDto.html":{},"coverage.html":{}}}],["src/exercises_library/exercises_library.controller.ts",{"_index":714,"title":{},"body":{"controllers/ExercisesLibraryController.html":{},"coverage.html":{}}}],["src/exercises_library/exercises_library.controller.ts:13",{"_index":722,"title":{},"body":{"controllers/ExercisesLibraryController.html":{}}}],["src/exercises_library/exercises_library.controller.ts:18",{"_index":723,"title":{},"body":{"controllers/ExercisesLibraryController.html":{}}}],["src/exercises_library/exercises_library.controller.ts:23",{"_index":726,"title":{},"body":{"controllers/ExercisesLibraryController.html":{}}}],["src/exercises_library/exercises_library.controller.ts:28",{"_index":733,"title":{},"body":{"controllers/ExercisesLibraryController.html":{}}}],["src/exercises_library/exercises_library.controller.ts:33",{"_index":729,"title":{},"body":{"controllers/ExercisesLibraryController.html":{}}}],["src/exercises_library/exercises_library.module.ts",{"_index":753,"title":{},"body":{"modules/ExercisesLibraryModule.html":{}}}],["src/exercises_library/exercises_library.service.ts",{"_index":755,"title":{},"body":{"injectables/ExercisesLibraryService.html":{},"coverage.html":{}}}],["src/exercises_library/exercises_library.service.ts:10",{"_index":757,"title":{},"body":{"injectables/ExercisesLibraryService.html":{}}}],["src/exercises_library/exercises_library.service.ts:26",{"_index":758,"title":{},"body":{"injectables/ExercisesLibraryService.html":{}}}],["src/exercises_library/exercises_library.service.ts:32",{"_index":759,"title":{},"body":{"injectables/ExercisesLibraryService.html":{}}}],["src/exercises_library/exercises_library.service.ts:42",{"_index":761,"title":{},"body":{"injectables/ExercisesLibraryService.html":{}}}],["src/exercises_library/exercises_library.service.ts:61",{"_index":760,"title":{},"body":{"injectables/ExercisesLibraryService.html":{}}}],["src/exercises_library/exercises_library.service.ts:7",{"_index":756,"title":{},"body":{"injectables/ExercisesLibraryService.html":{}}}],["src/file/file.controller.ts",{"_index":771,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{}}}],["src/file/file.controller.ts:15",{"_index":776,"title":{},"body":{"controllers/FileController.html":{}}}],["src/file/file.module.ts",{"_index":795,"title":{},"body":{"modules/FileModule.html":{}}}],["src/file/file.service.ts",{"_index":797,"title":{},"body":{"injectables/FileService.html":{},"coverage.html":{}}}],["src/file/file.service.ts:20",{"_index":804,"title":{},"body":{"injectables/FileService.html":{}}}],["src/file/file.service.ts:8",{"_index":802,"title":{},"body":{"injectables/FileService.html":{}}}],["src/form/dto/form.dto.ts",{"_index":841,"title":{},"body":{"classes/FormDto.html":{},"coverage.html":{}}}],["src/form/dto/form.dto.ts:11",{"_index":845,"title":{},"body":{"classes/FormDto.html":{}}}],["src/form/dto/form.dto.ts:15",{"_index":847,"title":{},"body":{"classes/FormDto.html":{}}}],["src/form/dto/form.dto.ts:19",{"_index":849,"title":{},"body":{"classes/FormDto.html":{}}}],["src/form/dto/form.dto.ts:23",{"_index":843,"title":{},"body":{"classes/FormDto.html":{}}}],["src/form/dto/form.dto.ts:27",{"_index":852,"title":{},"body":{"classes/FormDto.html":{}}}],["src/form/dto/form.dto.ts:31",{"_index":853,"title":{},"body":{"classes/FormDto.html":{}}}],["src/form/dto/form.dto.ts:34",{"_index":846,"title":{},"body":{"classes/FormDto.html":{}}}],["src/form/dto/form.dto.ts:38",{"_index":844,"title":{},"body":{"classes/FormDto.html":{}}}],["src/form/dto/form.dto.ts:41",{"_index":850,"title":{},"body":{"classes/FormDto.html":{}}}],["src/form/dto/form.dto.ts:7",{"_index":851,"title":{},"body":{"classes/FormDto.html":{}}}],["src/form/form.controller.ts",{"_index":828,"title":{},"body":{"controllers/FormController.html":{},"coverage.html":{}}}],["src/form/form.controller.ts:10",{"_index":834,"title":{},"body":{"controllers/FormController.html":{}}}],["src/form/form.module.ts",{"_index":858,"title":{},"body":{"modules/FormModule.html":{}}}],["src/form/form.service.ts",{"_index":860,"title":{},"body":{"injectables/FormService.html":{},"coverage.html":{}}}],["src/form/form.service.ts:12",{"_index":863,"title":{},"body":{"injectables/FormService.html":{}}}],["src/form/form.service.ts:9",{"_index":861,"title":{},"body":{"injectables/FormService.html":{}}}],["src/main.ts",{"_index":1644,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meals/dto/meals.dto.ts",{"_index":951,"title":{},"body":{"classes/MealsDto.html":{},"coverage.html":{}}}],["src/meals/dto/meals.dto.ts:13",{"_index":958,"title":{},"body":{"classes/MealsDto.html":{}}}],["src/meals/dto/meals.dto.ts:16",{"_index":955,"title":{},"body":{"classes/MealsDto.html":{}}}],["src/meals/dto/meals.dto.ts:18",{"_index":957,"title":{},"body":{"classes/MealsDto.html":{}}}],["src/meals/dto/meals.dto.ts:4",{"_index":960,"title":{},"body":{"classes/MealsDto.html":{}}}],["src/meals/dto/meals.dto.ts:5",{"_index":956,"title":{},"body":{"classes/MealsDto.html":{}}}],["src/meals/dto/meals.dto.ts:9",{"_index":959,"title":{},"body":{"classes/MealsDto.html":{}}}],["src/meals/dto/update.dto.ts",{"_index":1416,"title":{},"body":{"classes/UpdateMealsDto.html":{},"coverage.html":{}}}],["src/meals/dto/update.dto.ts:13",{"_index":1420,"title":{},"body":{"classes/UpdateMealsDto.html":{}}}],["src/meals/dto/update.dto.ts:17",{"_index":1417,"title":{},"body":{"classes/UpdateMealsDto.html":{}}}],["src/meals/dto/update.dto.ts:20",{"_index":1419,"title":{},"body":{"classes/UpdateMealsDto.html":{}}}],["src/meals/dto/update.dto.ts:4",{"_index":1422,"title":{},"body":{"classes/UpdateMealsDto.html":{}}}],["src/meals/dto/update.dto.ts:5",{"_index":1418,"title":{},"body":{"classes/UpdateMealsDto.html":{}}}],["src/meals/dto/update.dto.ts:9",{"_index":1421,"title":{},"body":{"classes/UpdateMealsDto.html":{}}}],["src/meals/exceptions/not",{"_index":1614,"title":{},"body":{"classes/UserNotFoundException.html":{},"coverage.html":{}}}],["src/meals/meals.controller.ts",{"_index":907,"title":{},"body":{"controllers/MealsController.html":{},"coverage.html":{}}}],["src/meals/meals.controller.ts:11",{"_index":916,"title":{},"body":{"controllers/MealsController.html":{}}}],["src/meals/meals.controller.ts:16",{"_index":922,"title":{},"body":{"controllers/MealsController.html":{}}}],["src/meals/meals.controller.ts:21",{"_index":918,"title":{},"body":{"controllers/MealsController.html":{}}}],["src/meals/meals.controller.ts:26",{"_index":925,"title":{},"body":{"controllers/MealsController.html":{}}}],["src/meals/meals.controller.ts:31",{"_index":927,"title":{},"body":{"controllers/MealsController.html":{}}}],["src/meals/meals.controller.ts:36",{"_index":931,"title":{},"body":{"controllers/MealsController.html":{}}}],["src/meals/meals.module.ts",{"_index":966,"title":{},"body":{"modules/MealsModule.html":{}}}],["src/meals/meals.service.ts",{"_index":968,"title":{},"body":{"injectables/MealsService.html":{},"coverage.html":{}}}],["src/meals/meals.service.ts:12",{"_index":978,"title":{},"body":{"injectables/MealsService.html":{}}}],["src/meals/meals.service.ts:20",{"_index":973,"title":{},"body":{"injectables/MealsService.html":{}}}],["src/meals/meals.service.ts:28",{"_index":972,"title":{},"body":{"injectables/MealsService.html":{}}}],["src/meals/meals.service.ts:50",{"_index":980,"title":{},"body":{"injectables/MealsService.html":{}}}],["src/meals/meals.service.ts:60",{"_index":975,"title":{},"body":{"injectables/MealsService.html":{}}}],["src/meals/meals.service.ts:80",{"_index":977,"title":{},"body":{"injectables/MealsService.html":{}}}],["src/meals/meals.service.ts:9",{"_index":971,"title":{},"body":{"injectables/MealsService.html":{}}}],["src/messages/messages.controller.ts",{"_index":993,"title":{},"body":{"controllers/MessagesController.html":{},"coverage.html":{}}}],["src/messages/messages.controller.ts:11",{"_index":999,"title":{},"body":{"controllers/MessagesController.html":{}}}],["src/messages/messages.module.ts",{"_index":1009,"title":{},"body":{"modules/MessagesModule.html":{}}}],["src/messages/messages.service.ts",{"_index":1011,"title":{},"body":{"injectables/MessagesService.html":{},"coverage.html":{}}}],["src/messages/messages.service.ts:10",{"_index":1015,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/messages/messages.service.ts:7",{"_index":1013,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/openff/dto/create",{"_index":695,"title":{},"body":{"classes/CreateOpenffDto.html":{},"coverage.html":{}}}],["src/openff/dto/update",{"_index":1424,"title":{},"body":{"classes/UpdateOpenffDto.html":{},"coverage.html":{}}}],["src/openff/openff.controller.ts",{"_index":1047,"title":{},"body":{"controllers/OpenffController.html":{},"coverage.html":{}}}],["src/openff/openff.controller.ts:11",{"_index":1051,"title":{},"body":{"controllers/OpenffController.html":{}}}],["src/openff/openff.module.ts",{"_index":1060,"title":{},"body":{"modules/OpenffModule.html":{}}}],["src/openff/openff.service.ts",{"_index":1062,"title":{},"body":{"injectables/OpenffService.html":{},"coverage.html":{}}}],["src/openff/openff.service.ts:5",{"_index":1064,"title":{},"body":{"injectables/OpenffService.html":{}}}],["src/openff/openff.service.ts:9",{"_index":1065,"title":{},"body":{"injectables/OpenffService.html":{}}}],["src/planning/planning.controller.ts",{"_index":1109,"title":{},"body":{"controllers/PlanningController.html":{},"coverage.html":{}}}],["src/planning/planning.controller.ts:10",{"_index":1123,"title":{},"body":{"controllers/PlanningController.html":{}}}],["src/planning/planning.controller.ts:15",{"_index":1121,"title":{},"body":{"controllers/PlanningController.html":{}}}],["src/planning/planning.controller.ts:20",{"_index":1129,"title":{},"body":{"controllers/PlanningController.html":{}}}],["src/planning/planning.controller.ts:25",{"_index":1135,"title":{},"body":{"controllers/PlanningController.html":{}}}],["src/planning/planning.controller.ts:30",{"_index":1126,"title":{},"body":{"controllers/PlanningController.html":{}}}],["src/planning/planning.controller.ts:35",{"_index":1132,"title":{},"body":{"controllers/PlanningController.html":{}}}],["src/planning/planning.controller.ts:40",{"_index":1119,"title":{},"body":{"controllers/PlanningController.html":{}}}],["src/planning/planning.module.ts",{"_index":1160,"title":{},"body":{"modules/PlanningModule.html":{}}}],["src/planning/planning.service.ts",{"_index":1162,"title":{},"body":{"injectables/PlanningService.html":{},"coverage.html":{}}}],["src/planning/planning.service.ts:113",{"_index":1168,"title":{},"body":{"injectables/PlanningService.html":{}}}],["src/planning/planning.service.ts:12",{"_index":1170,"title":{},"body":{"injectables/PlanningService.html":{}}}],["src/planning/planning.service.ts:35",{"_index":1173,"title":{},"body":{"injectables/PlanningService.html":{}}}],["src/planning/planning.service.ts:52",{"_index":1171,"title":{},"body":{"injectables/PlanningService.html":{}}}],["src/planning/planning.service.ts:7",{"_index":1165,"title":{},"body":{"injectables/PlanningService.html":{}}}],["src/planning/planning.service.ts:74",{"_index":1175,"title":{},"body":{"injectables/PlanningService.html":{}}}],["src/planning/planning.service.ts:91",{"_index":1166,"title":{},"body":{"injectables/PlanningService.html":{}}}],["src/planning/planning.service.ts:98",{"_index":1167,"title":{},"body":{"injectables/PlanningService.html":{}}}],["src/preferences/dto/update",{"_index":1427,"title":{},"body":{"classes/UpdatePreferenceDto.html":{},"coverage.html":{}}}],["src/preferences/preferences.controller.ts",{"_index":1192,"title":{},"body":{"controllers/PreferencesController.html":{},"coverage.html":{}}}],["src/preferences/preferences.controller.ts:11",{"_index":1198,"title":{},"body":{"controllers/PreferencesController.html":{}}}],["src/preferences/preferences.controller.ts:16",{"_index":1195,"title":{},"body":{"controllers/PreferencesController.html":{}}}],["src/preferences/preferences.module.ts",{"_index":1209,"title":{},"body":{"modules/PreferencesModule.html":{}}}],["src/preferences/preferences.service.ts",{"_index":1211,"title":{},"body":{"injectables/PreferencesService.html":{},"coverage.html":{}}}],["src/preferences/preferences.service.ts:20",{"_index":1213,"title":{},"body":{"injectables/PreferencesService.html":{}}}],["src/preferences/preferences.service.ts:6",{"_index":1212,"title":{},"body":{"injectables/PreferencesService.html":{}}}],["src/preferences/preferences.service.ts:9",{"_index":1215,"title":{},"body":{"injectables/PreferencesService.html":{}}}],["src/prisma/prisma.module.ts",{"_index":1222,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service",{"_index":762,"title":{},"body":{"injectables/ExercisesLibraryService.html":{}}}],["src/prisma/prisma.service.ts",{"_index":1225,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:17",{"_index":1231,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:21",{"_index":1230,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:6",{"_index":1229,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/reports/reports.controller.ts",{"_index":1239,"title":{},"body":{"controllers/ReportsController.html":{},"coverage.html":{}}}],["src/reports/reports.controller.ts:10",{"_index":1248,"title":{},"body":{"controllers/ReportsController.html":{}}}],["src/reports/reports.controller.ts:18",{"_index":1244,"title":{},"body":{"controllers/ReportsController.html":{}}}],["src/reports/reports.module.ts",{"_index":1258,"title":{},"body":{"modules/ReportsModule.html":{}}}],["src/reports/reports.service.ts",{"_index":1260,"title":{},"body":{"injectables/ReportsService.html":{},"coverage.html":{}}}],["src/reports/reports.service.ts:5",{"_index":1261,"title":{},"body":{"injectables/ReportsService.html":{}}}],["src/reports/reports.service.ts:55",{"_index":1263,"title":{},"body":{"injectables/ReportsService.html":{}}}],["src/reports/reports.service.ts:8",{"_index":1266,"title":{},"body":{"injectables/ReportsService.html":{}}}],["src/sports_exercises/dto/sports_exercices.dto.ts",{"_index":1354,"title":{},"body":{"classes/SportsExerciseDto.html":{},"coverage.html":{}}}],["src/sports_exercises/dto/sports_exercices.dto.ts:4",{"_index":1357,"title":{},"body":{"classes/SportsExerciseDto.html":{}}}],["src/sports_exercises/dto/sports_exercices.dto.ts:5",{"_index":1355,"title":{},"body":{"classes/SportsExerciseDto.html":{}}}],["src/sports_exercises/dto/sports_exercices.dto.ts:9",{"_index":1356,"title":{},"body":{"classes/SportsExerciseDto.html":{}}}],["src/sports_exercises/exceptions/not",{"_index":1620,"title":{},"body":{"classes/UserNotFoundException-1.html":{},"coverage.html":{}}}],["src/sports_exercises/sports_exercises.controller.ts",{"_index":1316,"title":{},"body":{"controllers/SportsExerciseController.html":{},"coverage.html":{}}}],["src/sports_exercises/sports_exercises.controller.ts:10",{"_index":1325,"title":{},"body":{"controllers/SportsExerciseController.html":{}}}],["src/sports_exercises/sports_exercises.controller.ts:15",{"_index":1327,"title":{},"body":{"controllers/SportsExerciseController.html":{}}}],["src/sports_exercises/sports_exercises.controller.ts:20",{"_index":1323,"title":{},"body":{"controllers/SportsExerciseController.html":{}}}],["src/sports_exercises/sports_exercises.controller.ts:25",{"_index":1334,"title":{},"body":{"controllers/SportsExerciseController.html":{}}}],["src/sports_exercises/sports_exercises.controller.ts:30",{"_index":1329,"title":{},"body":{"controllers/SportsExerciseController.html":{}}}],["src/sports_exercises/sports_exercises.controller.ts:35",{"_index":1332,"title":{},"body":{"controllers/SportsExerciseController.html":{}}}],["src/sports_exercises/sports_exercises.module.ts",{"_index":1360,"title":{},"body":{"modules/SportsExerciseModule.html":{}}}],["src/sports_exercises/sports_exercises.service.ts",{"_index":1362,"title":{},"body":{"injectables/SportsExerciseService.html":{},"coverage.html":{}}}],["src/sports_exercises/sports_exercises.service.ts:10",{"_index":1365,"title":{},"body":{"injectables/SportsExerciseService.html":{}}}],["src/sports_exercises/sports_exercises.service.ts:24",{"_index":1367,"title":{},"body":{"injectables/SportsExerciseService.html":{}}}],["src/sports_exercises/sports_exercises.service.ts:41",{"_index":1364,"title":{},"body":{"injectables/SportsExerciseService.html":{}}}],["src/sports_exercises/sports_exercises.service.ts:67",{"_index":1368,"title":{},"body":{"injectables/SportsExerciseService.html":{}}}],["src/sports_exercises/sports_exercises.service.ts:7",{"_index":1363,"title":{},"body":{"injectables/SportsExerciseService.html":{}}}],["src/sports_exercises/sports_exercises.service.ts:75",{"_index":1371,"title":{},"body":{"injectables/SportsExerciseService.html":{}}}],["src/sports_exercises/sports_exercises.service.ts:84",{"_index":1370,"title":{},"body":{"injectables/SportsExerciseService.html":{}}}],["src/steps/steps.controller.ts",{"_index":1385,"title":{},"body":{"controllers/StepsController.html":{},"coverage.html":{}}}],["src/steps/steps.controller.ts:9",{"_index":1387,"title":{},"body":{"controllers/StepsController.html":{}}}],["src/steps/steps.module.ts",{"_index":1394,"title":{},"body":{"modules/StepsModule.html":{}}}],["src/steps/steps.service.ts",{"_index":1396,"title":{},"body":{"injectables/StepsService.html":{},"coverage.html":{}}}],["src/steps/steps.service.ts:6",{"_index":1398,"title":{},"body":{"injectables/StepsService.html":{}}}],["src/steps/steps.service.ts:9",{"_index":1400,"title":{},"body":{"injectables/StepsService.html":{}}}],["src/user_infos/dto/edit.dto.ts",{"_index":698,"title":{},"body":{"classes/EditInfosDto.html":{},"coverage.html":{}}}],["src/user_infos/dto/edit.dto.ts:11",{"_index":707,"title":{},"body":{"classes/EditInfosDto.html":{}}}],["src/user_infos/dto/edit.dto.ts:15",{"_index":704,"title":{},"body":{"classes/EditInfosDto.html":{}}}],["src/user_infos/dto/edit.dto.ts:19",{"_index":711,"title":{},"body":{"classes/EditInfosDto.html":{}}}],["src/user_infos/dto/edit.dto.ts:23",{"_index":708,"title":{},"body":{"classes/EditInfosDto.html":{}}}],["src/user_infos/dto/edit.dto.ts:27",{"_index":712,"title":{},"body":{"classes/EditInfosDto.html":{}}}],["src/user_infos/dto/edit.dto.ts:30",{"_index":706,"title":{},"body":{"classes/EditInfosDto.html":{}}}],["src/user_infos/dto/edit.dto.ts:33",{"_index":710,"title":{},"body":{"classes/EditInfosDto.html":{}}}],["src/user_infos/dto/edit.dto.ts:7",{"_index":705,"title":{},"body":{"classes/EditInfosDto.html":{}}}],["src/user_infos/dto/user.dto.ts",{"_index":1598,"title":{},"body":{"classes/UserInfosDto.html":{},"coverage.html":{}}}],["src/user_infos/dto/user.dto.ts:11",{"_index":1603,"title":{},"body":{"classes/UserInfosDto.html":{}}}],["src/user_infos/dto/user.dto.ts:15",{"_index":1600,"title":{},"body":{"classes/UserInfosDto.html":{}}}],["src/user_infos/dto/user.dto.ts:19",{"_index":1606,"title":{},"body":{"classes/UserInfosDto.html":{}}}],["src/user_infos/dto/user.dto.ts:23",{"_index":1599,"title":{},"body":{"classes/UserInfosDto.html":{}}}],["src/user_infos/dto/user.dto.ts:27",{"_index":1604,"title":{},"body":{"classes/UserInfosDto.html":{}}}],["src/user_infos/dto/user.dto.ts:31",{"_index":1607,"title":{},"body":{"classes/UserInfosDto.html":{}}}],["src/user_infos/dto/user.dto.ts:34",{"_index":1602,"title":{},"body":{"classes/UserInfosDto.html":{}}}],["src/user_infos/dto/user.dto.ts:37",{"_index":1605,"title":{},"body":{"classes/UserInfosDto.html":{}}}],["src/user_infos/dto/user.dto.ts:7",{"_index":1601,"title":{},"body":{"classes/UserInfosDto.html":{}}}],["src/user_infos/exceptions/not",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserNotFoundException-2.html":{},"classes/UserWithoutSidekickException.html":{},"coverage.html":{}}}],["src/user_infos/user_infos.controller.ts",{"_index":1529,"title":{},"body":{"controllers/UserInfosController.html":{},"coverage.html":{}}}],["src/user_infos/user_infos.controller.ts:27",{"_index":1533,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["src/user_infos/user_infos.controller.ts:32",{"_index":1536,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["src/user_infos/user_infos.controller.ts:37",{"_index":1531,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["src/user_infos/user_infos.controller.ts:42",{"_index":1549,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["src/user_infos/user_infos.controller.ts:47",{"_index":1546,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["src/user_infos/user_infos.controller.ts:52",{"_index":1544,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["src/user_infos/user_infos.controller.ts:73",{"_index":1542,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["src/user_infos/user_infos.controller.ts:79",{"_index":1540,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["src/user_infos/user_infos.controller.ts:85",{"_index":1538,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["src/user_infos/user_infos.module.ts",{"_index":1612,"title":{},"body":{"modules/UserInfosModule.html":{}}}],["src/user_infos/user_infos.service.ts",{"_index":1437,"title":{},"body":{"injectables/UserInfoService.html":{},"coverage.html":{}}}],["src/user_infos/user_infos.service.ts:116",{"_index":1464,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["src/user_infos/user_infos.service.ts:157",{"_index":1456,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["src/user_infos/user_infos.service.ts:16",{"_index":1446,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["src/user_infos/user_infos.service.ts:185",{"_index":1454,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["src/user_infos/user_infos.service.ts:197",{"_index":1458,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["src/user_infos/user_infos.service.ts:219",{"_index":1463,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["src/user_infos/user_infos.service.ts:22",{"_index":1452,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["src/user_infos/user_infos.service.ts:239",{"_index":1461,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["src/user_infos/user_infos.service.ts:31",{"_index":1449,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["src/user_infos/user_infos.service.ts:49",{"_index":1451,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["src/user_infos/user_infos.service.ts:83",{"_index":1448,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["start:dev",{"_index":1691,"title":{},"body":{"index.html":{}}}],["started",{"_index":1680,"title":{"index.html":{},"license.html":{}},"body":{}}],["startswith",{"_index":989,"title":{},"body":{"injectables/MealsService.html":{},"injectables/SportsExerciseService.html":{}}}],["statements",{"_index":1628,"title":{},"body":{"coverage.html":{}}}],["step_data",{"_index":1403,"title":{},"body":{"injectables/StepsService.html":{}}}],["steps.controller",{"_index":1395,"title":{},"body":{"modules/StepsModule.html":{}}}],["steps.service",{"_index":1389,"title":{},"body":{"controllers/StepsController.html":{},"modules/StepsModule.html":{}}}],["steps/steps.module",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["stepscontroller",{"_index":1384,"title":{"controllers/StepsController.html":{}},"body":{"controllers/StepsController.html":{},"modules/StepsModule.html":{},"coverage.html":{}}}],["stepsmodule",{"_index":76,"title":{"modules/StepsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StepsModule.html":{},"modules.html":{},"overview.html":{}}}],["stepsservice",{"_index":1388,"title":{"injectables/StepsService.html":{}},"body":{"controllers/StepsController.html":{},"modules/StepsModule.html":{},"injectables/StepsService.html":{},"coverage.html":{},"overview.html":{}}}],["strategies/aws.strategy",{"_index":278,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":882,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthConfig.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/BetaUsersDto.html":{},"controllers/BugsBetaController.html":{},"classes/BugsBetaDto.html":{},"injectables/BugsBetaService.html":{},"injectables/CaloriesService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"classes/CreateExercisesLibraryDto.html":{},"classes/EditInfosDto.html":{},"controllers/ExercisesLibraryController.html":{},"controllers/FormController.html":{},"classes/FormDto.html":{},"injectables/FormService.html":{},"controllers/MealsController.html":{},"classes/MealsDto.html":{},"injectables/MealsService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"controllers/OpenffController.html":{},"injectables/OpenffService.html":{},"controllers/PlanningController.html":{},"injectables/PlanningService.html":{},"controllers/PreferencesController.html":{},"injectables/PreferencesService.html":{},"controllers/ReportsController.html":{},"injectables/ReportsService.html":{},"classes/Rooms.html":{},"controllers/SportsExerciseController.html":{},"classes/SportsExerciseDto.html":{},"injectables/SportsExerciseService.html":{},"injectables/StepsService.html":{},"classes/UpdateBugsBetaDto.html":{},"classes/UpdateExercisesLibraryDto.html":{},"classes/UpdateMealsDto.html":{},"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{},"classes/UserInfosDto.html":{},"classes/UserNotFoundException.html":{},"classes/UserNotFoundException-1.html":{},"classes/UserNotFoundException-2.html":{},"classes/UserWithoutSidekickException.html":{}}}],["subject",{"_index":1730,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":1723,"title":{},"body":{"license.html":{}}}],["subscribemessage",{"_index":596,"title":{},"body":{"classes/ChatGateway.html":{}}}],["subscribemessage(\"message",{"_index":605,"title":{},"body":{"classes/ChatGateway.html":{}}}],["subscribemessage(\"seen",{"_index":609,"title":{},"body":{"classes/ChatGateway.html":{}}}],["subscribemessage(\"writing",{"_index":607,"title":{},"body":{"classes/ChatGateway.html":{}}}],["subscribemessage('message",{"_index":587,"title":{},"body":{"classes/ChatGateway.html":{}}}],["subscribemessage('seen",{"_index":591,"title":{},"body":{"classes/ChatGateway.html":{}}}],["subscribemessage('writing",{"_index":594,"title":{},"body":{"classes/ChatGateway.html":{}}}],["substantial",{"_index":1737,"title":{},"body":{"license.html":{}}}],["successfully",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{}}}],["super",{"_index":143,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{}}}],["super('user",{"_index":1619,"title":{},"body":{"classes/UserNotFoundException.html":{},"classes/UserNotFoundException-1.html":{},"classes/UserNotFoundException-2.html":{},"classes/UserWithoutSidekickException.html":{}}}],["super.canactivate(context",{"_index":150,"title":{},"body":{"injectables/AtGuard.html":{}}}],["support",{"_index":1764,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1765,"title":{},"body":{"modules.html":{}}}],["séance",{"_index":1034,"title":{},"body":{"injectables/MessagesService.html":{}}}],["table",{"_index":1646,"title":{},"body":{"coverage.html":{}}}],["tables",{"_index":1692,"title":{},"body":{"index.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1645,"title":{},"body":{"coverage.html":{}}}],["this.$connect",{"_index":1236,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":1237,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this._fileservice.uploadpublicfile(file",{"_index":1526,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["this._prismaservice.betauser.create",{"_index":440,"title":{},"body":{"injectables/BetaUsersService.html":{}}}],["this._prismaservice.betauser.findunique",{"_index":437,"title":{},"body":{"injectables/BetaUsersService.html":{}}}],["this._prismaservice.bugsbeta.create",{"_index":526,"title":{},"body":{"injectables/BugsBetaService.html":{}}}],["this._prismaservice.bugsbeta.delete",{"_index":531,"title":{},"body":{"injectables/BugsBetaService.html":{}}}],["this._prismaservice.bugsbeta.findmany",{"_index":514,"title":{},"body":{"injectables/BugsBetaService.html":{}}}],["this._prismaservice.bugsbeta.findunique",{"_index":515,"title":{},"body":{"injectables/BugsBetaService.html":{}}}],["this._prismaservice.bugsbeta.update",{"_index":530,"title":{},"body":{"injectables/BugsBetaService.html":{}}}],["this._prismaservice.calories.findmany",{"_index":554,"title":{},"body":{"injectables/CaloriesService.html":{}}}],["this._prismaservice.meals.create",{"_index":986,"title":{},"body":{"injectables/MealsService.html":{}}}],["this._prismaservice.meals.delete",{"_index":983,"title":{},"body":{"injectables/MealsService.html":{}}}],["this._prismaservice.meals.findmany",{"_index":988,"title":{},"body":{"injectables/MealsService.html":{}}}],["this._prismaservice.meals.findunique",{"_index":982,"title":{},"body":{"injectables/MealsService.html":{}}}],["this._prismaservice.meals.update",{"_index":987,"title":{},"body":{"injectables/MealsService.html":{}}}],["this._prismaservice.planning.create",{"_index":1178,"title":{},"body":{"injectables/PlanningService.html":{}}}],["this._prismaservice.planning.delete",{"_index":1187,"title":{},"body":{"injectables/PlanningService.html":{}}}],["this._prismaservice.planning.deletemany",{"_index":1188,"title":{},"body":{"injectables/PlanningService.html":{}}}],["this._prismaservice.planning.findmany",{"_index":1190,"title":{},"body":{"injectables/PlanningService.html":{}}}],["this._prismaservice.planning.update",{"_index":1184,"title":{},"body":{"injectables/PlanningService.html":{}}}],["this._prismaservice.sports_exercices.create",{"_index":1379,"title":{},"body":{"injectables/SportsExerciseService.html":{}}}],["this._prismaservice.sports_exercices.delete",{"_index":1382,"title":{},"body":{"injectables/SportsExerciseService.html":{}}}],["this._prismaservice.sports_exercices.findfirst",{"_index":1376,"title":{},"body":{"injectables/SportsExerciseService.html":{}}}],["this._prismaservice.sports_exercices.findmany",{"_index":1375,"title":{},"body":{"injectables/SportsExerciseService.html":{}}}],["this._prismaservice.sports_exercices.findunique",{"_index":1373,"title":{},"body":{"injectables/SportsExerciseService.html":{}}}],["this._prismaservice.sports_exercices.update",{"_index":1383,"title":{},"body":{"injectables/SportsExerciseService.html":{}}}],["this._prismaservice.steps.findmany",{"_index":1404,"title":{},"body":{"injectables/StepsService.html":{}}}],["this._prismaservice.user.findunique",{"_index":521,"title":{},"body":{"injectables/BugsBetaService.html":{},"injectables/CaloriesService.html":{},"injectables/MealsService.html":{},"injectables/PlanningService.html":{},"injectables/SportsExerciseService.html":{},"injectables/StepsService.html":{},"injectables/UserInfoService.html":{}}}],["this._prismaservice.userdata.create",{"_index":1503,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["this._prismaservice.userdata.findfirst",{"_index":1501,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["this._prismaservice.userdata.findmany",{"_index":1471,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["this._prismaservice.userdata.findunique",{"_index":551,"title":{},"body":{"injectables/CaloriesService.html":{},"injectables/StepsService.html":{},"injectables/UserInfoService.html":{}}}],["this._prismaservice.userdata.update",{"_index":1516,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["this.appservice.gethello",{"_index":55,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authconfig.clientid",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authconfig.userpoolid",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authservice.delete(dto",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.forgotpassword(email",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(dto",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logout(email",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refresh(rt",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(dto",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.resetpassword(dto",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.betausersservice.add(dto",{"_index":409,"title":{},"body":{"controllers/BetaUsersController.html":{}}}],["this.bugsbetaservice.add(dto",{"_index":473,"title":{},"body":{"controllers/BugsBetaController.html":{}}}],["this.bugsbetaservice.delete(id",{"_index":480,"title":{},"body":{"controllers/BugsBetaController.html":{}}}],["this.bugsbetaservice.getall",{"_index":481,"title":{},"body":{"controllers/BugsBetaController.html":{}}}],["this.bugsbetaservice.getbyid(id",{"_index":487,"title":{},"body":{"controllers/BugsBetaController.html":{}}}],["this.bugsbetaservice.getbypage(page",{"_index":484,"title":{},"body":{"controllers/BugsBetaController.html":{}}}],["this.bugsbetaservice.update(dto",{"_index":477,"title":{},"body":{"controllers/BugsBetaController.html":{}}}],["this.caloriesservice.getcaloriesbyid(req.user.email",{"_index":540,"title":{},"body":{"controllers/CaloriesController.html":{}}}],["this.chatservice.getall(email",{"_index":568,"title":{},"body":{"controllers/ChatController.html":{}}}],["this.chatservice.handleconnection(socket",{"_index":603,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.chatservice.handledisconnect(socket",{"_index":604,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.chatservice.handlemessage(client",{"_index":606,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.chatservice.handleseen(client",{"_index":610,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.chatservice.handlewriting(client",{"_index":608,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.configservice.get(\"aws_access_key_id",{"_index":812,"title":{},"body":{"injectables/FileService.html":{}}}],["this.configservice.get(\"aws_bucket_name",{"_index":819,"title":{},"body":{"injectables/FileService.html":{}}}],["this.configservice.get(\"aws_region",{"_index":810,"title":{},"body":{"injectables/FileService.html":{}}}],["this.configservice.get(\"aws_secret_access_key",{"_index":814,"title":{},"body":{"injectables/FileService.html":{}}}],["this.createuser(dto",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.deleteuser(dto.email",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.exerciseslibraryservice.create(createexerciseslibrarydto",{"_index":743,"title":{},"body":{"controllers/ExercisesLibraryController.html":{}}}],["this.exerciseslibraryservice.findall",{"_index":744,"title":{},"body":{"controllers/ExercisesLibraryController.html":{}}}],["this.exerciseslibraryservice.findone(+id",{"_index":746,"title":{},"body":{"controllers/ExercisesLibraryController.html":{}}}],["this.exerciseslibraryservice.remove(+id",{"_index":750,"title":{},"body":{"controllers/ExercisesLibraryController.html":{}}}],["this.exerciseslibraryservice.update(+id",{"_index":748,"title":{},"body":{"controllers/ExercisesLibraryController.html":{}}}],["this.fileservice",{"_index":786,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadpublicfile(file",{"_index":791,"title":{},"body":{"controllers/FileController.html":{}}}],["this.formservice.saveformdatas(dto",{"_index":840,"title":{},"body":{"controllers/FormController.html":{}}}],["this.getroom(roomid",{"_index":1309,"title":{},"body":{"classes/Rooms.html":{}}}],["this.mealsservice.add(dto",{"_index":936,"title":{},"body":{"controllers/MealsController.html":{}}}],["this.mealsservice.delete(id",{"_index":946,"title":{},"body":{"controllers/MealsController.html":{}}}],["this.mealsservice.find(req.user.email",{"_index":950,"title":{},"body":{"controllers/MealsController.html":{}}}],["this.mealsservice.findbyday(req.user.email",{"_index":940,"title":{},"body":{"controllers/MealsController.html":{}}}],["this.mealsservice.findone(id",{"_index":942,"title":{},"body":{"controllers/MealsController.html":{}}}],["this.mealsservice.update(dto",{"_index":944,"title":{},"body":{"controllers/MealsController.html":{}}}],["this.messagesuserservice.getmessages(query.id",{"_index":1006,"title":{},"body":{"controllers/MessagesController.html":{}}}],["this.openffservice.findall(request",{"_index":1057,"title":{},"body":{"controllers/OpenffController.html":{}}}],["this.planningservice.deleteevent(id",{"_index":1157,"title":{},"body":{"controllers/PlanningController.html":{}}}],["this.planningservice.deleteplanningbyday(email",{"_index":1143,"title":{},"body":{"controllers/PlanningController.html":{}}}],["this.planningservice.getplanningbyday(email",{"_index":1141,"title":{},"body":{"controllers/PlanningController.html":{}}}],["this.planningservice.setexercise(email",{"_index":1148,"title":{},"body":{"controllers/PlanningController.html":{}}}],["this.planningservice.setmeal(email",{"_index":1153,"title":{},"body":{"controllers/PlanningController.html":{}}}],["this.planningservice.updateexercise(req",{"_index":1150,"title":{},"body":{"controllers/PlanningController.html":{}}}],["this.planningservice.updatemeal(req",{"_index":1155,"title":{},"body":{"controllers/PlanningController.html":{}}}],["this.preferencesservice.get(email",{"_index":1206,"title":{},"body":{"controllers/PreferencesController.html":{}}}],["this.preferencesservice.update(dto",{"_index":1204,"title":{},"body":{"controllers/PreferencesController.html":{}}}],["this.prisma.exercises_library.create",{"_index":764,"title":{},"body":{"injectables/ExercisesLibraryService.html":{}}}],["this.prisma.exercises_library.delete",{"_index":769,"title":{},"body":{"injectables/ExercisesLibraryService.html":{}}}],["this.prisma.exercises_library.findmany",{"_index":766,"title":{},"body":{"injectables/ExercisesLibraryService.html":{}}}],["this.prisma.exercises_library.findunique",{"_index":767,"title":{},"body":{"injectables/ExercisesLibraryService.html":{}}}],["this.prisma.exercises_library.update",{"_index":768,"title":{},"body":{"injectables/ExercisesLibraryService.html":{}}}],["this.prisma.preferences.create",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.reports.create",{"_index":1276,"title":{},"body":{"injectables/ReportsService.html":{}}}],["this.prisma.user",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.user.findunique",{"_index":1267,"title":{},"body":{"injectables/ReportsService.html":{}}}],["this.prisma.userdata.create",{"_index":868,"title":{},"body":{"injectables/FormService.html":{}}}],["this.prisma.userdata.findunique",{"_index":1269,"title":{},"body":{"injectables/ReportsService.html":{}}}],["this.prisma.userdata.update",{"_index":1274,"title":{},"body":{"injectables/ReportsService.html":{}}}],["this.prismaservice.message.create",{"_index":661,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.prismaservice.message.findmany",{"_index":680,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.prismaservice.message.updatemany",{"_index":673,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.prismaservice.openfoodfacts.findmany",{"_index":1072,"title":{},"body":{"injectables/OpenffService.html":{}}}],["this.prismaservice.preferences.updatemany",{"_index":1216,"title":{},"body":{"injectables/PreferencesService.html":{}}}],["this.prismaservice.user.findunique",{"_index":677,"title":{},"body":{"injectables/ChatService.html":{},"injectables/PreferencesService.html":{}}}],["this.reflector.getallandoverride('ispublic",{"_index":147,"title":{},"body":{"injectables/AtGuard.html":{}}}],["this.reportsservice.change(currentuser",{"_index":1255,"title":{},"body":{"controllers/ReportsController.html":{}}}],["this.reportsservice.create(currentuser",{"_index":1253,"title":{},"body":{"controllers/ReportsController.html":{}}}],["this.rooms",{"_index":1305,"title":{},"body":{"classes/Rooms.html":{}}}],["this.rooms.addroom(room",{"_index":644,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.rooms.addusertoroom(roomname",{"_index":645,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.rooms.filter((room",{"_index":1306,"title":{},"body":{"classes/Rooms.html":{}}}],["this.rooms.find((room",{"_index":1308,"title":{},"body":{"classes/Rooms.html":{}}}],["this.rooms.finduserbysocketid(socket.id",{"_index":651,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.rooms.getroom(roomname",{"_index":643,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.rooms.getroom(user.userid)?.users.length",{"_index":654,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.rooms.push(room",{"_index":1304,"title":{},"body":{"classes/Rooms.html":{}}}],["this.rooms.removeroom(user.userid",{"_index":656,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.rooms.removeuserfromroom(user.userid",{"_index":653,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.s3",{"_index":809,"title":{},"body":{"injectables/FileService.html":{}}}],["this.s3.putobject",{"_index":817,"title":{},"body":{"injectables/FileService.html":{}}}],["this.sportsexercicseservice.add(dto",{"_index":1346,"title":{},"body":{"controllers/SportsExerciseController.html":{}}}],["this.sportsexercicseservice.find(id",{"_index":1341,"title":{},"body":{"controllers/SportsExerciseController.html":{}}}],["this.sportsexercicseservice.findall(req.user.email",{"_index":1343,"title":{},"body":{"controllers/SportsExerciseController.html":{}}}],["this.sportsexercicseservice.remove(id",{"_index":1350,"title":{},"body":{"controllers/SportsExerciseController.html":{}}}],["this.sportsexercicseservice.search(req.user.email",{"_index":1353,"title":{},"body":{"controllers/SportsExerciseController.html":{}}}],["this.sportsexercicseservice.update(id",{"_index":1348,"title":{},"body":{"controllers/SportsExerciseController.html":{}}}],["this.stepsservice.getstepsbyid(req.user.email",{"_index":1391,"title":{},"body":{"controllers/StepsController.html":{}}}],["this.userinfoservice.add(dto",{"_index":1560,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["this.userinfoservice.find(req.user.email",{"_index":1556,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["this.userinfoservice.findsidekick(req.user.email",{"_index":1559,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["this.userinfoservice.finduserswithoutsidekick",{"_index":1597,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["this.userinfoservice.linkusers(req",{"_index":1595,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["this.userinfoservice.setavatar(email",{"_index":1592,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["this.userinfoservice.setgoal(email",{"_index":1571,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["this.userinfoservice.setsports(email",{"_index":1567,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["this.userinfoservice.update(dto",{"_index":1563,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["this.userinfosservice.find(email",{"_index":679,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.userinfosservice.getuserfromid(userid",{"_index":637,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.userpool",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userpool.signup(email",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BetaUsersService.html":{},"injectables/BugsBetaService.html":{},"injectables/CaloriesService.html":{},"injectables/FormService.html":{},"injectables/MealsService.html":{},"injectables/PlanningService.html":{},"injectables/ReportsService.html":{},"injectables/SportsExerciseService.html":{},"injectables/StepsService.html":{},"injectables/UserInfoService.html":{}}}],["thumbnail",{"_index":686,"title":{},"body":{"classes/CreateExercisesLibraryDto.html":{},"injectables/ExercisesLibraryService.html":{}}}],["title",{"_index":490,"title":{},"body":{"classes/BugsBetaDto.html":{},"classes/UpdateBugsBetaDto.html":{}}}],["tokens",{"_index":1781,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["tort",{"_index":1758,"title":{},"body":{"license.html":{}}}],["transformer",{"_index":1657,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"injectables/ChatService.html":{},"injectables/JwtStrategy.html":{},"injectables/MessagesService.html":{},"injectables/PreferencesService.html":{},"controllers/UserInfosController.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ChatService.html":{},"injectables/FileService.html":{},"injectables/OpenffService.html":{}}}],["tu",{"_index":1024,"title":{},"body":{"injectables/MessagesService.html":{}}}],["type",{"_index":133,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AuthConfig.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"controllers/BetaUsersController.html":{},"classes/BetaUsersDto.html":{},"injectables/BetaUsersService.html":{},"controllers/BugsBetaController.html":{},"classes/BugsBetaDto.html":{},"injectables/BugsBetaService.html":{},"controllers/CaloriesController.html":{},"injectables/CaloriesService.html":{},"controllers/ChatController.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CreateExercisesLibraryDto.html":{},"classes/EditInfosDto.html":{},"controllers/ExercisesLibraryController.html":{},"injectables/ExercisesLibraryService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"controllers/FormController.html":{},"classes/FormDto.html":{},"injectables/FormService.html":{},"injectables/JwtStrategy.html":{},"controllers/MealsController.html":{},"classes/MealsDto.html":{},"injectables/MealsService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"controllers/OpenffController.html":{},"injectables/OpenffService.html":{},"controllers/PlanningController.html":{},"injectables/PlanningService.html":{},"controllers/PreferencesController.html":{},"injectables/PreferencesService.html":{},"injectables/PrismaService.html":{},"controllers/ReportsController.html":{},"injectables/ReportsService.html":{},"classes/Rooms.html":{},"controllers/SportsExerciseController.html":{},"classes/SportsExerciseDto.html":{},"injectables/SportsExerciseService.html":{},"controllers/StepsController.html":{},"injectables/StepsService.html":{},"classes/UpdateBugsBetaDto.html":{},"classes/UpdateExercisesLibraryDto.html":{},"classes/UpdateMealsDto.html":{},"classes/UpdatePreferenceDto.html":{},"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{},"classes/UserInfosDto.html":{},"classes/UserNotFoundException.html":{},"classes/UserNotFoundException-1.html":{},"classes/UserNotFoundException-2.html":{},"classes/UserWithoutSidekickException.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":1778,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":1414,"title":{},"body":{"classes/UpdateExercisesLibraryDto.html":{},"classes/UpdateOpenffDto.html":{},"controllers/UserInfosController.html":{},"dependencies.html":{}}}],["unauthorizedexception",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["unauthorizedexception(\"invalid",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{}}}],["und3f1nd",{"_index":1076,"title":{},"body":{"injectables/OpenffService.html":{}}}],["und3f1ndbrand",{"_index":1079,"title":{},"body":{"injectables/OpenffService.html":{}}}],["und3f1ndscore",{"_index":1107,"title":{},"body":{"injectables/OpenffService.html":{}}}],["undefined",{"_index":1788,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unknown",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BetaUsersService.html":{},"injectables/BugsBetaService.html":{},"injectables/CaloriesService.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"injectables/ExercisesLibraryService.html":{},"controllers/FileController.html":{},"injectables/FileService.html":{},"controllers/FormController.html":{},"injectables/JwtStrategy.html":{},"injectables/MealsService.html":{},"injectables/MessagesService.html":{},"injectables/OpenffService.html":{},"controllers/PlanningController.html":{},"injectables/PlanningService.html":{},"injectables/PreferencesService.html":{},"controllers/ReportsController.html":{},"injectables/ReportsService.html":{},"injectables/SportsExerciseService.html":{},"injectables/StepsService.html":{},"injectables/UserInfoService.html":{}}}],["unlicensed",{"_index":1776,"title":{},"body":{"properties.html":{}}}],["update",{"_index":499,"title":{},"body":{"injectables/BugsBetaService.html":{},"controllers/ExercisesLibraryController.html":{},"injectables/ExercisesLibraryService.html":{},"injectables/MealsService.html":{},"controllers/PreferencesController.html":{},"injectables/PreferencesService.html":{},"controllers/SportsExerciseController.html":{},"injectables/SportsExerciseService.html":{},"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{},"index.html":{}}}],["update(@body",{"_index":1203,"title":{},"body":{"controllers/PreferencesController.html":{}}}],["update(@param('id",{"_index":747,"title":{},"body":{"controllers/ExercisesLibraryController.html":{},"controllers/SportsExerciseController.html":{}}}],["update(@request",{"_index":1562,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["update(bugbeta",{"_index":511,"title":{},"body":{"injectables/BugsBetaService.html":{}}}],["update(datas",{"_index":979,"title":{},"body":{"injectables/MealsService.html":{}}}],["update(dto",{"_index":1196,"title":{},"body":{"controllers/PreferencesController.html":{},"injectables/UserInfoService.html":{}}}],["update(id",{"_index":730,"title":{},"body":{"controllers/ExercisesLibraryController.html":{},"injectables/ExercisesLibraryService.html":{},"controllers/SportsExerciseController.html":{},"injectables/SportsExerciseService.html":{}}}],["update(req",{"_index":1547,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["update(updatepreferencedto",{"_index":1214,"title":{},"body":{"injectables/PreferencesService.html":{}}}],["updatebugsbetadto",{"_index":459,"title":{"classes/UpdateBugsBetaDto.html":{}},"body":{"controllers/BugsBetaController.html":{},"injectables/BugsBetaService.html":{},"classes/UpdateBugsBetaDto.html":{},"coverage.html":{}}}],["updateexercise",{"_index":1164,"title":{},"body":{"injectables/PlanningService.html":{}}}],["updateexercise(req",{"_index":1172,"title":{},"body":{"injectables/PlanningService.html":{}}}],["updateexerciseslibrarydto",{"_index":731,"title":{"classes/UpdateExercisesLibraryDto.html":{}},"body":{"controllers/ExercisesLibraryController.html":{},"injectables/ExercisesLibraryService.html":{},"classes/UpdateExercisesLibraryDto.html":{},"coverage.html":{}}}],["updatemeal",{"_index":1116,"title":{},"body":{"controllers/PlanningController.html":{},"injectables/PlanningService.html":{}}}],["updatemeal(@param('id",{"_index":1154,"title":{},"body":{"controllers/PlanningController.html":{}}}],["updatemeal(id",{"_index":1130,"title":{},"body":{"controllers/PlanningController.html":{}}}],["updatemeal(req",{"_index":1174,"title":{},"body":{"injectables/PlanningService.html":{}}}],["updatemealsdto",{"_index":924,"title":{"classes/UpdateMealsDto.html":{}},"body":{"controllers/MealsController.html":{},"injectables/MealsService.html":{},"classes/UpdateMealsDto.html":{},"coverage.html":{}}}],["updateopenffdto",{"_index":1423,"title":{"classes/UpdateOpenffDto.html":{}},"body":{"classes/UpdateOpenffDto.html":{},"coverage.html":{}}}],["updatepreferencedto",{"_index":1197,"title":{"classes/UpdatePreferenceDto.html":{}},"body":{"controllers/PreferencesController.html":{},"injectables/PreferencesService.html":{},"classes/UpdatePreferenceDto.html":{},"coverage.html":{}}}],["updatesportexercise",{"_index":1117,"title":{},"body":{"controllers/PlanningController.html":{}}}],["updatesportexercise(@param('id",{"_index":1149,"title":{},"body":{"controllers/PlanningController.html":{}}}],["updatesportexercise(id",{"_index":1133,"title":{},"body":{"controllers/PlanningController.html":{}}}],["upgenerate",{"_index":1684,"title":{},"body":{"index.html":{}}}],["uploadedfile",{"_index":778,"title":{},"body":{"controllers/FileController.html":{},"controllers/UserInfosController.html":{}}}],["uploadfile",{"_index":772,"title":{},"body":{"controllers/FileController.html":{}}}],["uploadfile(@uploadedfile(new",{"_index":789,"title":{},"body":{"controllers/FileController.html":{}}}],["uploadfile(file",{"_index":773,"title":{},"body":{"controllers/FileController.html":{}}}],["uploadpublicfile",{"_index":799,"title":{},"body":{"injectables/FileService.html":{}}}],["uploadpublicfile(file",{"_index":803,"title":{},"body":{"injectables/FileService.html":{}}}],["url",{"_index":1234,"title":{},"body":{"injectables/PrismaService.html":{}}}],["use",{"_index":1719,"title":{},"body":{"license.html":{}}}],["useclass",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["useinterceptors",{"_index":779,"title":{},"body":{"controllers/FileController.html":{},"controllers/UserInfosController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":788,"title":{},"body":{"controllers/FileController.html":{},"controllers/UserInfosController.html":{}}}],["user",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BetaUsersService.html":{},"injectables/BugsBetaService.html":{},"injectables/CaloriesService.html":{},"injectables/ChatService.html":{},"injectables/MealsService.html":{},"injectables/PlanningService.html":{},"injectables/PreferencesService.html":{},"injectables/ReportsService.html":{},"classes/Rooms.html":{},"injectables/SportsExerciseService.html":{},"injectables/StepsService.html":{},"injectables/UserInfoService.html":{}}}],["user.authenticateuser(authenticationdetails",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.confirmpassword(verificationcode",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.deleteuser((err",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.forgotpassword",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.globalsignout",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BugsBetaService.html":{},"injectables/ChatService.html":{},"injectables/MealsService.html":{},"injectables/PlanningService.html":{},"injectables/PreferencesService.html":{},"injectables/ReportsService.html":{},"injectables/SportsExerciseService.html":{},"injectables/UserInfoService.html":{}}}],["user.preferences",{"_index":1218,"title":{},"body":{"injectables/PreferencesService.html":{}}}],["user.refreshsession(refreshtoken",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.sidekick_id",{"_index":639,"title":{},"body":{"injectables/ChatService.html":{}}}],["user.sidekickid",{"_index":664,"title":{},"body":{"injectables/ChatService.html":{}}}],["user.socketid",{"_index":1314,"title":{},"body":{"classes/Rooms.html":{}}}],["user.userid",{"_index":663,"title":{},"body":{"injectables/ChatService.html":{},"classes/Rooms.html":{}}}],["user1",{"_index":1519,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["user1.sidekick_id",{"_index":1521,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["user2",{"_index":1520,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["user2.sidekick_id",{"_index":1523,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["user_infos",{"_index":1530,"title":{},"body":{"controllers/UserInfosController.html":{}}}],["user_infos.controller",{"_index":1613,"title":{},"body":{"modules/UserInfosModule.html":{}}}],["user_infos.service",{"_index":1552,"title":{},"body":{"controllers/UserInfosController.html":{},"modules/UserInfosModule.html":{}}}],["user_infos/exceptions/not",{"_index":513,"title":{},"body":{"injectables/BugsBetaService.html":{},"injectables/CaloriesService.html":{},"injectables/PlanningService.html":{},"injectables/StepsService.html":{}}}],["user_infos/user_infos.module",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{}}}],["user_infos/user_infos.service",{"_index":633,"title":{},"body":{"injectables/ChatService.html":{}}}],["userattributes",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{}}}],["usercalories",{"_index":550,"title":{},"body":{"injectables/CaloriesService.html":{}}}],["usercalories.id",{"_index":552,"title":{},"body":{"injectables/CaloriesService.html":{}}}],["userdata",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdatas",{"_index":1472,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["userdatas.sidekick_id",{"_index":1474,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["userdatas[\"email",{"_index":1473,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["useremail",{"_index":502,"title":{},"body":{"injectables/BugsBetaService.html":{},"injectables/CaloriesService.html":{},"injectables/MealsService.html":{},"injectables/SportsExerciseService.html":{},"injectables/StepsService.html":{},"injectables/UserInfoService.html":{}}}],["userid",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{},"classes/BugsBetaDto.html":{},"injectables/CaloriesService.html":{},"injectables/ChatService.html":{},"controllers/FormController.html":{},"classes/FormDto.html":{},"injectables/FormService.html":{},"injectables/JwtStrategy.html":{},"classes/MealsDto.html":{},"injectables/MealsService.html":{},"injectables/MessagesService.html":{},"injectables/PlanningService.html":{},"injectables/PreferencesService.html":{},"injectables/ReportsService.html":{},"classes/Rooms.html":{},"classes/SportsExerciseDto.html":{},"injectables/SportsExerciseService.html":{},"injectables/StepsService.html":{},"classes/UpdateMealsDto.html":{},"injectables/UserInfoService.html":{}}}],["userinfo",{"_index":1268,"title":{},"body":{"injectables/ReportsService.html":{}}}],["userinfo.sidekick_id",{"_index":1272,"title":{},"body":{"injectables/ReportsService.html":{}}}],["userinfos",{"_index":1500,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["userinfoscontroller",{"_index":1528,"title":{"controllers/UserInfosController.html":{}},"body":{"controllers/UserInfosController.html":{},"modules/UserInfosModule.html":{},"coverage.html":{}}}],["userinfosdto",{"_index":1447,"title":{"classes/UserInfosDto.html":{}},"body":{"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{},"classes/UserInfosDto.html":{},"coverage.html":{}}}],["userinfoservice",{"_index":620,"title":{"injectables/UserInfoService.html":{}},"body":{"injectables/ChatService.html":{},"injectables/UserInfoService.html":{},"controllers/UserInfosController.html":{},"modules/UserInfosModule.html":{},"coverage.html":{},"overview.html":{}}}],["userinfosmodule",{"_index":77,"title":{"modules/UserInfosModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"modules/UserInfosModule.html":{},"modules.html":{},"overview.html":{}}}],["userinfosservice",{"_index":622,"title":{},"body":{"injectables/ChatService.html":{}}}],["username",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{},"classes/EditInfosDto.html":{},"classes/FormDto.html":{},"injectables/UserInfoService.html":{},"classes/UserInfosDto.html":{}}}],["usernotfoundexception",{"_index":222,"title":{"classes/UserNotFoundException.html":{},"classes/UserNotFoundException-1.html":{},"classes/UserNotFoundException-2.html":{}},"body":{"controllers/AuthController.html":{},"injectables/BugsBetaService.html":{},"injectables/CaloriesService.html":{},"injectables/MealsService.html":{},"injectables/PlanningService.html":{},"injectables/SportsExerciseService.html":{},"injectables/StepsService.html":{},"injectables/UserInfoService.html":{},"classes/UserNotFoundException.html":{},"classes/UserNotFoundException-1.html":{},"classes/UserNotFoundException-2.html":{},"classes/UserWithoutSidekickException.html":{},"coverage.html":{}}}],["usernotfoundexception(email",{"_index":1177,"title":{},"body":{"injectables/PlanningService.html":{},"injectables/SportsExerciseService.html":{},"injectables/UserInfoService.html":{}}}],["usernotfoundexception(id",{"_index":1525,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["usernotfoundexception(useremail",{"_index":522,"title":{},"body":{"injectables/BugsBetaService.html":{},"injectables/CaloriesService.html":{},"injectables/MealsService.html":{},"injectables/SportsExerciseService.html":{},"injectables/StepsService.html":{},"injectables/UserInfoService.html":{}}}],["userpool",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["userpoolid",{"_index":159,"title":{},"body":{"injectables/AuthConfig.html":{},"injectables/AuthService.html":{}}}],["users",{"_index":399,"title":{},"body":{"controllers/BetaUsersController.html":{},"injectables/ChatService.html":{},"classes/Rooms.html":{}}}],["usersdatas",{"_index":1470,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["usersteps",{"_index":1401,"title":{},"body":{"injectables/StepsService.html":{}}}],["usersteps.id",{"_index":1402,"title":{},"body":{"injectables/StepsService.html":{}}}],["userwithoutsidekickexception",{"_index":1466,"title":{"classes/UserWithoutSidekickException.html":{}},"body":{"injectables/UserInfoService.html":{},"classes/UserNotFoundException-2.html":{},"classes/UserWithoutSidekickException.html":{},"coverage.html":{}}}],["userwithoutsidekickexception(user.id",{"_index":1475,"title":{},"body":{"injectables/UserInfoService.html":{}}}],["uuid",{"_index":808,"title":{},"body":{"injectables/FileService.html":{},"dependencies.html":{}}}],["uuid()}.${file.originalname.split(\".\").pop",{"_index":816,"title":{},"body":{"injectables/FileService.html":{}}}],["v3zzxp",{"_index":1103,"title":{},"body":{"injectables/OpenffService.html":{}}}],["v4",{"_index":807,"title":{},"body":{"injectables/FileService.html":{}}}],["validate",{"_index":876,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":879,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validator",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BetaUsersDto.html":{},"classes/BugsBetaDto.html":{},"classes/CreateExercisesLibraryDto.html":{},"classes/EditInfosDto.html":{},"classes/FormDto.html":{},"classes/MealsDto.html":{},"classes/SportsExerciseDto.html":{},"classes/UpdateBugsBetaDto.html":{},"classes/UpdateExercisesLibraryDto.html":{},"classes/UpdateMealsDto.html":{},"classes/UpdatePreferenceDto.html":{},"classes/UserInfosDto.html":{},"dependencies.html":{}}}],["validators",{"_index":790,"title":{},"body":{"controllers/FileController.html":{}}}],["value",{"_index":161,"title":{},"body":{"injectables/AuthConfig.html":{},"injectables/ChatService.html":{},"classes/Rooms.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":435,"title":{},"body":{"injectables/BetaUsersService.html":{},"injectables/BugsBetaService.html":{},"injectables/MealsService.html":{},"injectables/UserInfoService.html":{}}}],["variable",{"_index":1640,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1784,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vas",{"_index":1023,"title":{},"body":{"injectables/MessagesService.html":{}}}],["vector",{"_index":1095,"title":{},"body":{"injectables/OpenffService.html":{}}}],["verificationcode",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["version",{"_index":1774,"title":{},"body":{"properties.html":{}}}],["veux",{"_index":1035,"title":{},"body":{"injectables/MessagesService.html":{}}}],["video",{"_index":687,"title":{},"body":{"classes/CreateExercisesLibraryDto.html":{},"injectables/ExercisesLibraryService.html":{}}}],["void",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChatService.html":{},"classes/Rooms.html":{}}}],["warranties",{"_index":1743,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1739,"title":{},"body":{"license.html":{}}}],["website",{"_index":1098,"title":{},"body":{"injectables/OpenffService.html":{}}}],["websocketgateway",{"_index":597,"title":{},"body":{"classes/ChatGateway.html":{}}}],["websocketserver",{"_index":579,"title":{},"body":{"classes/ChatGateway.html":{}}}],["weight",{"_index":702,"title":{},"body":{"classes/EditInfosDto.html":{},"classes/FormDto.html":{},"classes/UserInfosDto.html":{}}}],["whether",{"_index":1755,"title":{},"body":{"license.html":{}}}],["without",{"_index":1714,"title":{},"body":{"license.html":{}}}],["works",{"_index":652,"title":{},"body":{"injectables/ChatService.html":{}}}],["world",{"_index":124,"title":{},"body":{"injectables/AppService.html":{}}}],["writing",{"_index":670,"title":{},"body":{"injectables/ChatService.html":{}}}],["zoom",{"_index":34,"title":{},"body":{"modules/AlgoMatchingModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BetaUsersModule.html":{},"modules/CaloriesModule.html":{},"modules/ChatModule.html":{},"modules/ExercisesLibraryModule.html":{},"modules/FileModule.html":{},"modules/FormModule.html":{},"modules/MealsModule.html":{},"modules/MessagesModule.html":{},"modules/OpenffModule.html":{},"modules/PlanningModule.html":{},"modules/PreferencesModule.html":{},"modules/PrismaModule.html":{},"modules/ReportsModule.html":{},"modules/SportsExerciseModule.html":{},"modules/StepsModule.html":{},"modules/UserInfosModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AlgoMatchingController.html":{"url":"controllers/AlgoMatchingController.html","title":"controller - AlgoMatchingController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AlgoMatchingController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/algo-matching/algo-matching.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                algo-matching\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AlgoMatchingService } from './algo-matching.service';\n\n@Controller('algo-matching')\nexport class AlgoMatchingController {\n  constructor(private readonly algoMatchingService: AlgoMatchingService) {\n\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AlgoMatchingModule.html":{"url":"modules/AlgoMatchingModule.html","title":"module - AlgoMatchingModule","body":"\n                   \n\n\n\n\n    Modules\n    AlgoMatchingModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AlgoMatchingModule\n\n\n\ncluster_AlgoMatchingModule_providers\n\n\n\n\nAlgoMatchingService\n\nAlgoMatchingService\n\n\n\nAlgoMatchingModule\n\nAlgoMatchingModule\n\nAlgoMatchingModule -->\n\nAlgoMatchingService->AlgoMatchingModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/algo-matching/algo-matching.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AlgoMatchingService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AlgoMatchingController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AlgoMatchingService } from './algo-matching.service';\nimport { AlgoMatchingController } from './algo-matching.controller';\n\n@Module({\n  controllers: [AlgoMatchingController],\n  providers: [AlgoMatchingService]\n})\nexport class AlgoMatchingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AlgoMatchingService.html":{"url":"injectables/AlgoMatchingService.html","title":"injectable - AlgoMatchingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AlgoMatchingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/algo-matching/algo-matching.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AlgoMatchingService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nBetaUsersModule\n\nBetaUsersModule\n\nAppModule -->\n\nBetaUsersModule->AppModule\n\n\n\n\n\nBugsBetaModule\n\nBugsBetaModule\n\nAppModule -->\n\nBugsBetaModule->AppModule\n\n\n\n\n\nCaloriesModule\n\nCaloriesModule\n\nAppModule -->\n\nCaloriesModule->AppModule\n\n\n\n\n\nChatModule\n\nChatModule\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nExercisesLibraryModule\n\nExercisesLibraryModule\n\nAppModule -->\n\nExercisesLibraryModule->AppModule\n\n\n\n\n\nFileModule\n\nFileModule\n\nAppModule -->\n\nFileModule->AppModule\n\n\n\n\n\nFormModule\n\nFormModule\n\nAppModule -->\n\nFormModule->AppModule\n\n\n\n\n\nMealsModule\n\nMealsModule\n\nAppModule -->\n\nMealsModule->AppModule\n\n\n\n\n\nMessagesModule\n\nMessagesModule\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\n\n\nOpenffModule\n\nOpenffModule\n\nAppModule -->\n\nOpenffModule->AppModule\n\n\n\n\n\nPlanningModule\n\nPlanningModule\n\nAppModule -->\n\nPlanningModule->AppModule\n\n\n\n\n\nPreferencesModule\n\nPreferencesModule\n\nAppModule -->\n\nPreferencesModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nReportsModule\n\nReportsModule\n\nAppModule -->\n\nReportsModule->AppModule\n\n\n\nAppModule -->\n\nReportsModule->AppModule\n\n\n\n\n\nSportsExerciseModule\n\nSportsExerciseModule\n\nAppModule -->\n\nSportsExerciseModule->AppModule\n\n\n\n\n\nStepsModule\n\nStepsModule\n\nAppModule -->\n\nStepsModule->AppModule\n\n\n\n\n\nUserInfosModule\n\nUserInfosModule\n\nAppModule -->\n\nUserInfosModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nBugsBetaService\n\nBugsBetaService\n\nAppModule -->\n\nBugsBetaService->AppModule\n\n\n\n\n\nCaloriesService\n\nCaloriesService\n\nAppModule -->\n\nCaloriesService->AppModule\n\n\n\n\n\nMealsService\n\nMealsService\n\nAppModule -->\n\nMealsService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            BugsBetaService\n                        \n                        \n                            CaloriesService\n                        \n                        \n                            MealsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            CaloriesController\n                        \n                        \n                            MealsController\n                        \n                        \n                            BugsBetaController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            BetaUsersModule\n                        \n                        \n                            BugsBetaModule\n                        \n                        \n                            CaloriesModule\n                        \n                        \n                            ChatModule\n                        \n                        \n                            ExercisesLibraryModule\n                        \n                        \n                            FileModule\n                        \n                        \n                            FormModule\n                        \n                        \n                            MealsModule\n                        \n                        \n                            MessagesModule\n                        \n                        \n                            OpenffModule\n                        \n                        \n                            PlanningModule\n                        \n                        \n                            PreferencesModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            ReportsModule\n                        \n                        \n                            ReportsModule\n                        \n                        \n                            SportsExerciseModule\n                        \n                        \n                            StepsModule\n                        \n                        \n                            UserInfosModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule } from '@nestjs/config'\nimport { PrismaModule } from './prisma/prisma.module';\nimport { AuthModule } from './auth/auth.module';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AtGuard } from './common/guards';\nimport { FormModule } from './form/form.module';\nimport { UserInfosModule } from './user_infos/user_infos.module';\nimport { MessagesModule } from './messages/messages.module';\nimport { CaloriesController } from './calories/calories.controller';\nimport { CaloriesService } from './calories/calories.service';\nimport { CaloriesModule } from './calories/calories.module';\nimport { StepsModule } from \"./steps/steps.module\";\nimport { MealsService } from './meals/meals.service';\nimport { MealsController } from './meals/meals.controller';\nimport { MealsModule } from './meals/meals.module';\nimport { ChatModule } from './chat/chat.module';\nimport { ReportsModule } from './reports/reports.module';\nimport { FileModule } from './file/file.module';\nimport { SportsExerciseModule } from './sports_exercises/sports_exercises.module';\nimport { PlanningModule } from './planning/planning.module';\nimport { PreferencesModule } from './preferences/preferences.module';\nimport { OpenffModule } from './openff/openff.module';\nimport { BugsBetaService } from './bugs_beta/bugs_beta.service';\nimport { BugsBetaController } from './bugs_beta/bugs_beta.controller';\nimport { BugsBetaModule } from './bugs_beta/bugs_beta.module';\nimport { ExercisesLibraryModule } from './exercises_library/exercises_library.module';\nimport { BetaUsersModule } from './beta_users/beta_users.module';\n\n@Module({\n  imports: [ConfigModule.forRoot({isGlobal: true}), PrismaModule, AuthModule, FormModule, UserInfosModule, MessagesModule, CaloriesModule, StepsModule, MealsModule, ChatModule, ReportsModule, FileModule, ReportsModule, SportsExerciseModule, PreferencesModule, PlanningModule, OpenffModule, BugsBetaModule, ExercisesLibraryModule, BetaUsersModule],\n  controllers: [AppController, CaloriesController, MealsController, BugsBetaController],\n  providers: [AppService, {\n    provide: APP_GUARD,\n    useClass: AtGuard\n  }, CaloriesService, MealsService, BugsBetaService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AtGuard.html":{"url":"injectables/AtGuard.html","title":"injectable - AtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/guards/at.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/at.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/common/guards/at.guard.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class AtGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic: boolean = this.reflector.getAllAndOverride('isPublic', [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic)\n      return true;\n\n    return super.canActivate(context);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthConfig.html":{"url":"injectables/AuthConfig.html","title":"injectable - AuthConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.config.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                authority\n                            \n                            \n                                    Public\n                                clientId\n                            \n                            \n                                    Public\n                                poolUrl\n                            \n                            \n                                    Public\n                                region\n                            \n                            \n                                    Public\n                                userPoolId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        authority\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `https://cognito-idp.${process.env.COGNITO_REGION}.amazonaws.com/${process.env.COGNITO_USER_POOL_ID}`\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.config.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clientId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : process.env.COGNITO_CLIENT_ID\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.config.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        poolUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.COGNITO_POOL_URL\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.config.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        region\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : process.env.COGNITO_REGION\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.config.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        userPoolId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : process.env.COGNITO_USER_POOL_ID\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.config.ts:5\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\n@Injectable()\nexport class AuthConfig {\n  public userPoolId: string = process.env.COGNITO_USER_POOL_ID;\n  public clientId: string = process.env.COGNITO_CLIENT_ID;\n  public region: string = process.env.COGNITO_REGION;\n  public authority = `https://cognito-idp.${process.env.COGNITO_REGION}.amazonaws.com/${process.env.COGNITO_USER_POOL_ID}`;\n  public poolUrl = process.env.COGNITO_POOL_URL;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    Async\n                                forgotPassword\n                            \n                            \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    Async\n                                logout\n                            \n                            \n                                    \n                                me\n                            \n                            \n                                    \n                                    \n                                public\n                            \n                            \n                                    \n                                    \n                                    Async\n                                refresh\n                            \n                            \n                                    \n                                    \n                                    Async\n                                register\n                            \n                            \n                                    \n                                    \n                                    Async\n                                resetPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(dto: AuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('delete')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    forgotPassword(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('forgotPassword')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(dto: AuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('logout')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        me\n                        \n                    \n                \n            \n            \n                \n                    \n                    me(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('me')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        public\n                        \n                    \n                \n            \n            \n                \n                    \n                    public()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('public')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                    \n                    refresh(rt: string, email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('refresh')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(dto: AuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('register')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword(dto: AuthDto, verificationCode: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('resetPassword')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    verificationCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Headers, Post, Request, UnauthorizedException } from \"@nestjs/common\";\nimport UserNotFoundException from \"src/user_infos/exceptions/not-found.exception\";\nimport { Public } from \"../common/decorators\";\nimport { AuthService } from \"./auth.service\";\nimport { AuthDto } from \"./dto\";\nimport { IsEmail } from \"class-validator\";\n\n@Controller(\"auth\")\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Public()\n  @Post(\"login\")\n  async login(@Body() dto: AuthDto) {\n    return this.authService.login(dto);\n  }\n\n  @Public()\n  @Post(\"register\")\n  async register(@Body() dto: AuthDto) {\n    try {\n      return this.authService.register(dto);\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  @Public()\n  @Post(\"logout\")\n  async logout(@Body() email: string) {\n    return this.authService.logout(email);\n  }\n\n  @Public()\n  @Post(\"delete\")\n  async delete(@Body() dto: AuthDto) {\n    return this.authService.delete(dto);\n  }\n\n  @Public()\n  @Post(\"refresh\")\n  async refresh(@Body(\"rt\") rt: string, @Body(\"email\") email: string) {\n    try {\n      return this.authService.refresh(rt, email);\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  @Public()\n  @Post(\"forgotPassword\")\n  async forgotPassword(@Body(\"email\") email: string) {\n    return this.authService.forgotPassword(email);\n  }\n\n  @Public()\n  @Post(\"resetPassword\")\n  async resetPassword(@Body() dto: AuthDto, @Body(\"verificationCode\") verificationCode: string) {\n    return this.authService.resetPassword(dto, verificationCode);\n  }\n\n  @Get(\"me\")\n  me(@Request() req: any) {\n    console.log(req.user);\n    return \"connected\";\n  }\n\n  @Public()\n  @Get(\"public\")\n  public() {\n    return \"public\";\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthDto.html":{"url":"classes/AuthDto.html","title":"class - AuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class AuthDto {\n  @IsNotEmpty()\n  @IsString()\n  email: string;\n\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthConfig\n\nAuthConfig\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAuthConfig->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthConfig\n                        \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { AuthConfig } from \"./auth.config\";\nimport { AuthController } from \"./auth.controller\";\nimport { AuthService } from \"./auth.service\";\nimport { JwtStrategy } from \"./strategies/aws.strategy\";\n\n@Module({\n  imports: [PassportModule.register({ defaultStrategy: \"jwt\" })],\n  providers: [AuthConfig, AuthService, JwtStrategy],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                userPool\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Private\n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                forgotPassword\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refresh\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, authConfig: AuthConfig)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authConfig\n                                                  \n                                                        \n                                                                        AuthConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(dto: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:238\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(dto: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:141\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:262\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    forgotPassword(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:199\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(dto: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                    \n                    refresh(rt: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:178\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(dto: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword(dto: AuthDto, verificationCode: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:218\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    verificationCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        userPool\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CognitoUserPool\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:21\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  ForbiddenException,\n  Injectable,\n  InternalServerErrorException,\n  UnauthorizedException,\n} from \"@nestjs/common\";\nimport * as argon from \"argon2\";\nimport {\n  AuthenticationDetails,\n  CognitoUser,\n  CognitoUserPool,\n  CognitoIdToken,\n  CognitoRefreshToken,\n} from \"amazon-cognito-identity-js\";\nimport { PrismaService } from \"../prisma/prisma.service\";\nimport { AuthConfig } from \"./auth.config\";\nimport { AuthDto } from \"./dto\";\n\n@Injectable()\nexport class AuthService {\n  private userPool: CognitoUserPool;\n  constructor(private prisma: PrismaService, private authConfig: AuthConfig) {\n    this.userPool = new CognitoUserPool({\n      UserPoolId: this.authConfig.userPoolId,\n      ClientId: this.authConfig.clientId,\n    });\n  }\n\n  async register(dto: AuthDto) {\n    const { email, password } = dto;\n\n    try {\n      const result = await new Promise((resolve, reject) => {\n        this.userPool.signUp(email, password, [], null, (err, _result) => {\n          if (err) {\n            reject(err);\n          }\n          const newUser = new CognitoUser({\n            Username: email,\n            Pool: this.userPool,\n          });\n\n          const authenticationDetails = new AuthenticationDetails({\n            Username: email,\n            Password: password,\n          });\n\n          return newUser.authenticateUser(authenticationDetails, {\n            onSuccess: async (res) => {\n              try {\n                await this.createUser(dto);\n              } catch (e) {\n                reject(e);\n              }\n              resolve({\n                access_token: res.getIdToken().getJwtToken(),\n                refresh_token: res.getRefreshToken().getToken(),\n              });\n            },\n            onFailure: (err) => {\n              reject(err);\n            },\n          });\n        });\n      });\n\n      return result;\n    } catch (e) {\n      console.log(e);\n      throw new ForbiddenException(\"User already exists\");\n    }\n  }\n\n  async login(dto: AuthDto) {\n    const { email, password } = dto;\n\n    const authenticationDetails = new AuthenticationDetails({\n      Username: email,\n      Password: password,\n    });\n\n    const userData = {\n      Username: email,\n      Pool: this.userPool,\n    };\n\n    const newUser = new CognitoUser(userData);\n\n    try {\n      const result = await new Promise((resolve, reject) => {\n        return newUser.authenticateUser(authenticationDetails, {\n          onSuccess: (result) => {\n            resolve({\n              access_token: result.getIdToken().getJwtToken(),\n              refresh_token: result.getRefreshToken().getToken(),\n            });\n          },\n          onFailure: (err) => {\n            reject(err);\n          },\n\n          newPasswordRequired: function (userAttributes, requiredAttributes) {\n            newUser.completeNewPasswordChallenge(\n              authenticationDetails.getPassword(),\n              {},\n              {\n                onSuccess: (result) => {\n                  resolve({\n                    access_token: result.getIdToken().getJwtToken(),\n                    refresh_token: result.getRefreshToken().getToken(),\n                  });\n                },\n                onFailure(err: any): void {\n                  reject(err);\n                },\n              }\n            );\n          },\n        });\n      });\n      return result;\n    } catch (e) {\n      throw new UnauthorizedException(\"Invalid credentials\");\n    }\n  }\n\n  async logout(email: string) {\n    const user = new CognitoUser({\n      Username: email,\n      Pool: this.userPool,\n    });\n\n    user.globalSignOut({\n      onSuccess: () => {},\n      onFailure: (err) => {\n        if (err.message !== \"User is not authenticated\") throw err;\n      },\n    });\n  }\n\n  async delete(dto: AuthDto) {\n    const user = new CognitoUser({\n      Username: dto.email,\n      Pool: this.userPool,\n    });\n\n    const authenticationDetails = new AuthenticationDetails({\n      Username: dto.email,\n      Password: dto.password,\n    });\n\n    return new Promise((resolve, reject) => {\n      user.authenticateUser(authenticationDetails, {\n        onSuccess: (_res) => {\n          user.deleteUser((err, result) => {\n            try {\n              this.deleteUser(dto.email);\n            } catch (e) {}\n            if (err) {\n              reject(err);\n            }\n            try {\n              this.deleteUser(dto.email);\n            } catch (e) {\n              console.log(e);\n            }\n            resolve(result);\n          });\n        },\n        onFailure: (err) => {\n          this.deleteUser(dto.email);\n          reject(err);\n        },\n      });\n    });\n  }\n\n  async refresh(rt: string, email: string) {\n    const user = new CognitoUser({\n      Username: email,\n      Pool: this.userPool,\n    });\n\n    const refreshToken = new CognitoRefreshToken({ RefreshToken: rt });\n\n    return new Promise((resolve, reject) => {\n      user.refreshSession(refreshToken, (_, res) => {\n        if (!res) {\n          reject(new ForbiddenException());\n        }\n        resolve({\n          access_token: res?.getIdToken()?.getJwtToken(),\n          refresh_token: res?.getRefreshToken()?.getToken(),\n        });\n      });\n    });\n  }\n\n  async forgotPassword(email: string) {\n    const user = new CognitoUser({\n      Username: email,\n      Pool: this.userPool,\n    });\n\n    return new Promise((resolve, reject) => {\n      user.forgotPassword({\n        onSuccess: function (data) {\n          // successfully initiated reset password request\n          resolve(data);\n        },\n        onFailure: function (err) {\n          reject(err);\n        },\n      });\n    });\n  }\n\n  async resetPassword(dto: AuthDto, verificationCode: string) {\n    const { email, password } = dto;\n\n    const user = new CognitoUser({\n      Username: email,\n      Pool: this.userPool,\n    });\n\n    return new Promise((resolve, reject) => {\n      user.confirmPassword(verificationCode, password, {\n        onSuccess(res) {\n          resolve(res);\n        },\n        onFailure(err) {\n          reject(err);\n        },\n      });\n    });\n  }\n\n  private async createUser(dto: AuthDto): Promise {\n    const hash = await argon.hash(dto.password);\n\n    const user = await this.prisma.user\n      .create({\n        data: {\n          email: dto.email,\n          password: hash,\n        },\n      })\n      .catch((error) => {\n        throw error;\n      });\n\n    if (!user)\n      throw new InternalServerErrorException();\n\n    await this.prisma.preferences.create({\n      data: {\n        userId: user.id,\n      }\n    })\n  }\n\n  private async deleteUser(email: string): Promise {\n    await this.prisma.user\n      .delete({\n        where: {\n          email,\n        },\n      })\n      .catch((error) => {\n        /* throw error; */\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BetaUsersController.html":{"url":"controllers/BetaUsersController.html","title":"controller - BetaUsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BetaUsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/beta_users/beta_users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                beta-users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addBugsBeta\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        addBugsBeta\n                        \n                    \n                \n            \n            \n                \n                    \n                    addBugsBeta(dto: BetaUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')\n                \n            \n\n            \n                \n                    Defined in src/beta_users/beta_users.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                BetaUsersDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Request, Body } from '@nestjs/common';\nimport { BetaUsersDto } from './dto/beta_users.dto';\nimport { BetaUsersService } from './beta_users.service';\n\n@Controller('beta-users')\nexport class BetaUsersController {\n\tconstructor(private betaUsersService: BetaUsersService) { }\n\n    @Post(\"/\")\n    addBugsBeta(@Body() dto: BetaUsersDto) {\n      return this.betaUsersService.add(dto);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BetaUsersDto.html":{"url":"classes/BetaUsersDto.html","title":"class - BetaUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BetaUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/beta_users/dto/beta_users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                firstname\n                            \n                            \n                                id\n                            \n                            \n                                    \n                                    \n                                lastname\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/beta_users/dto/beta_users.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/beta_users/dto/beta_users.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/beta_users/dto/beta_users.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/beta_users/dto/beta_users.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Page } from '@prisma/client';\nimport {IsNotEmpty, IsString} from 'class-validator';\n\nexport class BetaUsersDto {\n    id: number;\n\n    @IsString()\n    @IsNotEmpty()\n    email: string;\n\n    @IsString()\n    @IsNotEmpty()\n    lastname: string;\n\n    @IsString()\n    @IsNotEmpty()\n    firstname: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BetaUsersModule.html":{"url":"modules/BetaUsersModule.html","title":"module - BetaUsersModule","body":"\n                   \n\n\n\n\n    Modules\n    BetaUsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BetaUsersModule\n\n\n\ncluster_BetaUsersModule_providers\n\n\n\n\nBetaUsersService\n\nBetaUsersService\n\n\n\nBetaUsersModule\n\nBetaUsersModule\n\nBetaUsersModule -->\n\nBetaUsersService->BetaUsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/beta_users/beta_users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BetaUsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BetaUsersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { BetaUsersService } from './beta_users.service';\nimport { BetaUsersController } from './beta_users.controller';\n\n@Module({\n  providers: [BetaUsersService],\n  controllers: [BetaUsersController]\n})\nexport class BetaUsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BetaUsersService.html":{"url":"injectables/BetaUsersService.html","title":"injectable - BetaUsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BetaUsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/beta_users/beta_users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                add\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/beta_users/beta_users.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        add\n                        \n                    \n                \n            \n            \n                \n                    \n                    add(datas: BetaUsersDto)\n                \n            \n\n\n            \n                \n                    Defined in src/beta_users/beta_users.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    datas\n                                    \n                                                BetaUsersDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { BetaUsersDto } from './dto/beta_users.dto';\n\n@Injectable()\nexport class BetaUsersService {\n\tconstructor(\n\t\tprivate _prismaService: PrismaService,\n\t) {}\n\n\tasync add(datas: BetaUsersDto) {\n\t\tvar alreadyExists = await this._prismaService.betaUser.findUnique({\n\t\t\twhere: {\n\t\t\t\temail: datas.email\n\t\t\t}\n\t\t})\n\n\t\tif (alreadyExists) {\n\t\t\tthrow new NotFoundException('Beta User with email ' + datas.email + ' already exists.');\n\t\t}\n\n\t\treturn this._prismaService.betaUser.create({\n\t\t\tdata: datas\n\t\t});\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BugsBetaController.html":{"url":"controllers/BugsBetaController.html","title":"controller - BugsBetaController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BugsBetaController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bugs_beta/bugs_beta.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                bugs-beta\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addBugsBeta\n                            \n                            \n                                    \n                                getAll\n                            \n                            \n                                    \n                                getById\n                            \n                            \n                                    \n                                getMealsForOneDay\n                            \n                            \n                                    \n                                modifyBugsBeta\n                            \n                            \n                                    \n                                removeBugsBeta\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        addBugsBeta\n                        \n                    \n                \n            \n            \n                \n                    \n                    addBugsBeta(req: any, dto: BugsBetaDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')\n                \n            \n\n            \n                \n                    Defined in src/bugs_beta/bugs_beta.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                BugsBetaDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')\n                \n            \n\n            \n                \n                    Defined in src/bugs_beta/bugs_beta.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n            \n                \n                    Defined in src/bugs_beta/bugs_beta.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getMealsForOneDay\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMealsForOneDay(page: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/findByPage')\n                \n            \n\n            \n                \n                    Defined in src/bugs_beta/bugs_beta.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    page\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        modifyBugsBeta\n                        \n                    \n                \n            \n            \n                \n                    \n                    modifyBugsBeta(id: string, dto: UpdateBugsBetaDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id')\n                \n            \n\n            \n                \n                    Defined in src/bugs_beta/bugs_beta.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateBugsBetaDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        removeBugsBeta\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeBugsBeta(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in src/bugs_beta/bugs_beta.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Post, Put, Query, Request } from '@nestjs/common';\nimport { BugsBetaService } from './bugs_beta.service';\nimport { BugsBetaDto } from './dto/bugs_beta.dto';\nimport { UpdateBugsBetaDto } from './dto/update.dto';\n\n@Controller('bugs-beta')\nexport class BugsBetaController {\n\tconstructor(private bugsBetaService: BugsBetaService) { }\n\n    @Post(\"/\")\n    addBugsBeta(@Request() req: any, @Body() dto: BugsBetaDto) {\n      return this.bugsBetaService.add(dto, req.user.email);\n    }\n\n    @Put(\"/:id\")\n    modifyBugsBeta(@Param('id') id: string, @Body() dto: UpdateBugsBetaDto) {\n      return this.bugsBetaService.update(dto, id);\n    }\n\n    @Delete(\"/:id\")\n    removeBugsBeta(@Param('id') id: string) {\n      return this.bugsBetaService.delete(id);\n    }\n\n    @Get(\"/\")\n    getAll() {\n      return this.bugsBetaService.getAll();\n    }\n\t\n\t@Get(\"/findByPage\")\n\tgetMealsForOneDay(@Query('page') page: string) {\n\t  return this.bugsBetaService.getByPage(page);\n\t}\n\n\t@Get(\"/:id\")\n    getById(@Param('id') id: string) {\n      return this.bugsBetaService.getById(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BugsBetaDto.html":{"url":"classes/BugsBetaDto.html","title":"class - BugsBetaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BugsBetaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bugs_beta/dto/bugs_beta.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                    \n                                page\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bugs_beta/dto/bugs_beta.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/bugs_beta/dto/bugs_beta.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Page\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bugs_beta/dto/bugs_beta.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bugs_beta/dto/bugs_beta.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/bugs_beta/dto/bugs_beta.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Page } from '@prisma/client';\nimport {IsNotEmpty, IsString} from 'class-validator';\n\nexport class BugsBetaDto {\n    userId: string;\n    id: number;\n\n    @IsNotEmpty()\n    @IsString()\n    title: string;\n\n    @IsNotEmpty()\n    @IsString()\n    description: string;\n\n    @IsString()\n    page: Page;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BugsBetaModule.html":{"url":"modules/BugsBetaModule.html","title":"module - BugsBetaModule","body":"\n                   \n\n\n\n\n    Modules\n    BugsBetaModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/bugs_beta/bugs_beta.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\n@Module({})\nexport class BugsBetaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BugsBetaService.html":{"url":"injectables/BugsBetaService.html","title":"injectable - BugsBetaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BugsBetaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bugs_beta/bugs_beta.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                add\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getByPage\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/bugs_beta/bugs_beta.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        add\n                        \n                    \n                \n            \n            \n                \n                    \n                    add(bugBeta: BugsBetaDto, userEmail: string)\n                \n            \n\n\n            \n                \n                    Defined in src/bugs_beta/bugs_beta.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bugBeta\n                                    \n                                                BugsBetaDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userEmail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/bugs_beta/bugs_beta.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll()\n                \n            \n\n\n            \n                \n                    Defined in src/bugs_beta/bugs_beta.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/bugs_beta/bugs_beta.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByPage(page: string)\n                \n            \n\n\n            \n                \n                    Defined in src/bugs_beta/bugs_beta.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    page\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(bugBeta: UpdateBugsBetaDto, id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/bugs_beta/bugs_beta.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bugBeta\n                                    \n                                                UpdateBugsBetaDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { Page } from '@prisma/client';\nimport UserNotFoundException from '../user_infos/exceptions/not-found.exception';\nimport { BugsBetaDto } from './dto/bugs_beta.dto';\nimport { UpdateBugsBetaDto } from './dto/update.dto';\n\n\n@Injectable()\nexport class BugsBetaService {\n\tconstructor(\n\t\tprivate _prismaService: PrismaService,\n\t) {}\n\t\n\tasync getAll() {\n\t\treturn await this._prismaService.bugsBeta.findMany();\n\t}\n\n\tasync getById(id: string) {\n\t\treturn await this._prismaService.bugsBeta.findUnique({\n\t\t\twhere: {\n\t\t\t\tid: Number(id)\n\t\t\t}\n\t\t});\n\t}\n\n\tasync getByPage(page: string) {\n\t\tvar enumPage = Page[page];\n\t\tconsole.log(enumPage);\n\t\treturn await this._prismaService.bugsBeta.findMany({\n\t\t\twhere: {\n\t\t\t\tpage: enumPage\n\t\t\t}\n\t\t});\n\t}\n\n\tasync add(bugBeta: BugsBetaDto, userEmail: string) {\n\t\tvar newDatas = bugBeta;\n\n\t\t//Get User with email\n\t\tconst user = await this._prismaService.user.findUnique({\n\t\t  where: {\n\t\t\temail: userEmail\n\t\t  }\n\t\t});\n\t\tif (!user) {\n\t\t\tthrow new UserNotFoundException(userEmail);\n\t\t}\n\t\n\t\tnewDatas['userId'] = user.id\n\t\tnewDatas['page'] = Page[bugBeta.page]\n\t\n\t\treturn this._prismaService.bugsBeta.create({\n\t\t\tdata: newDatas\n\t\t});\n\t}\n\n\tasync update(bugBeta: UpdateBugsBetaDto, id: string) {\n\t\t//Update the meal that we need to modify\n\t\treturn this._prismaService.bugsBeta.update({\n\t\t\tdata: bugBeta,\n\t\t\twhere: {\n\t\t\t\tid: Number(id)\n\t\t\t}\n\t\t})\n\t}\n\n\tasync delete(id: string) {\n\t\treturn await this._prismaService.bugsBeta.delete({\n\t\t\twhere: {\n\t\t\t\tid: Number(id)\n\t\t\t}\n\t\t});\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CaloriesController.html":{"url":"controllers/CaloriesController.html","title":"controller - CaloriesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CaloriesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/calories/calories.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getCalories\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getCalories\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCalories(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('calories')\n                \n            \n\n            \n                \n                    Defined in src/calories/calories.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query, Request } from \"@nestjs/common\";\nimport { CaloriesService } from \"./calories.service\";\n\n@Controller()\nexport class CaloriesController {\n  constructor(private caloriesService: CaloriesService) {}\n\n  @Get(\"calories\")\n  getCalories(@Request() req: any) {\n    return this.caloriesService.getCaloriesById(req.user.email);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CaloriesModule.html":{"url":"modules/CaloriesModule.html","title":"module - CaloriesModule","body":"\n                   \n\n\n\n\n    Modules\n    CaloriesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CaloriesModule\n\n\n\ncluster_CaloriesModule_providers\n\n\n\n\nCaloriesService\n\nCaloriesService\n\n\n\nCaloriesModule\n\nCaloriesModule\n\nCaloriesModule -->\n\nCaloriesService->CaloriesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/calories/calories.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaloriesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CaloriesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CaloriesService } from \"./calories.service\";\nimport { CaloriesController } from \"./calories.controller\";\n\n@Module({\n  providers: [CaloriesService],\n  controllers: [CaloriesController],\n})\nexport class CaloriesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CaloriesService.html":{"url":"injectables/CaloriesService.html","title":"injectable - CaloriesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CaloriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/calories/calories.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getCaloriesById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/calories/calories.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getCaloriesById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCaloriesById(userEmail: string)\n                \n            \n\n\n            \n                \n                    Defined in src/calories/calories.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userEmail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport UserNotFoundException from \"../user_infos/exceptions/not-found.exception\";\n\n@Injectable()\nexport class CaloriesService {\n  constructor(private _prismaService: PrismaService) {}\n\n  public async getCaloriesById(userEmail: string) {\n    const userCalories = await this._prismaService.user.findUnique({\n      where: {\n        email: userEmail\n      }\n    })\n    if (!userCalories) {\n      throw new UserNotFoundException(userEmail);\n    }\n\n    const user = await this._prismaService.userData.findUnique({\n      where: {\n        userId: userCalories.id\n      }\n    });\n    if (!user) {\n      throw new UserNotFoundException(userEmail);\n    }\n\n    const calory_data =  await this._prismaService.calories.findMany({\n      where: {\n        userId: userCalories.id\n      }\n    });\n\n    return {\n      data: calory_data\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ChatController.html":{"url":"controllers/ChatController.html","title":"controller - ChatController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ChatController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/chat.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                chat\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getAllMessages\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getAllMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllMessages(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/all')\n                \n            \n\n            \n                \n                    Defined in src/chat/chat.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param } from \"@nestjs/common\";\nimport { GetCurrentUserEmail } from \"../common/decorators\";\nimport { ChatService } from \"./chat.service\";\n\n@Controller(\"chat\")\nexport class ChatController {\n  constructor(private chatService: ChatService) {}\n\n  @Get(\"/all\")\n  getAllMessages(@GetCurrentUserEmail() email: string) {\n    return this.chatService.getAll(email);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChatGateway.html":{"url":"classes/ChatGateway.html","title":"class - ChatGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChatGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/chat.gateway.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleConnection\n                            \n                            \n                                handleDisconnect\n                            \n                            \n                                    \n                                handleMessage\n                            \n                            \n                                    \n                                handleSeen\n                            \n                            \n                                    \n                                handleWriting\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(chatService: ChatService)\n                    \n                \n                        \n                            \n                                Defined in src/chat/chat.gateway.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        chatService\n                                                  \n                                                        \n                                                                        ChatService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chat/chat.gateway.ts:11\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleConnection\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleConnection(socket: Socket)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.gateway.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \nhandleDisconnect(socket: Socket)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.gateway.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        handleMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMessage(client: any, payload: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('message')\n                \n            \n\n            \n                \n                    Defined in src/chat/chat.gateway.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        handleSeen\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleSeen(client: any, payload: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('seen')\n                \n            \n\n            \n                \n                    Defined in src/chat/chat.gateway.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        handleWriting\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleWriting(client: any, payload: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('writing')\n                \n            \n\n            \n                \n                    Defined in src/chat/chat.gateway.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  SubscribeMessage,\n  WebSocketGateway,\n  WebSocketServer,\n} from \"@nestjs/websockets\";\nimport { ChatService } from \"../chat/chat.service\";\nimport { Server, Socket } from \"socket.io\";\n\n@WebSocketGateway({ cors: { origin: \"*\" } })\nexport class ChatGateway {\n  @WebSocketServer() server: Server;\n\n  constructor(private chatService: ChatService) {}\n\n  async handleConnection(socket: Socket) {\n    return this.chatService.handleConnection(socket);\n  }\n\n  handleDisconnect(socket: Socket) {\n    return this.chatService.handleDisconnect(socket);\n  }\n\n  @SubscribeMessage(\"message\")\n  handleMessage(client: any, payload: any): any {\n    return this.chatService.handleMessage(client, payload);\n  }\n\n  @SubscribeMessage(\"writing\")\n  handleWriting(client: any, payload: any): any {\n    return this.chatService.handleWriting(client, payload);\n  }\n\n  @SubscribeMessage(\"seen\")\n  handleSeen(client: any, payload: any): any {\n    return this.chatService.handleSeen(client, payload);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ChatModule.html":{"url":"modules/ChatModule.html","title":"module - ChatModule","body":"\n                   \n\n\n\n\n    Modules\n    ChatModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_providers\n\n\n\ncluster_ChatModule_imports\n\n\n\n\nUserInfosModule\n\nUserInfosModule\n\n\n\nChatModule\n\nChatModule\n\nChatModule -->\n\nUserInfosModule->ChatModule\n\n\n\n\n\nChatService\n\nChatService\n\nChatModule -->\n\nChatService->ChatModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/chat/chat.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ChatService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ChatController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserInfosModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserInfosModule } from '../user_infos/user_infos.module';\nimport { ChatGateway } from './chat.gateway';\nimport { ChatService } from './chat.service';\nimport { ChatController } from './chat.controller';\n\n@Module({\n  providers: [ChatGateway, ChatService],\n  imports: [UserInfosModule],\n  controllers: [ChatController],\n})\nexport class ChatModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChatService.html":{"url":"injectables/ChatService.html","title":"injectable - ChatService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ChatService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/chat.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                rooms\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                handleConnection\n                            \n                            \n                                handleDisconnect\n                            \n                            \n                                    Async\n                                handleMessage\n                            \n                            \n                                    Async\n                                handleSeen\n                            \n                            \n                                    Async\n                                handleWriting\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userInfosService: UserInfoService, prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/chat/chat.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userInfosService\n                                                  \n                                                        \n                                                                        UserInfoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleConnection\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleConnection(socket: Socket)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \nhandleDisconnect(socket: any)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMessage(socket: Socket, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleSeen\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleSeen(socket: Socket, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleWriting\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleWriting(socket: Socket, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        rooms\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Rooms()\n                    \n                \n                    \n                        \n                                Defined in src/chat/chat.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Socket } from \"socket.io\";\nimport { PrismaService } from \"../prisma/prisma.service\";\nimport { UserInfoService } from \"../user_infos/user_infos.service\";\nimport { Rooms } from \"./chat.helper\";\n\n@Injectable()\nexport class ChatService {\n  private rooms = new Rooms();\n\n  constructor(\n    private userInfosService: UserInfoService,\n    private prismaService: PrismaService,\n  ) {}\n\n  async handleConnection(socket: Socket) {\n    const userId = socket.handshake.auth.token;\n    if (!userId) {\n      socket.disconnect();\n      return;\n    }\n\n    let user = null;\n    try {\n      user = await this.userInfosService.getUserfromId(userId);\n    } catch (e) {\n      socket.disconnect();\n      return;\n    }\n    const sidekick = user.sidekick_id;\n\n    if (!sidekick) {\n      socket.disconnect();\n      return;\n    }\n\n    const roomName = [userId, sidekick].sort().join(\"_\");\n    let room = this.rooms.getRoom(roomName);\n    if (!room) {\n      room = {\n        name: roomName,\n        users: [],\n      };\n      this.rooms.addRoom(room);\n    }\n    this.rooms.addUserToRoom(roomName, {\n      socketId: socket.id,\n      userId: userId,\n      sidekickId: sidekick,\n    });\n\n    socket.join(roomName);\n\n    /* socket.emit(\"message\", \"You are connected to the room \" + roomName); */\n  }\n\n  handleDisconnect(socket: any) {\n    const user = this.rooms.findUserBySocketId(socket.id);\n    // socket.handshake.auth.token also works to get the user id\n\n    if (!user) {\n      return;\n    }\n\n    this.rooms.removeUserFromRoom(user.userId, socket.id);\n\n    if (this.rooms.getRoom(user.userId)?.users.length === 0) {\n      this.rooms.removeRoom(user.userId);\n    }\n  }\n\n  async handleMessage(socket: Socket, payload: any) {\n    socket.broadcast.emit(\"message\", payload);\n\n    // save message to db\n    const user = this.rooms.findUserBySocketId(socket.id);\n\n    if (!user) return;\n\n    await this.prismaService.message.create({\n      data: {\n        from_id: user.userId,\n        to: user.sidekickId,\n        content: payload,\n      },\n    });\n\n    /* socket.emit(\"message\", \"You sent : \" + payload); */\n  }\n\n  async handleWriting(socket: Socket, payload: any) {\n    socket.broadcast.emit(\"writing\", payload);\n\n    /* socket.emit(\"writing\", \"Received writing event\"); */\n  }\n\n  async handleSeen(socket: Socket, payload: any) {\n    socket.broadcast.emit(\"seen\", {});\n\n    const user = this.rooms.findUserBySocketId(socket.id);\n\n    if (!user) return;\n\n    await this.prismaService.message.updateMany({\n      where: {\n        from_id: user.sidekickId,\n        seen: false,\n      },\n      data: {\n        seen: true,\n      },\n    });\n    /* socket.emit(\"seen\", \"Received seen event\"); */\n  }\n\n  async getAll(email: string) {\n    const user = await this.prismaService.user.findUnique({\n      where: {\n        email: email,\n      },\n    });\n    const fullUser = await this.userInfosService.find(email);\n\n    return await this.prismaService.message.findMany({\n      where: {\n        OR: [\n          {\n            from_id: user.id,\n            to: fullUser.sidekick_id,\n          },\n          {\n            from_id: fullUser.sidekick_id,\n            to: user.id,\n          },\n        ],\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateExercisesLibraryDto.html":{"url":"classes/CreateExercisesLibraryDto.html","title":"class - CreateExercisesLibraryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateExercisesLibraryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exercises_library/dto/create-exercises_library.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                muscleGroup\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                thumbnail\n                            \n                            \n                                    \n                                    \n                                video\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exercises_library/dto/create-exercises_library.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        muscleGroup\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MuscleGroup\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exercises_library/dto/create-exercises_library.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exercises_library/dto/create-exercises_library.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        thumbnail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exercises_library/dto/create-exercises_library.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        video\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exercises_library/dto/create-exercises_library.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { MuscleGroup } from \"@prisma/client\";\nimport { IsNotEmpty, IsOptional, IsString } from \"class-validator\";\n\nexport class CreateExercisesLibraryDto {\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @IsNotEmpty()\n  @IsString()\n  description: string;\n\n  @IsNotEmpty()\n  @IsString()\n  video: string;\n\n  @IsOptional()\n  thumbnail: string;\n\n  @IsNotEmpty()\n  @IsString()\n  muscleGroup: MuscleGroup;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateOpenffDto.html":{"url":"classes/CreateOpenffDto.html","title":"class - CreateOpenffDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateOpenffDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/openff/dto/create-openff.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateOpenffDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EditInfosDto.html":{"url":"classes/EditInfosDto.html","title":"class - EditInfosDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EditInfosDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user_infos/dto/edit.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                firstname\n                            \n                            \n                                    \n                                    Optional\n                                gender\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                lastname\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                size\n                            \n                            \n                                    \n                                    Optional\n                                sport_frequence\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                weight\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user_infos/dto/edit.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user_infos/dto/edit.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Gender\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user_infos/dto/edit.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user_infos/dto/edit.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user_infos/dto/edit.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        sport_frequence\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SportFrequence\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user_infos/dto/edit.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user_infos/dto/edit.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        weight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user_infos/dto/edit.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Gender, SportFrequence } from \"@prisma/client\";\nimport { IsOptional, IsString } from \"class-validator\";\n\nexport class EditInfosDto {\n  @IsOptional()\n  @IsString()\n  firstname?: string;\n\n  @IsOptional()\n  @IsString()\n  lastname?: string;\n\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @IsOptional()\n  @IsString()\n  username?: string;\n\n  @IsOptional()\n  @IsString()\n  size?: number;\n\n  @IsOptional()\n  @IsString()\n  weight?: number;\n\n  @IsOptional()\n  gender?: Gender;\n\n  @IsOptional()\n  sport_frequence?: SportFrequence;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExercisesLibraryController.html":{"url":"controllers/ExercisesLibraryController.html","title":"controller - ExercisesLibraryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExercisesLibraryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exercises_library/exercises_library.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                exercises-library\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createExercisesLibraryDto: CreateExercisesLibraryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post()\n                \n            \n\n            \n                \n                    Defined in src/exercises_library/exercises_library.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createExercisesLibraryDto\n                                    \n                                                CreateExercisesLibraryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/exercises_library/exercises_library.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/exercises_library/exercises_library.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/exercises_library/exercises_library.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateExercisesLibraryDto: UpdateExercisesLibraryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/exercises_library/exercises_library.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateExercisesLibraryDto\n                                    \n                                                UpdateExercisesLibraryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { ExercisesLibraryService } from './exercises_library.service';\nimport { CreateExercisesLibraryDto } from './dto/create-exercises_library.dto';\nimport { UpdateExercisesLibraryDto } from './dto/update-exercises_library.dto';\nimport { Public } from 'src/common/decorators';\n\n@Controller('exercises-library')\nexport class ExercisesLibraryController {\n  constructor(private readonly exercisesLibraryService: ExercisesLibraryService) {}\n\n  @Public()\n  @Post()\n  create(@Body() createExercisesLibraryDto: CreateExercisesLibraryDto) {\n    return this.exercisesLibraryService.create(createExercisesLibraryDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.exercisesLibraryService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.exercisesLibraryService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateExercisesLibraryDto: UpdateExercisesLibraryDto) {\n    return this.exercisesLibraryService.update(+id, updateExercisesLibraryDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.exercisesLibraryService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ExercisesLibraryModule.html":{"url":"modules/ExercisesLibraryModule.html","title":"module - ExercisesLibraryModule","body":"\n                   \n\n\n\n\n    Modules\n    ExercisesLibraryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ExercisesLibraryModule\n\n\n\ncluster_ExercisesLibraryModule_providers\n\n\n\n\nExercisesLibraryService\n\nExercisesLibraryService\n\n\n\nExercisesLibraryModule\n\nExercisesLibraryModule\n\nExercisesLibraryModule -->\n\nExercisesLibraryService->ExercisesLibraryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/exercises_library/exercises_library.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ExercisesLibraryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ExercisesLibraryController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ExercisesLibraryService } from './exercises_library.service';\nimport { ExercisesLibraryController } from './exercises_library.controller';\n\n@Module({\n  controllers: [ExercisesLibraryController],\n  providers: [ExercisesLibraryService]\n})\nexport class ExercisesLibraryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExercisesLibraryService.html":{"url":"injectables/ExercisesLibraryService.html","title":"injectable - ExercisesLibraryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExercisesLibraryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exercises_library/exercises_library.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/exercises_library/exercises_library.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createExercisesLibraryDto: CreateExercisesLibraryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/exercises_library/exercises_library.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createExercisesLibraryDto\n                                    \n                                                CreateExercisesLibraryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/exercises_library/exercises_library.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/exercises_library/exercises_library.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/exercises_library/exercises_library.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateExercisesLibraryDto: UpdateExercisesLibraryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/exercises_library/exercises_library.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateExercisesLibraryDto\n                                    \n                                                UpdateExercisesLibraryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateExercisesLibraryDto } from './dto/create-exercises_library.dto';\nimport { UpdateExercisesLibraryDto } from './dto/update-exercises_library.dto';\nimport { PrismaService } from 'src/prisma/prisma.service';\n\n@Injectable()\nexport class ExercisesLibraryService {\n  constructor(private prisma: PrismaService) { }\n\n  async create(createExercisesLibraryDto: CreateExercisesLibraryDto) {\n    const { name, description, video, thumbnail, muscleGroup } = createExercisesLibraryDto;\n\n    const exercisesLibrary = await this.prisma.exercises_Library.create({\n      data: {\n        name,\n        description,\n        video,\n        thumbnail,\n        muscle_group: muscleGroup,\n      },\n    });\n\n    return exercisesLibrary;\n  }\n\n  async findAll() {\n    const exercisesLibrary = await this.prisma.exercises_Library.findMany();\n\n    return exercisesLibrary;\n  }\n\n  async findOne(id: number) {\n    const exercisesLibrary = await this.prisma.exercises_Library.findUnique({\n      where: {\n        id,\n      },\n    });\n\n    return exercisesLibrary;\n  }\n\n  async update(id: number, updateExercisesLibraryDto: UpdateExercisesLibraryDto) {\n    const { name, description, video, thumbnail, muscleGroup } = updateExercisesLibraryDto;\n\n    const exercisesLibrary = await this.prisma.exercises_Library.update({\n      where: {\n        id,\n      },\n      data: {\n        name,\n        description,\n        video,\n        thumbnail,\n        muscle_group: muscleGroup,\n      },\n    });\n\n    return exercisesLibrary;\n  }\n\n  async remove(id: number) {\n    const exercisesLibrary = await this.prisma.exercises_Library.delete({\n      where: {\n        id,\n      },\n    });\n\n    return exercisesLibrary;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FileController.html":{"url":"controllers/FileController.html","title":"controller - FileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/file/file.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                file\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadFile(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('upload')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/file/file.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, ParseFilePipe, Post, UploadedFile, UseInterceptors } from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { Public } from '../common/decorators';\nimport { FileService } from './file.service';\n\n@Controller('file')\nexport class FileController {\n  constructor(private readonly fileService: FileService) {\n    this.fileService = fileService;\n  }\n\n  @Public()\n  @Post('upload')\n  @UseInterceptors(FileInterceptor('file'))\n  async uploadFile(@UploadedFile(new ParseFilePipe({\n    validators: [\n    ]\n  })) file: Express.Multer.File) {\n    return this.fileService.uploadPublicFile(file);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FileModule.html":{"url":"modules/FileModule.html","title":"module - FileModule","body":"\n                   \n\n\n\n\n    Modules\n    FileModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FileModule\n\n\n\ncluster_FileModule_exports\n\n\n\ncluster_FileModule_providers\n\n\n\n\nFileService \n\nFileService \n\n\n\nFileModule\n\nFileModule\n\nFileService  -->\n\nFileModule->FileService \n\n\n\n\n\nFileService\n\nFileService\n\nFileModule -->\n\nFileService->FileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/file/file.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FileService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FileController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FileService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FileService } from './file.service';\nimport { FileController } from './file.controller';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  controllers: [FileController],\n  providers: [FileService],\n  exports: [FileService],\n  imports: [ConfigModule]\n})\nexport class FileModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FileService.html":{"url":"injectables/FileService.html","title":"injectable - FileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/file/file.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                S3\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                uploadPublicFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/file/file.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPublicFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPublicFile(file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/file/file.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        S3\n                        \n                    \n                \n            \n                \n                    \n                        Type :     S3\n\n                    \n                \n                    \n                        \n                                Defined in src/file/file.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { S3 } from \"@aws-sdk/client-s3\";\nimport { v4 as uuid } from \"uuid\";\nimport { ConfigService } from \"@nestjs/config\";\n\n@Injectable()\nexport class FileService {\n  private S3: S3;\n\n  constructor(private configService: ConfigService) {\n    this.S3 = new S3({\n      region: this.configService.get(\"AWS_REGION\"),\n      credentials: {\n        accessKeyId: this.configService.get(\"AWS_ACCESS_KEY_ID\"),\n        secretAccessKey: this.configService.get(\"AWS_SECRET_ACCESS_KEY\"),\n      },\n    });\n  }\n\n  async uploadPublicFile(file: Express.Multer.File) {\n    try {\n      const key = `${uuid()}.${file.originalname.split(\".\").pop()}`;\n      await this.S3.putObject({\n        Bucket: this.configService.get(\"AWS_BUCKET_NAME\"),\n        Key: key,\n        Body: file.buffer,\n        ContentType: file.mimetype,\n        ACL: \"public-read\",\n      });\n      return `https://${this.configService.get(\"AWS_BUCKET_NAME\")}.s3.${this.configService.get(\"AWS_REGION\")}.amazonaws.com/${key}`;\n    } catch (err) {\n      console.log(err);\n      return null;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FormController.html":{"url":"controllers/FormController.html","title":"controller - FormController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FormController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/form/form.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                form\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                saveFormDatas\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        saveFormDatas\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveFormDatas(dto: FormDto, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('save')\n                \n            \n\n            \n                \n                    Defined in src/form/form.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                FormDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { FormDto } from './dto/form.dto';\nimport { FormService } from './form.service';\nimport { Body, Controller, Post } from '@nestjs/common';\n\n@Controller('form')\nexport class FormController {\n  constructor(private formservice: FormService) { }\n\n  @Post('save')\n  async saveFormDatas(@Body() dto: FormDto, userId: string) {\n    return await this.formservice.saveFormDatas(dto, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FormDto.html":{"url":"classes/FormDto.html","title":"class - FormDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FormDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/form/dto/form.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                birthDate\n                            \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                firstname\n                            \n                            \n                                    \n                                gender\n                            \n                            \n                                    \n                                    \n                                lastname\n                            \n                            \n                                    \n                                    \n                                size\n                            \n                            \n                                    \n                                sport_frequence\n                            \n                            \n                                    \n                                    \n                                userId\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                            \n                                    \n                                    \n                                weight\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        birthDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/form/dto/form.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/form/dto/form.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/form/dto/form.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Gender\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/form/dto/form.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/form/dto/form.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/form/dto/form.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sport_frequence\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SportFrequence\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/form/dto/form.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/form/dto/form.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/form/dto/form.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        weight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/form/dto/form.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Gender, SportFrequence } from '@prisma/client';\nimport { IsInt, IsNotEmpty, IsString } from 'class-validator'; \n\nexport class FormDto {\n  @IsNotEmpty()\n  @IsString()\n  userId: string;\n\n  @IsNotEmpty()\n  @IsString()\n  firstname: string;\n\n  @IsNotEmpty()\n  @IsString()\n  lastname: string;\n\n  @IsNotEmpty()\n  @IsInt()\n  size: number;\n\n  @IsNotEmpty()\n  @IsString()\n  birthDate: string;\n\n  @IsNotEmpty()\n  @IsString()\n  username: string;\n\n  @IsNotEmpty()\n  @IsInt()\n  weight: number;\n\n  @IsNotEmpty()\n  gender: Gender;\n\n  @IsNotEmpty()\n  @IsString()\n  description: string;\n\n  @IsNotEmpty()\n  sport_frequence: SportFrequence;\n} \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FormModule.html":{"url":"modules/FormModule.html","title":"module - FormModule","body":"\n                   \n\n\n\n\n    Modules\n    FormModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FormModule\n\n\n\ncluster_FormModule_providers\n\n\n\ncluster_FormModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nFormModule\n\nFormModule\n\nFormModule -->\n\nPrismaModule->FormModule\n\n\n\n\n\nFormService\n\nFormService\n\nFormModule -->\n\nFormService->FormModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/form/form.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FormService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FormController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { PrismaModule } from './../prisma/prisma.module';\nimport { Module } from '@nestjs/common';\nimport { FormController } from './form.controller';\nimport { FormService } from './form.service';\n\n@Module({\n  imports: [PrismaModule],\n  controllers: [FormController],\n  providers: [FormService]\n})\nexport class FormModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FormService.html":{"url":"injectables/FormService.html","title":"injectable - FormService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FormService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/form/form.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                saveFormDatas\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/form/form.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        saveFormDatas\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveFormDatas(datas: FormDto, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/form/form.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    datas\n                                    \n                                                FormDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ForbiddenException, Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { FormDto } from './dto/form.dto';\nimport * as argon from 'argon2';\nimport { PrismaClientKnownRequestError } from '@prisma/client/runtime/library';\nimport { kill } from 'process';\n\n@Injectable()\nexport class FormService {\n  constructor(private prisma: PrismaService) { }\n\n  public async saveFormDatas(datas: FormDto, userId: string) {\n    const res = await this.prisma.userData.create({\n      data: datas\n    }).catch(error => {\n      if (error instanceof PrismaClientKnownRequestError) {\n        if (error.code === 'P2002') {\n          throw new ForbiddenException('Credentials incorrect');\n        }\n      }\n      throw error;\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/aws.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, authConfig: AuthConfig)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/aws.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authConfig\n                                                  \n                                                        \n                                                                        AuthConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/aws.strategy.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from \"passport-jwt\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { Injectable } from \"@nestjs/common\";\nimport { AuthService } from \"../auth.service\";\nimport { passportJwtSecret } from \"jwks-rsa\";\nimport { AuthConfig } from \"../auth.config\";\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, \"jwt\") {\n  constructor(\n    private readonly authService: AuthService,\n    private authConfig: AuthConfig\n  ) {\n    super({\n      secretOrKeyProvider: passportJwtSecret({\n        cache: true,\n        rateLimit: true,\n        jwksRequestsPerMinute: 5,\n        jwksUri: `${authConfig.authority}/.well-known/jwks.json`,\n      }),\n\n      audience: authConfig.clientId,\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      issuer: authConfig.authority,\n      algorithms: [\"RS256\"],\n    });\n  }\n\n  public async validate(payload: any) {\n    return { userId: payload.sub, email: payload.email };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MealsController.html":{"url":"controllers/MealsController.html","title":"controller - MealsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MealsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meals/meals.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meals\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addMeal\n                            \n                            \n                                    \n                                getMeal\n                            \n                            \n                                    \n                                getMealsForOneDay\n                            \n                            \n                                    \n                                modifyMeal\n                            \n                            \n                                    \n                                removeMeal\n                            \n                            \n                                    \n                                searchMeal\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        addMeal\n                        \n                    \n                \n            \n            \n                \n                    \n                    addMeal(req: any, dto: MealsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')\n                \n            \n\n            \n                \n                    Defined in src/meals/meals.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                MealsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getMeal\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMeal(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n            \n                \n                    Defined in src/meals/meals.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getMealsForOneDay\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMealsForOneDay(req: any, day: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('findByDay')\n                \n            \n\n            \n                \n                    Defined in src/meals/meals.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    day\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        modifyMeal\n                        \n                    \n                \n            \n            \n                \n                    \n                    modifyMeal(id: string, dto: UpdateMealsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id')\n                \n            \n\n            \n                \n                    Defined in src/meals/meals.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateMealsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        removeMeal\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeMeal(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in src/meals/meals.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        searchMeal\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchMeal(req: any, pattern: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('find')\n                \n            \n\n            \n                \n                    Defined in src/meals/meals.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pattern\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { MealsDto } from './dto/meals.dto';\nimport { Body, Controller, Get, Delete, Put,  Post, Request, Query, Param } from '@nestjs/common';\nimport { MealsService } from './meals.service';\nimport { UpdateMealsDto } from './dto/update.dto';\n\n@Controller('meals')\nexport class MealsController {\n\tconstructor(private mealsService: MealsService) { }\n\n    @Post(\"/\")\n    addMeal(@Request() req: any, @Body() dto: MealsDto) {\n      return this.mealsService.add(dto, req.user.email);\n    }\n\n    @Get(\"findByDay\")\n    getMealsForOneDay(@Request() req: any, @Query('day') day: string) {\n      return this.mealsService.findByDay(req.user.email, day);\n    }\n\n    @Get(\"/:id\")\n    getMeal(@Param('id') id: string) {\n      return this.mealsService.findOne(id);\n    }\n\n    @Put(\"/:id\")\n    modifyMeal(@Param('id') id: string, @Body() dto: UpdateMealsDto) {\n      return this.mealsService.update(dto, id);\n    }\n\n    @Delete(\"/:id\")\n    removeMeal(@Param('id') id: string) {\n      return this.mealsService.delete(id);\n    }\n\n    @Post(\"find\")\n    searchMeal(@Request() req: any, @Body(\"pattern\") pattern: string) {\n      return this.mealsService.find(req.user.email, pattern);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MealsDto.html":{"url":"classes/MealsDto.html","title":"class - MealsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MealsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meals/dto/meals.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                date\n                            \n                            \n                                id\n                            \n                            \n                                ingredients\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                period\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meals/dto/meals.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/meals/dto/meals.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ingredients\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/meals/dto/meals.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meals/dto/meals.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        period\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meals/dto/meals.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/meals/dto/meals.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IsArray, IsDate, IsInt, IsJSON, IsNotEmpty, IsString} from 'class-validator';\n\nexport class MealsDto {\n    userId: string;\n    id: number;\n\n    @IsNotEmpty()\n    @IsString()\n    period: string;\n\n    @IsNotEmpty()\n    @IsString()\n    name: string;\n\n    @IsString()\n    date: Date;\n\n    ingredients: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MealsModule.html":{"url":"modules/MealsModule.html","title":"module - MealsModule","body":"\n                   \n\n\n\n\n    Modules\n    MealsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MealsModule\n\n\n\ncluster_MealsModule_providers\n\n\n\n\nMealsService\n\nMealsService\n\n\n\nMealsModule\n\nMealsModule\n\nMealsModule -->\n\nMealsService->MealsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meals/meals.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MealsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MealsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MealsController } from './meals.controller';\nimport { MealsService } from './meals.service';\n\n@Module({\n\tproviders: [MealsService],\n\tcontrollers: [MealsController]\n})\nexport class MealsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MealsService.html":{"url":"injectables/MealsService.html","title":"injectable - MealsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MealsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meals/meals.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                add\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                find\n                            \n                            \n                                    Public\n                                    Async\n                                findByDay\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/meals/meals.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        add\n                        \n                    \n                \n            \n            \n                \n                    \n                    add(datas: MealsDto, userEmail: string)\n                \n            \n\n\n            \n                \n                    Defined in src/meals/meals.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    datas\n                                    \n                                                MealsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userEmail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/meals/meals.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(userEmail: string, pattern: string)\n                \n            \n\n\n            \n                \n                    Defined in src/meals/meals.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userEmail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pattern\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findByDay\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByDay(userEmail: string, date: string)\n                \n            \n\n\n            \n                \n                    Defined in src/meals/meals.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userEmail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    date\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/meals/meals.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(datas: UpdateMealsDto, id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/meals/meals.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    datas\n                                    \n                                                UpdateMealsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { MealsDto } from './dto/meals.dto';\nimport { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport UserNotFoundException from './exceptions/not-found.exception';\nimport { UpdateMealsDto } from './dto/update.dto';\n\n\n@Injectable()\nexport class MealsService {\n\tconstructor(private _prismaService: PrismaService) {}\n\n  public async findOne(id: string) {\n\t\treturn await this._prismaService.meals.findUnique({\n\t\t  where: {\n        id: Number(id)\n\t\t  },\n\t\t})\n  }\n\n  public async delete(id: string) {\n\t\tawait this._prismaService.meals.delete({\n\t\t  where: {\n        id: Number(id)\n\t\t  },\n\t\t})\n  }\n\n\tpublic async add(datas: MealsDto, userEmail: string) {\n    var newDatas = datas;\n\n    //Get User with email\n\t\tconst user = await this._prismaService.user.findUnique({\n      where: {\n        email: userEmail\n      }\n    });\n    if (!user) {\n        throw new UserNotFoundException(userEmail);\n    }\n\n\t\tnewDatas['userId'] = user.id\n    newDatas['date'] = new Date(datas.date)\n\n    //Create the meal\n    return this._prismaService.meals.create({\n\t\t\tdata: newDatas\n\t\t});\n  }\n\n  public async update(datas: UpdateMealsDto, id: string) {\n    //Update the meal that we need to modify\n    return this._prismaService.meals.update({\n      data: datas,\n      where: {\n        id: Number(id)\n      }\n    })\n  }\n\n  public async find(userEmail: string, pattern: string) {\n    const user = await this._prismaService.user.findUnique({\n      where: {\n        email: userEmail\n      }\n    });\n    if (!user) {\n        throw new UserNotFoundException(userEmail);\n    }\n\n    return this._prismaService.meals.findMany({\n      where: {\n        userId: user.id,\n        name: {\n          startsWith: pattern,\n        }\n      }\n    })\n  }\n\n  public async findByDay(userEmail: string, date: string) {\n     //Get User with email\n\t\tconst user = await this._prismaService.user.findUnique({\n      where: {\n        email: userEmail\n      }\n    });\n    if (!user) {\n        throw new UserNotFoundException(userEmail);\n    }\n\n    var formattedDate = new Date(date)\n    return this._prismaService.meals.findMany({\n      where: {\n        userId: user.id,\n        date: formattedDate\n      }\n    })\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MessagesController.html":{"url":"controllers/MessagesController.html","title":"controller - MessagesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MessagesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/messages.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                messages\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getUserInfos\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        getUserInfos\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserInfos(query: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('getMessages')\n                \n            \n\n            \n                \n                    Defined in src/messages/messages.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { MessagesService } from './messages.service';\nimport { Controller, Get, Query } from '@nestjs/common';\nimport { Public } from '../common/decorators';\n\n@Controller('messages')\nexport class MessagesController {\n\tconstructor(private messagesUserService: MessagesService) { }\n\n    @Public()\n    @Get(\"getMessages\")\n    getUserInfos(@Query() query : { id : string}) {\n      return this.messagesUserService.getMessages(query.id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MessagesModule.html":{"url":"modules/MessagesModule.html","title":"module - MessagesModule","body":"\n                   \n\n\n\n\n    Modules\n    MessagesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_providers\n\n\n\n\nMessagesService\n\nMessagesService\n\n\n\nMessagesModule\n\nMessagesModule\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/messages/messages.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MessagesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MessagesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MessagesService } from './messages.service';\nimport { MessagesController } from './messages.controller';\n\n@Module({\n  providers: [MessagesService],\n  controllers: [MessagesController]\n})\nexport class MessagesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MessagesService.html":{"url":"injectables/MessagesService.html","title":"injectable - MessagesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MessagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messages/messages.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getMessages\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/messages/messages.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMessages(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/messages/messages.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ForbiddenException, Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport * as argon from 'argon2';\nimport { kill } from 'process';\n\n@Injectable()\nexport class MessagesService {\n\tconstructor(private prisma: PrismaService) { }\n\n\tpublic async getMessages(userId: string) {\n        return {\n\t\t\t\"messages\": [\n\t\t\t  {\n\t\t\t\t\"senderId\" : 1,\n\t\t\t\t\"receverId\": 2,\n\t\t\t\t\"date\": 1662418101,\n\t\t\t\t\"content\": \"Bonjour\",\n\t\t\t\t\"seen\": true\n\t\t\t  },\n\t\t\t  {\n\t\t\t\t\"senderId\" : 2,\n\t\t\t\t\"receverId\": 1,\n\t\t\t\t\"date\": 1662418101,\n\t\t\t\t\"content\": \"Bonjour Sidekick, comment vas tu ?\",\n\t\t\t\t\"seen\": true\n\t\t\t  },\n\t\t\t  {\n\t\t\t\t\"senderId\" : 2,\n\t\t\t\t\"receverId\": 1,\n\t\t\t\t\"date\": 1662418101,\n\t\t\t\t\"content\": \"As tu fais du sport aujourd'hui ?\",\n\t\t\t\t\"seen\": true\n\t\t\t  },\n\t\t\t  {\n\t\t\t\t\"senderId\" : 1,\n\t\t\t\t\"receverId\": 2,\n\t\t\t\t\"date\": 1662418101,\n\t\t\t\t\"content\": \"J'ai pas encore fait ma séance tu veux que on la fasse ensemble ?\",\n\t\t\t\t\"seen\": true\n\t\t\t  },\n\t\t\t  {\n\t\t\t\t\"senderId\" : 2,\n\t\t\t\t\"receverId\": 1,\n\t\t\t\t\"date\": 1662418101,\n\t\t\t\t\"content\": \"Avec plaisir !!\",\n\t\t\t\t\"seen\": false\n\t\t\t  },\n\t\t\t  {\n\t\t\t\t\"senderId\" : 2,\n\t\t\t\t\"receverId\": 1,\n\t\t\t\t\"date\": 1662418101,\n\t\t\t\t\"content\": \"On se fait ca à quelle heure ?\",\n\t\t\t\t\"seen\": false\n\t\t\t  }\n\t\t\t]\n\t\t  }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OpenffController.html":{"url":"controllers/OpenffController.html","title":"controller - OpenffController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OpenffController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/openff/openff.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                openff\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(request: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get(':request')\n                \n            \n\n            \n                \n                    Defined in src/openff/openff.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param } from '@nestjs/common';\nimport { Public } from '../common/decorators';\nimport { OpenffService } from './openff.service';\n\n@Controller('openff')\nexport class OpenffController {\n  constructor(private readonly openffService: OpenffService) {}\n\n  @Public()\n  @Get(\":request\")\n  findAll(@Param(\"request\") request: string) {\n    return this.openffService.findAll(request);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OpenffModule.html":{"url":"modules/OpenffModule.html","title":"module - OpenffModule","body":"\n                   \n\n\n\n\n    Modules\n    OpenffModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_OpenffModule\n\n\n\ncluster_OpenffModule_providers\n\n\n\n\nOpenffService\n\nOpenffService\n\n\n\nOpenffModule\n\nOpenffModule\n\nOpenffModule -->\n\nOpenffService->OpenffModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/openff/openff.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OpenffService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OpenffController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { OpenffService } from './openff.service';\nimport { OpenffController } from './openff.controller';\n\n@Module({\n  controllers: [OpenffController],\n  providers: [OpenffService]\n})\nexport class OpenffModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OpenffService.html":{"url":"injectables/OpenffService.html","title":"injectable - OpenffService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OpenffService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/openff/openff.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/openff/openff.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(request: string)\n                \n            \n\n\n            \n                \n                    Defined in src/openff/openff.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PrismaService } from \"../prisma/prisma.service\";\n\n@Injectable()\nexport class OpenffService {\n  constructor(private prismaService: PrismaService) {\n  }\n\n  async findAll(request: string) {\n    let data = [];\n    try {\n      const res = fetch(request, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      data = await res.then((response) => {\n        return response.json();\n      });\n    } catch (error) {\n      const products = await this.prismaService.openFoodFacts.findMany({});\n      const data = products.map((product) => ({\n        product_name: product.product_name ?? \"Und3f1nd\",\n        brands: product.brands ?? \"Und3f1ndBrand\",\n        nutriments: {\n          energy_kcal_100g: product.energy_kcal_100g ?? -1,\n          proteins_100g: product.proteins_100g ?? -1.0,\n          carbohydrates_100g: product.carbohydrates_100g ?? -1.0,\n          fat_100g: product.fat_100g ?? -1.0,\n        },\n        image_front_url: product.image_front_url ??\n          \"https://media.istockphoto.com/id/1357365823/vector/default-image-icon-vector-missing-picture-page-for-website-design-or-mobile-app-no-photo.jpg?s=612x612&w=0&k=20&c=PM_optEhHBTZkuJQLlCjLz-v3zzxp-1mpNQZsdjrbns=\",\n        nutrition_grades: product.nutriscore ?? \"Und3f1ndScore\",\n      }));\n      return data;\n    }\n    return data;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PlanningController.html":{"url":"controllers/PlanningController.html","title":"controller - PlanningController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PlanningController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/planning/planning.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                planning\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                deleteEvent\n                            \n                            \n                                    \n                                    Async\n                                deletePlanningByDay\n                            \n                            \n                                    \n                                    Async\n                                getPlanningByDay\n                            \n                            \n                                    \n                                    Async\n                                SetMeal\n                            \n                            \n                                    \n                                    Async\n                                setSportsExercises\n                            \n                            \n                                    \n                                    Async\n                                updateMeal\n                            \n                            \n                                    \n                                    Async\n                                updateSportExercise\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        deleteEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteEvent(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in src/planning/planning.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        deletePlanningByDay\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePlanningByDay(email: string, day: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/')\n                \n            \n\n            \n                \n                    Defined in src/planning/planning.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    day\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        getPlanningByDay\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPlanningByDay(email: string, day: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')\n                \n            \n\n            \n                \n                    Defined in src/planning/planning.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    day\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        SetMeal\n                        \n                    \n                \n            \n            \n                \n                    \n                    SetMeal(email: string, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/meal/')\n                \n            \n\n            \n                \n                    Defined in src/planning/planning.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        setSportsExercises\n                        \n                    \n                \n            \n            \n                \n                    \n                    setSportsExercises(email: string, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/exercise/')\n                \n            \n\n            \n                \n                    Defined in src/planning/planning.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        updateMeal\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMeal(id: string, email: string, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/meal/:id')\n                \n            \n\n            \n                \n                    Defined in src/planning/planning.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        updateSportExercise\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateSportExercise(id: string, email: string, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/exercise/:id')\n                \n            \n\n            \n                \n                    Defined in src/planning/planning.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Query, Body, Delete, Put, Param } from '@nestjs/common';\nimport { GetCurrentUserEmail } from \"../common/decorators/current_user.decorator\";\nimport { PlanningService } from './planning.service';\n\n@Controller('planning')\nexport class PlanningController {\n\tconstructor(private planningService: PlanningService) { }\n\n\t@Get('/')\n\tasync getPlanningByDay(@GetCurrentUserEmail() email: string, @Query('day') day: string) {\n\t\treturn this.planningService.getPlanningByDay(email, day)\n\t}\n\n\t@Delete('/')\n\tasync deletePlanningByDay(@GetCurrentUserEmail() email: string, @Query('day') day: string) {\n\t\treturn this.planningService.deletePlanningByDay(email, day)\n\t}\n\n\t@Post('/exercise/')\n\tasync setSportsExercises(@GetCurrentUserEmail() email: string, @Body() req: {day: number, repetitions: number, exercise_id: number, moment: string}) {\n\t\treturn this.planningService.setExercise(email, req)\n\t}\n\n\t@Put('/exercise/:id')\n\tasync updateSportExercise(@Param('id') id: string, @GetCurrentUserEmail() email: string, @Body() req: {day: string, repetitions: number, exercise_id: number, moment: string}) {\n\t\treturn this.planningService.updateExercise(req, id)\n\t}\n\n\t@Post('/meal/')\n\tasync SetMeal(@GetCurrentUserEmail() email: string, @Body() req: {day: number, meal_id: number, moment: string}) {\n\t\treturn this.planningService.setMeal(email, req)\n\t}\n\n\t@Put('/meal/:id')\n\tasync updateMeal(@Param('id') id: string, @GetCurrentUserEmail() email: string, @Body() req: {day: string, meal_id: number, moment: string}) {\n\t\treturn this.planningService.updateMeal(req, id)\n\t}\n\n\t@Delete('/:id')\n\tasync deleteEvent(@Param('id') id: string) {\n\t\treturn this.planningService.deleteEvent(id)\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PlanningModule.html":{"url":"modules/PlanningModule.html","title":"module - PlanningModule","body":"\n                   \n\n\n\n\n    Modules\n    PlanningModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PlanningModule\n\n\n\ncluster_PlanningModule_providers\n\n\n\n\nPlanningService\n\nPlanningService\n\n\n\nPlanningModule\n\nPlanningModule\n\nPlanningModule -->\n\nPlanningService->PlanningModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/planning/planning.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PlanningService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PlanningController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PlanningController } from './planning.controller';\nimport { PlanningService } from './planning.service';\n\n@Module({\n  controllers: [PlanningController],\n  providers: [PlanningService]\n})\nexport class PlanningModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PlanningService.html":{"url":"injectables/PlanningService.html","title":"injectable - PlanningService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PlanningService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/planning/planning.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteEvent\n                            \n                            \n                                    Async\n                                deletePlanningByDay\n                            \n                            \n                                    Async\n                                getPlanningByDay\n                            \n                            \n                                    Async\n                                setExercise\n                            \n                            \n                                    Async\n                                setMeal\n                            \n                            \n                                    Async\n                                updateExercise\n                            \n                            \n                                    Async\n                                updateMeal\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/planning/planning.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteEvent(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/planning/planning.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePlanningByDay\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePlanningByDay(email: string, day: string)\n                \n            \n\n\n            \n                \n                    Defined in src/planning/planning.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    day\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPlanningByDay\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPlanningByDay(email: string, day: string)\n                \n            \n\n\n            \n                \n                    Defined in src/planning/planning.service.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    day\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setExercise\n                        \n                    \n                \n            \n            \n                \n                    \n                    setExercise(email: string, req: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/planning/planning.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setMeal\n                        \n                    \n                \n            \n            \n                \n                    \n                    setMeal(email: string, req: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/planning/planning.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateExercise\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateExercise(req: literal type, id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/planning/planning.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMeal\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMeal(req: literal type, id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/planning/planning.service.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { EventCalendar } from \"@prisma/client\";\nimport { PrismaService } from '../prisma/prisma.service';\nimport UserNotFoundException from '../user_infos/exceptions/not-found.exception';\n\n@Injectable()\nexport class PlanningService {\n\tconstructor(\n\t\tprivate _prismaService: PrismaService,\n\t) {}\n\n\tasync setExercise(email: string, req: { day: number, repetitions: number, exercise_id: number, moment: string}) {\n\t\tconst user = await this._prismaService.user.findUnique({\n\t\t\twhere: {\n\t\t\t\temail: email,\n\t\t\t},\n\t\t});\n\t\tif (!user) {\n\t\t\tthrow new UserNotFoundException(email);\n\t\t}\n\t\treturn await this._prismaService.planning.create({\n\t\t\tdata: {\n\t\t\t\tuserId: user.id,\n\t\t\t\tday: new Date(Number(req.day)),\n\t\t\t\ttype: EventCalendar.SPORTS_EXERCISE,\n\t\t\t\tcontent: {\n\t\t\t\t\tid: req.exercise_id,\n\t\t\t\t\tmoment: req.moment,\n\t\t\t\t\trepetitions: req.repetitions\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n\n\tasync updateExercise(req: { day: string, repetitions: number, exercise_id: number, moment: string}, id: string) {\n\t\treturn await this._prismaService.planning.update({\n\t\t\twhere: {\n\t\t\t\tid: Number(id)\n\t\t\t},\n\t\t\tdata: {\n\t\t\t\tday: new Date(Number(req.day)),\n\t\t\t\ttype: EventCalendar.SPORTS_EXERCISE,\n\t\t\t\tcontent: {\n\t\t\t\t\tid: req.exercise_id,\n\t\t\t\t\tmoment: req.moment,\n\t\t\t\t\trepetitions: req.repetitions\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n\n\tasync setMeal(email: string, req: { day: number, moment: string, meal_id: number;}) {\n\t\tconst user = await this._prismaService.user.findUnique({\n\t\t\twhere: {\n\t\t\t\temail: email,\n\t\t\t},\n\t\t});\n\t\tif (!user) {\n\t\t\tthrow new UserNotFoundException(email);\n\t\t}\n\t\treturn await this._prismaService.planning.create({\n\t\t\tdata: {\n\t\t\t\tuserId: user.id,\n\t\t\t\tday: new Date(Number(req.day)),\n\t\t\t\ttype: EventCalendar.MEAL,\n\t\t\t\tcontent: {\n\t\t\t\t\tid: req.meal_id,\n\t\t\t\t\tmoment: req.moment,\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n\n\tasync updateMeal(req: { day: string, meal_id: number, moment: string}, id: string) {\n\t\treturn await this._prismaService.planning.update({\n\t\t\twhere: {\n\t\t\t\tid: Number(id)\n\t\t\t},\n\t\t\tdata: {\n\t\t\t\tday: new Date(Number(req.day)),\n\t\t\t\ttype: EventCalendar.MEAL,\n\t\t\t\tcontent: {\n\t\t\t\t\tid: req.meal_id,\n\t\t\t\t\tmoment: req.moment,\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n\n\n\tasync deleteEvent(id: string) {\n\t\treturn await this._prismaService.planning.delete({\n\t\t\twhere: {\n\t\t\t\tid: Number(id)\n\t\t\t}\n\t\t})\n\t}\n\tasync deletePlanningByDay(email: string, day: string) {\n\t\tconst user = await this._prismaService.user.findUnique({\n\t\t\twhere: {\n\t\t\t\temail: email,\n\t\t\t},\n\t\t});\n\t\tif (!user) {\n\t\t\tthrow new UserNotFoundException(email);\n\t\t}\n\t\treturn await this._prismaService.planning.deleteMany({\n\t\t\twhere: {\n\t\t\t\tday: new Date(Number(day))\n\t\t\t}\n\t\t})\n\t}\n\tasync getPlanningByDay(email: string, day: string) {\n\t\tconst user = await this._prismaService.user.findUnique({\n\t\t\twhere: {\n\t\t\t\temail: email,\n\t\t\t},\n\t\t});\n\t\tif (!user) {\n\t\t\tthrow new UserNotFoundException(email);\n\t\t}\n\t\treturn await this._prismaService.planning.findMany({\n\t\t\twhere: {\n\t\t\t\tday: new Date(Number(day))\n\t\t\t}\n\t\t})\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PreferencesController.html":{"url":"controllers/PreferencesController.html","title":"controller - PreferencesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PreferencesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/preferences/preferences.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                preferences\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                get\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/preferences/preferences.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dto: UpdatePreferenceDto, email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/preferences/preferences.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePreferenceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Body, Post } from '@nestjs/common';\nimport { GetCurrentUserEmail } from '../common/decorators';\nimport { UpdatePreferenceDto } from './dto/update-preference.dto';\nimport { PreferencesService } from './preferences.service';\n\n@Controller('preferences')\nexport class PreferencesController {\n  constructor(private readonly preferencesService: PreferencesService) {}\n\n  @Post()\n  update(@Body() dto: UpdatePreferenceDto, @GetCurrentUserEmail() email: string) {\n    return this.preferencesService.update(dto, email);\n  }\n\n  @Get()\n  get(@GetCurrentUserEmail() email: string) {\n    return this.preferencesService.get(email);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PreferencesModule.html":{"url":"modules/PreferencesModule.html","title":"module - PreferencesModule","body":"\n                   \n\n\n\n\n    Modules\n    PreferencesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PreferencesModule\n\n\n\ncluster_PreferencesModule_providers\n\n\n\n\nPreferencesService\n\nPreferencesService\n\n\n\nPreferencesModule\n\nPreferencesModule\n\nPreferencesModule -->\n\nPreferencesService->PreferencesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/preferences/preferences.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PreferencesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PreferencesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PreferencesService } from './preferences.service';\nimport { PreferencesController } from './preferences.controller';\n\n@Module({\n  controllers: [PreferencesController],\n  providers: [PreferencesService]\n})\nexport class PreferencesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PreferencesService.html":{"url":"injectables/PreferencesService.html","title":"injectable - PreferencesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PreferencesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/preferences/preferences.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/preferences/preferences.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/preferences/preferences.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(updatePreferenceDto: UpdatePreferenceDto, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/preferences/preferences.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updatePreferenceDto\n                                    \n                                                UpdatePreferenceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PrismaService } from \"../prisma/prisma.service\";\nimport { UpdatePreferenceDto } from \"./dto/update-preference.dto\";\n\n@Injectable()\nexport class PreferencesService {\n  constructor(private prismaService: PrismaService) {}\n\n  async update(updatePreferenceDto: UpdatePreferenceDto, email: string) {\n    const user = await this.prismaService.user.findUnique({\n      where: { email },\n    });\n\n    return await this.prismaService.preferences.updateMany({\n      where: { userId: user.id },\n      data: updatePreferenceDto,\n    });\n  }\n\n  async get(email: string) {\n    const user = await this.prismaService.user.findUnique({\n      where: { email },\n      include: { Preferences: true },\n    });\n\n    return user.Preferences;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ConfigModule } from '@nestjs/config';\nimport { Global, Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Global()\n@Module({\n  imports: [ConfigModule],\n  controllers: [],\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/prisma/prisma.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PrismaClient } from '.prisma/client';\nimport { Injectable, OnModuleDestroy, OnModuleInit } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit, OnModuleDestroy {\n  constructor(configService: ConfigService) {\n    super({\n      datasources: {\n        db: {\n          url: configService.get('DATABASE_URL'),\n        }\n      }\n    });\n  }\n\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async onModuleDestroy() {\n    await this.$disconnect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ReportsController.html":{"url":"controllers/ReportsController.html","title":"controller - ReportsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ReportsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reports/reports.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                reports\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                change\n                            \n                            \n                                    \n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        change\n                        \n                    \n                \n            \n            \n                \n                    \n                    change(currentUser: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('change')\n                \n            \n\n            \n                \n                    Defined in src/reports/reports.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUser\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(currentUser: string, reason: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/reports/reports.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currentUser\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    reason\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from \"@nestjs/common\";\nimport { GetCurrentUserEmail } from \"../common/decorators/current_user.decorator\";\nimport { ReportsService } from \"./reports.service\";\n\n@Controller(\"reports\")\nexport class ReportsController {\n  constructor(private readonly reportsService: ReportsService) {}\n\n  @Post()\n  async create(\n    @GetCurrentUserEmail() currentUser: string,\n    @Body(\"reason\") reason: string\n  ) {\n    return this.reportsService.create(currentUser, reason);\n  }\n\n  @Post(\"change\")\n  async change(\n    @GetCurrentUserEmail() currentUser: string\n  ) {\n    return this.reportsService.change(currentUser);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ReportsModule.html":{"url":"modules/ReportsModule.html","title":"module - ReportsModule","body":"\n                   \n\n\n\n\n    Modules\n    ReportsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ReportsModule\n\n\n\ncluster_ReportsModule_providers\n\n\n\n\nReportsService\n\nReportsService\n\n\n\nReportsModule\n\nReportsModule\n\nReportsModule -->\n\nReportsService->ReportsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/reports/reports.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ReportsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ReportsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ReportsService } from './reports.service';\nimport { ReportsController } from './reports.controller';\n\n@Module({\n  controllers: [ReportsController],\n  providers: [ReportsService]\n})\nexport class ReportsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReportsService.html":{"url":"injectables/ReportsService.html","title":"injectable - ReportsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReportsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/reports/reports.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                change\n                            \n                            \n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/reports/reports.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        change\n                        \n                    \n                \n            \n            \n                \n                    \n                    change(reporter: string)\n                \n            \n\n\n            \n                \n                    Defined in src/reports/reports.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reporter\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(reporter: string, reason: string)\n                \n            \n\n\n            \n                \n                    Defined in src/reports/reports.service.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reporter\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    reason\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { PrismaService } from \"../prisma/prisma.service\";\n\n@Injectable()\nexport class ReportsService {\n  constructor(private prisma: PrismaService) {}\n\n  async create(reporter: string, reason: string) {\n    const user = await this.prisma.user.findUnique({\n      where: { email: reporter },\n    });\n\n    const userInfo = await this.prisma.userData.findUnique({\n      where: {\n        userId: user.id,\n      },\n    });\n\n    if (!user) {\n      throw new NotFoundException(\"User not found\");\n    }\n\n    if (!userInfo.sidekick_id) {\n      throw new NotFoundException(\"User does not have a sidekick\");\n    }\n\n    await Promise.all([\n      this.prisma.userData.update({\n        where: {\n          userId: userInfo.sidekick_id,\n        },\n        data: {\n          sidekick_id: null,\n        },\n      }),\n      this.prisma.userData.update({\n        where: {\n          userId: user.id,\n        },\n        data: {\n          sidekick_id: null,\n        },\n      }),\n    ]);\n\n    return await this.prisma.reports.create({\n      data: {\n        reason: reason ?? \"No reason provided\",\n        reporterEmail: reporter,\n        userId: userInfo.sidekick_id,\n      },\n    });\n  }\n\n  async change(reporter: string) {\n    const user = await this.prisma.user.findUnique({\n      where: { email: reporter },\n    });\n\n    const userInfo = await this.prisma.userData.findUnique({\n      where: {\n        userId: user.id,\n      },\n    });\n\n    if (!user) {\n      throw new NotFoundException(\"User not found\");\n    }\n\n    if (!userInfo.sidekick_id) {\n      throw new NotFoundException(\"User does not have a sidekick\");\n    }\n\n    await Promise.all([\n      this.prisma.userData.update({\n        where: {\n          userId: userInfo.sidekick_id,\n        },\n        data: {\n          sidekick_id: null,\n        },\n      }),\n      this.prisma.userData.update({\n        where: {\n          userId: user.id,\n        },\n        data: {\n          sidekick_id: null,\n        },\n      }),\n    ]);\n\n    return await this.prisma.reports.create({\n      data: {\n        reason: \"Change\",\n        reporterEmail: reporter,\n        userId: userInfo.sidekick_id,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Rooms.html":{"url":"classes/Rooms.html","title":"class - Rooms","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Rooms\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/chat.helper.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                rooms\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addRoom\n                            \n                            \n                                addUserToRoom\n                            \n                            \n                                findUserBySocketId\n                            \n                            \n                                getRoom\n                            \n                            \n                                getRoomUsers\n                            \n                            \n                                removeRoom\n                            \n                            \n                                removeUserFromRoom\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/chat/chat.helper.ts:13\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        rooms\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Room[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/chat/chat.helper.ts:13\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addRoom\n                        \n                    \n                \n            \n            \n                \naddRoom(room: Room)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.helper.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    room\n                                    \n                                                Room\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addUserToRoom\n                        \n                    \n                \n            \n            \n                \naddUserToRoom(roomId: string, user: SocketUser)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.helper.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    roomId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                SocketUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findUserBySocketId\n                        \n                    \n                \n            \n            \n                \nfindUserBySocketId(socketId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.helper.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socketId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRoom\n                        \n                    \n                \n            \n            \n                \ngetRoom(roomId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.helper.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    roomId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRoomUsers\n                        \n                    \n                \n            \n            \n                \ngetRoomUsers(roomId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.helper.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    roomId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeRoom\n                        \n                    \n                \n            \n            \n                \nremoveRoom(roomId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.helper.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    roomId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeUserFromRoom\n                        \n                    \n                \n            \n            \n                \nremoveUserFromRoom(roomId: string, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.helper.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    roomId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export type SocketUser = {\n  socketId: string;\n  userId: string;\n  sidekickId: string;\n};\n\nexport type Room = {\n  name: string;\n  users: SocketUser[];\n};\n\nexport class Rooms {\n  private rooms: Room[] = [];\n\n  constructor() {}\n\n  addRoom(room: Room) {\n    this.rooms.push(room);\n  }\n\n  removeRoom(roomId: string) {\n    this.rooms = this.rooms.filter((room) => room.name !== roomId);\n  }\n\n  getRoom(roomId: string) {\n    return this.rooms.find((room) => room.name === roomId);\n  }\n\n  addUserToRoom(roomId: string, user: SocketUser) {\n    const room = this.getRoom(roomId);\n    if (room) {\n      room.users.push(user);\n    }\n  }\n\n  removeUserFromRoom(roomId: string, userId: string) {\n    const room = this.getRoom(roomId);\n    if (room) {\n      room.users = room.users.filter((user) => user.userId !== userId);\n    }\n  }\n\n  getRoomUsers(roomId: string) {\n    const room = this.getRoom(roomId);\n    if (room) {\n      return room.users;\n    }\n  }\n\n  findUserBySocketId(socketId: string) {\n    for (const room of this.rooms) {\n      const user = room.users.find((user) => user.socketId === socketId);\n      if (user) {\n        return user;\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SportsExerciseController.html":{"url":"controllers/SportsExerciseController.html","title":"controller - SportsExerciseController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SportsExerciseController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sports_exercises/sports_exercises.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                sports-exercise\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                add\n                            \n                            \n                                    \n                                find\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                search\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        add\n                        \n                    \n                \n            \n            \n                \n                    \n                    add(req: any, dto: SportsExerciseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('add')\n                \n            \n\n            \n                \n                    Defined in src/sports_exercises/sports_exercises.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                SportsExerciseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n            \n                \n                    Defined in src/sports_exercises/sports_exercises.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')\n                \n            \n\n            \n                \n                    Defined in src/sports_exercises/sports_exercises.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('remove/:id')\n                \n            \n\n            \n                \n                    Defined in src/sports_exercises/sports_exercises.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        search\n                        \n                    \n                \n            \n            \n                \n                    \n                    search(req: any, pattern: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('search')\n                \n            \n\n            \n                \n                    Defined in src/sports_exercises/sports_exercises.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pattern\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, dto: SportsExerciseDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('update/:id')\n                \n            \n\n            \n                \n                    Defined in src/sports_exercises/sports_exercises.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                SportsExerciseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Request, Body, Param, Delete, Put, Get } from '@nestjs/common';\nimport { SportsExerciseDto } from './dto/sports_exercices.dto';\nimport { SportsExerciseService } from './sports_exercises.service';\n\n@Controller('sports-exercise')\nexport class SportsExerciseController {\n\tconstructor(private sportsExercicseService: SportsExerciseService) { }\n\n\t@Get(\"/:id\")\n\tfind(@Param('id') id: string) {\n\t\treturn this.sportsExercicseService.find(id);\n\t}\n\t\n\t@Get(\"/\")\n\tfindAll(@Request() req: any) {\n\t\treturn this.sportsExercicseService.findAll(req.user.email);\n\t}\n\n\t@Post(\"add\")\n\tadd(@Request() req: any, @Body() dto: SportsExerciseDto) {\n\t  return this.sportsExercicseService.add(dto, req.user.email);\n\t}\n\n\t@Put(\"update/:id\")\n\tupdate(@Param('id') id: string, @Body() dto: SportsExerciseDto) {\n\t\treturn this.sportsExercicseService.update(id, dto);\n\t}\n\n\t@Delete(\"remove/:id\")\n\tremove(@Param('id') id: string) {\n\t\treturn this.sportsExercicseService.remove(id);\n\t}\n\n\t@Post(\"search\")\n\tsearch(@Request() req: any, @Body(\"pattern\") pattern: string) {\n\t\treturn this.sportsExercicseService.search(req.user.email, pattern);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SportsExerciseDto.html":{"url":"classes/SportsExerciseDto.html","title":"class - SportsExerciseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SportsExerciseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sports_exercises/dto/sports_exercices.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/sports_exercises/dto/sports_exercices.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sports_exercises/dto/sports_exercices.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/sports_exercises/dto/sports_exercices.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IsNotEmpty, IsString} from 'class-validator';\n\nexport class SportsExerciseDto {\n    userId: string;\n    id: number;\n\n    @IsNotEmpty()\n    @IsString()\n    name: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SportsExerciseModule.html":{"url":"modules/SportsExerciseModule.html","title":"module - SportsExerciseModule","body":"\n                   \n\n\n\n\n    Modules\n    SportsExerciseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SportsExerciseModule\n\n\n\ncluster_SportsExerciseModule_providers\n\n\n\n\nSportsExerciseService\n\nSportsExerciseService\n\n\n\nSportsExerciseModule\n\nSportsExerciseModule\n\nSportsExerciseModule -->\n\nSportsExerciseService->SportsExerciseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/sports_exercises/sports_exercises.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SportsExerciseService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SportsExerciseController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SportsExerciseService } from './sports_exercises.service';\nimport { SportsExerciseController } from './sports_exercises.controller';\n\n@Module({\n  providers: [SportsExerciseService],\n  controllers: [SportsExerciseController]\n})\nexport class SportsExerciseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SportsExerciseService.html":{"url":"injectables/SportsExerciseService.html","title":"injectable - SportsExerciseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SportsExerciseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sports_exercises/sports_exercises.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                add\n                            \n                            \n                                    Public\n                                    Async\n                                find\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                search\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/sports_exercises/sports_exercises.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        add\n                        \n                    \n                \n            \n            \n                \n                    \n                    add(datas: SportsExerciseDto, userEmail: string)\n                \n            \n\n\n            \n                \n                    Defined in src/sports_exercises/sports_exercises.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    datas\n                                    \n                                                SportsExerciseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userEmail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/sports_exercises/sports_exercises.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/sports_exercises/sports_exercises.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/sports_exercises/sports_exercises.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                    \n                    search(userEmail: string, pattern: string)\n                \n            \n\n\n            \n                \n                    Defined in src/sports_exercises/sports_exercises.service.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userEmail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pattern\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, datas: SportsExerciseDto)\n                \n            \n\n\n            \n                \n                    Defined in src/sports_exercises/sports_exercises.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    datas\n                                    \n                                                SportsExerciseDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ConflictException, NotFoundException } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { SportsExerciseDto } from './dto/sports_exercices.dto';\nimport UserNotFoundException from './exceptions/not-found.exception';\n\n@Injectable()\nexport class SportsExerciseService {\n\tconstructor(private _prismaService: PrismaService) {}\n\n\tpublic async find(id: string) {\n\t\tconst exercise = await this._prismaService.sports_exercices.findUnique({\n\t\t\twhere: {\n\t\t\t\tid: Number(id)\n\t\t\t}\n\t\t})\n\n\t\tif (!exercise) {\n\t\t\tthrow new NotFoundException('No exercise with the id \\'' + id + '\\' found.')\n\t\t} else {\n\t\t\treturn exercise\n\t\t}\n\t}\n\n\tpublic async findAll(email: string) {\n\t\tconst user = await this._prismaService.user.findUnique({\n\t\t\twhere: {\n\t\t\t\temail: email\n\t\t\t}\n\t\t});\n\t\tif (!user) {\n\t\t\tthrow new UserNotFoundException(email);\n\t\t}\n\n\t\treturn this._prismaService.sports_exercices.findMany({\n\t\t\twhere: {\n\t\t\t\tuserId: user.id,\n\t\t\t}\n\t\t})\n\t}\n\n\tpublic async add(datas: SportsExerciseDto, userEmail: string) {\n\t\tconst user = await this._prismaService.user.findUnique({\n\t\t\twhere: {\n\t\t\t\temail: userEmail\n\t\t\t}\n\t\t});\n\t\tif (!user) {\n\t\t\tthrow new UserNotFoundException(userEmail);\n\t\t}\n\t\t\n\t\tconst exercise = await this._prismaService.sports_exercices.findFirst({\n\t\t\twhere: {\n\t\t\t\tname: datas.name,\n\t\t\t\tuserId: user.id\n\t\t\t}\n\t\t});\n\t\tif (!exercise) {\n\t\t\tdatas.userId = user.id\n\t\t\treturn this._prismaService.sports_exercices.create({\n\t\t\t\tdata: datas\n\t\t\t});\n\t\t} else {\n\t\t\tthrow new ConflictException('An exercise with the name \\'' + datas.name + '\\' already exist for this user.');\n\t\t}\n\t}\n\n\tpublic async remove(id: string) {\n\t\tawait this._prismaService.sports_exercices.delete({\n\t\t\twhere: {\n\t\t\t\tid: Number(id)\n\t\t\t},\n\t\t})\n\t}\n\n\tpublic async update(id: string, datas: SportsExerciseDto) {\n\t\treturn this._prismaService.sports_exercices.update({\n\t\t\tdata: datas,\n\t\t\twhere: {\n\t\t\t\tid: Number(id)\n\t\t\t}\n\t\t})\n\t}\n\n\tpublic async search(userEmail: string, pattern: string) {\n\t\tconst user = await this._prismaService.user.findUnique({\n\t\t\twhere: {\n\t\t\t\temail: userEmail\n\t\t\t}\n\t\t});\n\t\tif (!user) {\n\t\t\tthrow new UserNotFoundException(userEmail);\n\t\t}\n\n\t\treturn this._prismaService.sports_exercices.findMany({\n\t\t\twhere: {\n\t\t\t\tuserId: user.id,\n\t\t\t\tname: {\n\t\t\t\t\tstartsWith: pattern,\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StepsController.html":{"url":"controllers/StepsController.html","title":"controller - StepsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StepsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/steps/steps.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getCalories\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getCalories\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCalories(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('steps')\n                \n            \n\n            \n                \n                    Defined in src/steps/steps.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query, Request } from \"@nestjs/common\";\nimport { StepsService } from \"./steps.service\";\n\n@Controller()\nexport class StepsController {\n  constructor(private stepsService: StepsService) {}\n\n  @Get(\"steps\")\n  getCalories(@Request() req: any) {\n    return this.stepsService.getStepsById(req.user.email);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StepsModule.html":{"url":"modules/StepsModule.html","title":"module - StepsModule","body":"\n                   \n\n\n\n\n    Modules\n    StepsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StepsModule\n\n\n\ncluster_StepsModule_providers\n\n\n\n\nPrismaService\n\nPrismaService\n\n\n\nStepsModule\n\nStepsModule\n\nStepsModule -->\n\nPrismaService->StepsModule\n\n\n\n\n\nStepsService\n\nStepsService\n\nStepsModule -->\n\nStepsService->StepsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/steps/steps.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            StepsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StepsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { StepsService } from \"./steps.service\";\nimport { StepsController } from \"./steps.controller\";\nimport { PrismaService } from '../prisma/prisma.service';\n\n@Module({\n  providers: [StepsService, PrismaService],\n  controllers: [StepsController],\n})\nexport class StepsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StepsService.html":{"url":"injectables/StepsService.html","title":"injectable - StepsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StepsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/steps/steps.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getStepsById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/steps/steps.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getStepsById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStepsById(userEmail: string)\n                \n            \n\n\n            \n                \n                    Defined in src/steps/steps.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userEmail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport UserNotFoundException from \"../user_infos/exceptions/not-found.exception\";\n\n@Injectable()\nexport class StepsService {\n  constructor(private _prismaService: PrismaService) {}\n\n  public async getStepsById(userEmail: string) {\n    const userSteps = await this._prismaService.user.findUnique({\n      where: {\n        email: userEmail\n      }\n    })\n    if (!userSteps) {\n      throw new UserNotFoundException(userEmail);\n    }\n\n    const user = await this._prismaService.userData.findUnique({\n      where: {\n        userId: userSteps.id\n      }\n    });\n    if (!user) {\n      throw new UserNotFoundException(userEmail);\n    }\n\n    const step_data =  await this._prismaService.steps.findMany({\n      where: {\n        userId: userSteps.id\n      }\n    });\n\n    return {\n      data: step_data\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateBugsBetaDto.html":{"url":"classes/UpdateBugsBetaDto.html","title":"class - UpdateBugsBetaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateBugsBetaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/bugs_beta/dto/update.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                    \n                                    \n                                page\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bugs_beta/dto/update.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/bugs_beta/dto/update.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Page\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bugs_beta/dto/update.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/bugs_beta/dto/update.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Page } from '@prisma/client';\nimport {IsOptional, IsString} from 'class-validator';\n\nexport class UpdateBugsBetaDto {\n    id: number;\n\n    @IsOptional()\n    @IsString()\n    title: string;\n\n    @IsOptional()\n    @IsString()\n    description: string;\n\n    @IsOptional()\n    @IsString()\n    page: Page;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateExercisesLibraryDto.html":{"url":"classes/UpdateExercisesLibraryDto.html","title":"class - UpdateExercisesLibraryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateExercisesLibraryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exercises_library/dto/update-exercises_library.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/exercises_library/dto/update-exercises_library.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateExercisesLibraryDto } from './create-exercises_library.dto';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class UpdateExercisesLibraryDto extends PartialType(CreateExercisesLibraryDto) {\n  @IsNotEmpty()\n  @IsString()\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMealsDto.html":{"url":"classes/UpdateMealsDto.html","title":"class - UpdateMealsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMealsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meals/dto/update.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                date\n                            \n                            \n                                id\n                            \n                            \n                                    \n                                ingredients\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                period\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meals/dto/update.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/meals/dto/update.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        ingredients\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meals/dto/update.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meals/dto/update.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        period\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meals/dto/update.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/meals/dto/update.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IsArray, IsDate, IsInt, IsJSON, IsNotEmpty, IsOptional, IsString} from 'class-validator';\n\nexport class UpdateMealsDto {\n    userId: string;\n    id: number;\n\n    @IsOptional()\n    @IsString()\n    period: string;\n\n    @IsOptional()\n    @IsString()\n    name: string;\n\n\t@IsOptional()\n    @IsString()\n    date: Date;\n\n\t@IsOptional()\n    ingredients: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateOpenffDto.html":{"url":"classes/UpdateOpenffDto.html","title":"class - UpdateOpenffDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateOpenffDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/openff/dto/update-openff.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateOpenffDto } from './create-openff.dto';\n\nexport class UpdateOpenffDto extends PartialType(CreateOpenffDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePreferenceDto.html":{"url":"classes/UpdatePreferenceDto.html","title":"class - UpdatePreferenceDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePreferenceDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/preferences/dto/update-preference.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                darkMode\n                            \n                            \n                                    \n                                    \n                                notifications\n                            \n                            \n                                    \n                                    \n                                sounds\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        darkMode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/preferences/dto/update-preference.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        notifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/preferences/dto/update-preference.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        sounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/preferences/dto/update-preference.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean, IsOptional } from \"class-validator\";\n\nexport class UpdatePreferenceDto {\n  @IsOptional()\n  @IsBoolean()\n  darkMode: boolean;\n\n  @IsOptional()\n  @IsBoolean()\n  sounds: boolean;\n\n  @IsOptional()\n  @IsBoolean()\n  notifications: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserInfoService.html":{"url":"injectables/UserInfoService.html","title":"injectable - UserInfoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserInfoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user_infos/user_infos.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                add\n                            \n                            \n                                    Public\n                                    Async\n                                find\n                            \n                            \n                                    Public\n                                    Async\n                                findSidekick\n                            \n                            \n                                    Public\n                                    Async\n                                findUsersWithoutSidekick\n                            \n                            \n                                    Async\n                                getUserfromId\n                            \n                            \n                                    Public\n                                    Async\n                                linkUsers\n                            \n                            \n                                    Async\n                                setAvatar\n                            \n                            \n                                    Async\n                                setGoal\n                            \n                            \n                                    Async\n                                setSports\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_prismaService: PrismaService, _fileService: FileService)\n                    \n                \n                        \n                            \n                                Defined in src/user_infos/user_infos.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _fileService\n                                                  \n                                                        \n                                                                        FileService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        add\n                        \n                    \n                \n            \n            \n                \n                    \n                    add(datas: UserInfosDto, userEmail: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user_infos/user_infos.service.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    datas\n                                    \n                                                UserInfosDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userEmail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(userEmail: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user_infos/user_infos.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userEmail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findSidekick\n                        \n                    \n                \n            \n            \n                \n                    \n                    findSidekick(userEmail: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user_infos/user_infos.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userEmail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findUsersWithoutSidekick\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUsersWithoutSidekick()\n                \n            \n\n\n            \n                \n                    Defined in src/user_infos/user_infos.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserfromId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserfromId(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user_infos/user_infos.service.ts:185\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        linkUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    linkUsers(req: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/user_infos/user_infos.service.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    setAvatar(email: string, file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/user_infos/user_infos.service.ts:197\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setGoal\n                        \n                    \n                \n            \n            \n                \n                    \n                    setGoal(email: string, goal: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user_infos/user_infos.service.ts:239\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    goal\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setSports\n                        \n                    \n                \n            \n            \n                \n                    \n                    setSports(email: string, sports: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user_infos/user_infos.service.ts:219\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sports\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(dto: EditInfosDto, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user_infos/user_infos.service.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                EditInfosDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Gender, SportFrequence, Goal } from \"@prisma/client\";\nimport {\n  ForbiddenException,\n  HttpStatus,\n  Injectable,\n  ConflictException,\n} from \"@nestjs/common\";\nimport { PrismaService } from \"../prisma/prisma.service\";\nimport UserNotFoundException from \"./exceptions/not-found.exception\";\nimport { UserWithoutSidekickException } from \"./exceptions/not-found.exception\";\nimport { UserInfosDto } from \"./dto/user.dto\";\nimport { EditInfosDto } from \"./dto/edit.dto\";\nimport { FileService } from \"../file/file.service\";\n\n@Injectable()\nexport class UserInfoService {\n  constructor(\n    private _prismaService: PrismaService,\n    private _fileService: FileService\n  ) {}\n\n  public async findUsersWithoutSidekick() {\n    const usersDatas = await this._prismaService.userData.findMany({\n      where: {\n        sidekick_id: null,\n      },\n    });\n    return usersDatas;\n  }\n\n  public async find(userEmail: string) {\n    const user = await this._prismaService.user.findUnique({\n      where: {\n        email: userEmail,\n      },\n    });\n    if (!user) {\n      throw new UserNotFoundException(userEmail);\n    }\n    const userDatas = await this._prismaService.userData.findUnique({\n      where: {\n        userId: user.id,\n      },\n    });\n    userDatas[\"email\"] = userEmail;\n    return userDatas;\n  }\n\n  public async findSidekick(userEmail: string) {\n    const user = await this._prismaService.user.findUnique({\n      where: {\n        email: userEmail,\n      },\n    });\n    if (!user) {\n      throw new UserNotFoundException(userEmail);\n    }\n    const userDatas = await this._prismaService.userData.findUnique({\n      where: {\n        userId: user.id,\n      },\n    });\n    if (!userDatas.sidekick_id) {\n      throw new UserWithoutSidekickException(user.id);\n    }\n    const sidekickDatas = await this._prismaService.userData.findUnique({\n      where: {\n        userId: userDatas.sidekick_id,\n      },\n    });\n    return {\n      birth_date: sidekickDatas.birth_date,\n      gender: sidekickDatas.gender,\n      username: sidekickDatas.username,\n      avatar: sidekickDatas.avatar,\n      lastname: sidekickDatas.lastname,\n      firstname: sidekickDatas.firstname,\n      bio: sidekickDatas.description,\n      frequence_sportive: sidekickDatas.sport_frequence,\n    };\n  }\n\n  public async add(datas: UserInfosDto, userEmail: string) {\n    var newDatas = datas;\n    newDatas[\"size\"] = Number(datas[\"size\"]);\n    newDatas[\"weight\"] = Number(datas[\"weight\"]);\n    newDatas[\"gender\"] = Gender[datas[\"gender\"]];\n    newDatas[\"birth_date\"] = new Date(datas.birth_date);\n    newDatas[\"sport_frequence\"] =\n    SportFrequence[datas[\"sport_frequence\"].toUpperCase()];\n    var user = await this._prismaService.user.findUnique({\n      where: {\n        email: userEmail,\n      },\n    });\n\n    if (!user) {\n      throw new UserNotFoundException(userEmail);\n    }\n    newDatas[\"userId\"] = user.id;\n\n    const userInfos = await this._prismaService.userData.findFirst({\n\t\t\twhere: {\n\t\t\t\tusername: newDatas.username,\n\t\t\t}\n\t\t});\n\t\tif (!userInfos) {\n\t\t\treturn await this._prismaService.userData.create({\n        data: newDatas,\n      });\n\t\t} else {\n\t\t\tthrow new ConflictException('An user with the username \\'' + newDatas.username + '\\' already exist for this user.');\n\t\t}\n  }\n\n  async update(dto: EditInfosDto, email: string) {\n    const data = dto;\n\n    data.size ? (data.size = Number(dto.size)) : null;\n    data.weight ? (data.weight = Number(dto.weight)) : null;\n    data.gender ? (data.gender = Gender[data.gender]) : null;\n    data.sport_frequence\n      ? (data.sport_frequence =\n          SportFrequence[dto.sport_frequence?.toUpperCase()])\n      : null;\n\n    const user = await this._prismaService.user.findUnique({\n      where: {\n        email: email,\n      },\n    });\n\n    if (!user) {\n      throw new UserNotFoundException(email);\n    }\n\n    if (data.username) {\n      const existingUser = await this._prismaService.userData.findFirst({\n        where: {\n          username: data.username,\n        },\n      });\n\n      if (existingUser && existingUser.userId !== user.id) {\n        throw new ConflictException(`An user with the username '${data.username}' already exists.`);\n      }\n    }\n\n    return await this._prismaService.userData.update({\n      where: {\n        userId: user.id,\n      },\n      data: data,\n    });\n  }\n\n  public async linkUsers(req: { id1: string; id2: string }) {\n    let { id1, id2 } = req;\n    const user1 = await this._prismaService.userData.findUnique({\n      where: { userId: id1 },\n    });\n    const user2 = await this._prismaService.userData.findUnique({\n      where: { userId: id2 },\n    });\n\n    if (user1.sidekick_id) {\n      throw new ConflictException(\"The user with id '\" + id1 + \"'\");\n    } else if (user2.sidekick_id) {\n      throw new ConflictException(\"The user with id '\" + id2 + \"'\");\n    } else {\n      await Promise.all([\n        this._prismaService.userData.update({\n          where: { userId: id1 },\n          data: { sidekick_id: id2 },\n        }),\n        this._prismaService.userData.update({\n          where: { userId: id2 },\n          data: { sidekick_id: id1 },\n        }),\n      ]);\n    }\n    return HttpStatus.OK;\n  }\n\n  async getUserfromId(id: string) {\n    const user = await this._prismaService.userData.findUnique({\n      where: {\n        userId: id,\n      },\n    });\n    if (!user) {\n      throw new UserNotFoundException(id);\n    }\n    return user;\n  }\n\n  async setAvatar(email: string, file: Express.Multer.File) {\n    const user = await this._prismaService.user.findUnique({\n      where: {\n        email: email,\n      },\n    });\n    if (!user) {\n      throw new UserNotFoundException(email);\n    }\n\n    const avatar = await this._fileService.uploadPublicFile(file);\n\n    return this._prismaService.userData.update({\n      where: {\n        userId: user.id,\n      },\n      data: {\n        avatar: avatar,\n      },\n    });\n  }\n\n  async setSports(email :string, sports: string) {\n    const user = await this._prismaService.user.findUnique({\n      where: {\n        email: email,\n      },\n    });\n    if (!user) {\n      throw new UserNotFoundException(email);\n    }\n\n    return this._prismaService.userData.update({\n      where: {\n        userId: user.id,\n      },\n      data: {\n        sports: sports,\n      },\n    });\n  }\n\n  async setGoal(email :string, goal: string) {\n    const user = await this._prismaService.user.findUnique({\n      where: {\n        email: email,\n      },\n    });\n    if (!user) {\n      throw new UserNotFoundException(email);\n    }\n\n    return this._prismaService.userData.update({\n      where: {\n        userId: user.id,\n      },\n      data: {\n        goal:  Goal[goal.toUpperCase()]\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserInfosController.html":{"url":"controllers/UserInfosController.html","title":"controller - UserInfosController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserInfosController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user_infos/user_infos.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user_infos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                add\n                            \n                            \n                                    \n                                find\n                            \n                            \n                                    \n                                findSidekick\n                            \n                            \n                                    \n                                    \n                                findUsersWithoutSidekick\n                            \n                            \n                                    \n                                    \n                                linkUsers\n                            \n                            \n                                    \n                                    \n                                setAvatar\n                            \n                            \n                                    \n                                setGoal\n                            \n                            \n                                    \n                                setSports\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        add\n                        \n                    \n                \n            \n            \n                \n                    \n                    add(req: any, dto: UserInfosDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')\n                \n            \n\n            \n                \n                    Defined in src/user_infos/user_infos.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UserInfosDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')\n                \n            \n\n            \n                \n                    Defined in src/user_infos/user_infos.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        findSidekick\n                        \n                    \n                \n            \n            \n                \n                    \n                    findSidekick(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('sidekick')\n                \n            \n\n            \n                \n                    Defined in src/user_infos/user_infos.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        findUsersWithoutSidekick\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUsersWithoutSidekick()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('find_users_without_sidekick')\n                \n            \n\n            \n                \n                    Defined in src/user_infos/user_infos.controller.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        linkUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    linkUsers(req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('link_users')\n                \n            \n\n            \n                \n                    Defined in src/user_infos/user_infos.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        setAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    setAvatar(email: string, file)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/avatar')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/user_infos/user_infos.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        setGoal\n                        \n                    \n                \n            \n            \n                \n                    \n                    setGoal(email: string, goal: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/goal')\n                \n            \n\n            \n                \n                    Defined in src/user_infos/user_infos.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    goal\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        setSports\n                        \n                    \n                \n            \n            \n                \n                    \n                    setSports(email: string, sports: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/sports')\n                \n            \n\n            \n                \n                    Defined in src/user_infos/user_infos.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sports\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(req: any, dto: EditInfosDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/update')\n                \n            \n\n            \n                \n                    Defined in src/user_infos/user_infos.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                EditInfosDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  FileTypeValidator,\n  Get,\n  MaxFileSizeValidator,\n  ParseFilePipe,\n  Post,\n  Put,\n  Query,\n  Request,\n  UploadedFile,\n  UseInterceptors,\n} from \"@nestjs/common\";\nimport { UserInfoService } from \"./user_infos.service\";\nimport { UserInfosDto } from \"./dto/user.dto\";\nimport { Public, GetCurrentUserEmail } from \"../common/decorators\";\nimport { EditInfosDto } from \"./dto/edit.dto\";\nimport { FileInterceptor } from \"@nestjs/platform-express\";\nimport * as path from \"path\";\n\n@Controller(\"user_infos\")\nexport class UserInfosController {\n  constructor(private userInfoService: UserInfoService) { }\n\n  @Get(\"/\")\n  find(@Request() req: any) {\n    return this.userInfoService.find(req.user.email);\n  }\n\n  @Get(\"sidekick\")\n  findSidekick(@Request() req: any) {\n    return this.userInfoService.findSidekick(req.user.email);\n  }\n\n  @Post(\"/\")\n  add(@Request() req: any, @Body() dto: UserInfosDto) {\n    return this.userInfoService.add(dto, req.user.email);\n  }\n\n  @Put(\"/update\")\n  update(@Request() req: any, @Body() dto: EditInfosDto) {\n    return this.userInfoService.update(dto, req.user.email);\n  }\n\n  @Post(\"/sports\")\n  setSports(@GetCurrentUserEmail() email: string, @Body(\"sports\") sports: string) {\n    return this.userInfoService.setSports(email, sports);\n  }\n\n  @Post(\"/goal\")\n  setGoal(@GetCurrentUserEmail() email: string, @Body(\"goal\") goal: string) {\n    return this.userInfoService.setGoal(email, goal);\n  }\n\n  @Post('/avatar')\n  @UseInterceptors(FileInterceptor('file', {\n    limits: {\n      fileSize: 100000000, // file size limit\n    },\n    fileFilter: (req, file, cb) => {\n      const fileTypes = /jpeg|jpg|png/; // acceptable file types\n      const extname = fileTypes.test(path.extname(file.originalname).toLowerCase());\n      const mimetype = fileTypes.test(file.mimetype);\n\n      if (extname && mimetype) {\n        return cb(null, true);\n      } else {\n        return cb(new Error('Only images are allowed'), false);\n      }\n    },\n  }))\n  setAvatar(@GetCurrentUserEmail() email: string, @UploadedFile() file) {\n    return this.userInfoService.setAvatar(email, file);\n  }\n\n  @Public()\n  @Post(\"link_users\")\n  linkUsers(@Body() req: { id1: string; id2: string }) {\n    return this.userInfoService.linkUsers(req);\n  }\n\n  @Public()\n  @Get(\"find_users_without_sidekick\")\n  findUsersWithoutSidekick() {\n    return this.userInfoService.findUsersWithoutSidekick();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserInfosDto.html":{"url":"classes/UserInfosDto.html","title":"class - UserInfosDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserInfosDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user_infos/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                birth_date\n                            \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                firstname\n                            \n                            \n                                    \n                                gender\n                            \n                            \n                                    \n                                    \n                                lastname\n                            \n                            \n                                    \n                                    \n                                size\n                            \n                            \n                                    \n                                sport_frequence\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                            \n                                    \n                                    \n                                weight\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        birth_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user_infos/dto/user.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user_infos/dto/user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user_infos/dto/user.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Gender\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user_infos/dto/user.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user_infos/dto/user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user_infos/dto/user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sport_frequence\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SportFrequence\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user_infos/dto/user.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user_infos/dto/user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        weight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user_infos/dto/user.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Gender, SportFrequence } from \"@prisma/client\";\nimport { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class UserInfosDto {\n  @IsNotEmpty()\n  @IsString()\n  firstname: string;\n\n  @IsNotEmpty()\n  @IsString()\n  lastname: string;\n\n  @IsNotEmpty()\n  @IsString()\n  description: string;\n\n  @IsNotEmpty()\n  @IsString()\n  username: string;\n\n  @IsNotEmpty()\n  @IsString()\n  birth_date: Date;\n\n  @IsNotEmpty()\n  @IsString()\n  size: number;\n\n  @IsNotEmpty()\n  @IsString()\n  weight: number;\n\n  @IsNotEmpty()\n  gender: Gender;\n\n  @IsNotEmpty()\n  sport_frequence: SportFrequence;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserInfosModule.html":{"url":"modules/UserInfosModule.html","title":"module - UserInfosModule","body":"\n                   \n\n\n\n\n    Modules\n    UserInfosModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserInfosModule\n\n\n\ncluster_UserInfosModule_exports\n\n\n\ncluster_UserInfosModule_imports\n\n\n\ncluster_UserInfosModule_providers\n\n\n\n\nFileModule\n\nFileModule\n\n\n\nUserInfosModule\n\nUserInfosModule\n\nUserInfosModule -->\n\nFileModule->UserInfosModule\n\n\n\n\n\nUserInfoService \n\nUserInfoService \n\nUserInfoService  -->\n\nUserInfosModule->UserInfoService \n\n\n\n\n\nUserInfoService\n\nUserInfoService\n\nUserInfosModule -->\n\nUserInfoService->UserInfosModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user_infos/user_infos.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserInfoService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserInfosController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FileModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserInfoService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FileModule } from '../file/file.module';\nimport { UserInfosController } from './user_infos.controller';\nimport { UserInfoService } from './user_infos.service';\n\n@Module({\n  providers: [UserInfoService],\n  controllers: [UserInfosController],\n  exports: [UserInfoService],\n  imports: [FileModule],\n})\nexport class UserInfosModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserNotFoundException.html":{"url":"classes/UserNotFoundException.html","title":"class - UserNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meals/exceptions/not-found.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postemail: string)\n                    \n                \n                        \n                            \n                                Defined in src/meals/exceptions/not-found.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postemail\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from \"@nestjs/common\";\n\nclass UserNotFoundException extends NotFoundException {\n    constructor(postemail: string) {\n        super('User with email ' + postemail + ' not found.');\n    }\n}\n\nexport default UserNotFoundException;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserNotFoundException-1.html":{"url":"classes/UserNotFoundException-1.html","title":"class - UserNotFoundException-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sports_exercises/exceptions/not-found.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postemail: string)\n                    \n                \n                        \n                            \n                                Defined in src/sports_exercises/exceptions/not-found.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postemail\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from \"@nestjs/common\";\n\nclass UserNotFoundException extends NotFoundException {\n    constructor(postemail: string) {\n        super('User with email ' + postemail + ' not found.');\n    }\n}\n\nexport default UserNotFoundException;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserNotFoundException-2.html":{"url":"classes/UserNotFoundException-2.html","title":"class - UserNotFoundException-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user_infos/exceptions/not-found.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postid: string)\n                    \n                \n                        \n                            \n                                Defined in src/user_infos/exceptions/not-found.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from \"@nestjs/common\";\n\nclass UserNotFoundException extends NotFoundException {\n    constructor(postid: string) {\n        super('User with id ' + postid + ' not found');\n    }\n}\n\nexport class UserWithoutSidekickException extends NotFoundException {\n    constructor(postid: string) {\n        super('User with id ' + postid + ' doesn\\'t have sidekick');\n    }\n}\n\nexport default UserNotFoundException;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserWithoutSidekickException.html":{"url":"classes/UserWithoutSidekickException.html","title":"class - UserWithoutSidekickException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserWithoutSidekickException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user_infos/exceptions/not-found.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postid: string)\n                    \n                \n                        \n                            \n                                Defined in src/user_infos/exceptions/not-found.exception.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from \"@nestjs/common\";\n\nclass UserNotFoundException extends NotFoundException {\n    constructor(postid: string) {\n        super('User with id ' + postid + ' not found');\n    }\n}\n\nexport class UserWithoutSidekickException extends NotFoundException {\n    constructor(postid: string) {\n        super('User with id ' + postid + ' doesn\\'t have sidekick');\n    }\n}\n\nexport default UserNotFoundException;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/algo-matching/algo-matching.controller.ts\n            \n            controller\n            AlgoMatchingController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/algo-matching/algo-matching.service.ts\n            \n            injectable\n            AlgoMatchingService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.config.ts\n            \n            injectable\n            AuthConfig\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/auth/dto/auth.dto.ts\n            \n            class\n            AuthDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/aws.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/beta_users/beta_users.controller.ts\n            \n            controller\n            BetaUsersController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/beta_users/beta_users.service.ts\n            \n            injectable\n            BetaUsersService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/beta_users/dto/beta_users.dto.ts\n            \n            class\n            BetaUsersDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/bugs_beta/bugs_beta.controller.ts\n            \n            controller\n            BugsBetaController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/bugs_beta/bugs_beta.service.ts\n            \n            injectable\n            BugsBetaService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/bugs_beta/dto/bugs_beta.dto.ts\n            \n            class\n            BugsBetaDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/bugs_beta/dto/update.dto.ts\n            \n            class\n            UpdateBugsBetaDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/calories/calories.controller.ts\n            \n            controller\n            CaloriesController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/calories/calories.service.ts\n            \n            injectable\n            CaloriesService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/chat/chat.controller.ts\n            \n            controller\n            ChatController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/chat/chat.gateway.ts\n            \n            class\n            ChatGateway\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/chat/chat.helper.ts\n            \n            class\n            Rooms\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/chat/chat.service.ts\n            \n            injectable\n            ChatService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/common/decorators/current_user.decorator.ts\n            \n            variable\n            GetCurrentUserEmail\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/guards/at.guard.ts\n            \n            injectable\n            AtGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exercises_library/dto/create-exercises_library.dto.ts\n            \n            class\n            CreateExercisesLibraryDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/exercises_library/dto/update-exercises_library.dto.ts\n            \n            class\n            UpdateExercisesLibraryDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/exercises_library/exercises_library.controller.ts\n            \n            controller\n            ExercisesLibraryController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/exercises_library/exercises_library.service.ts\n            \n            injectable\n            ExercisesLibraryService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/file/file.controller.ts\n            \n            controller\n            FileController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/file/file.service.ts\n            \n            injectable\n            FileService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/form/dto/form.dto.ts\n            \n            class\n            FormDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/form/form.controller.ts\n            \n            controller\n            FormController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/form/form.service.ts\n            \n            injectable\n            FormService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meals/dto/meals.dto.ts\n            \n            class\n            MealsDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/meals/dto/update.dto.ts\n            \n            class\n            UpdateMealsDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/meals/exceptions/not-found.exception.ts\n            \n            class\n            UserNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meals/meals.controller.ts\n            \n            controller\n            MealsController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/meals/meals.service.ts\n            \n            injectable\n            MealsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/messages/messages.controller.ts\n            \n            controller\n            MessagesController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/messages/messages.service.ts\n            \n            injectable\n            MessagesService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/openff/dto/create-openff.dto.ts\n            \n            class\n            CreateOpenffDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/openff/dto/update-openff.dto.ts\n            \n            class\n            UpdateOpenffDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/openff/openff.controller.ts\n            \n            controller\n            OpenffController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/openff/openff.service.ts\n            \n            injectable\n            OpenffService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/planning/planning.controller.ts\n            \n            controller\n            PlanningController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/planning/planning.service.ts\n            \n            injectable\n            PlanningService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/preferences/dto/update-preference.dto.ts\n            \n            class\n            UpdatePreferenceDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/preferences/preferences.controller.ts\n            \n            controller\n            PreferencesController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/preferences/preferences.service.ts\n            \n            injectable\n            PreferencesService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/reports/reports.controller.ts\n            \n            controller\n            ReportsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/reports/reports.service.ts\n            \n            injectable\n            ReportsService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/sports_exercises/dto/sports_exercices.dto.ts\n            \n            class\n            SportsExerciseDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/sports_exercises/exceptions/not-found.exception.ts\n            \n            class\n            UserNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/sports_exercises/sports_exercises.controller.ts\n            \n            controller\n            SportsExerciseController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/sports_exercises/sports_exercises.service.ts\n            \n            injectable\n            SportsExerciseService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/steps/steps.controller.ts\n            \n            controller\n            StepsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/steps/steps.service.ts\n            \n            injectable\n            StepsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user_infos/dto/edit.dto.ts\n            \n            class\n            EditInfosDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/user_infos/dto/user.dto.ts\n            \n            class\n            UserInfosDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/user_infos/exceptions/not-found.exception.ts\n            \n            class\n            UserNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user_infos/exceptions/not-found.exception.ts\n            \n            class\n            UserWithoutSidekickException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user_infos/user_infos.controller.ts\n            \n            controller\n            UserInfosController\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/user_infos/user_infos.service.ts\n            \n            injectable\n            UserInfoService\n            \n                0 %\n                (0/12)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @aws-sdk/client-s3 : ^3.289.0\n        \n            @nestjs/common : ^9.3.9\n        \n            @nestjs/config : ^2.3.1\n        \n            @nestjs/core : ^9.3.9\n        \n            @nestjs/jwt : ^10.0.2\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^9.0.3\n        \n            @nestjs/platform-express : ^9.3.9\n        \n            @nestjs/platform-socket.io : ^9.3.9\n        \n            @nestjs/websockets : ^9.3.9\n        \n            @prisma/client : ^4.5.0\n        \n            amazon-cognito-identity-js : ^5.2.10\n        \n            argon2 : ^0.28.5\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            dotenv-cli : ^5.1.0\n        \n            jwks-rsa : ^2.1.4\n        \n            multer-s3 : ^3.0.1\n        \n            passport : ^0.5.3\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            uuid : ^9.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nlaunch db: docker-compose upgenerate schema: npx prisma generateseed: npx prisma db seeddev: npm run start:dev\nupdate tables when modifying schema.prisma : npx prisma migrate dev\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 Sidekick\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AlgoMatchingModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BetaUsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BugsBetaModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CaloriesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ChatModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ExercisesLibraryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FileModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FormModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MealsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MessagesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OpenffModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PlanningModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PreferencesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ReportsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SportsExerciseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StepsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserInfosModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AlgoMatchingModule\n\n\n\ncluster_AlgoMatchingModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_BetaUsersModule\n\n\n\ncluster_BetaUsersModule_providers\n\n\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_providers\n\n\n\ncluster_ExercisesLibraryModule\n\n\n\ncluster_ExercisesLibraryModule_providers\n\n\n\ncluster_FileModule\n\n\n\ncluster_FileModule_exports\n\n\n\ncluster_FileModule_providers\n\n\n\ncluster_FormModule\n\n\n\ncluster_FormModule_providers\n\n\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_providers\n\n\n\ncluster_OpenffModule\n\n\n\ncluster_OpenffModule_providers\n\n\n\ncluster_PlanningModule\n\n\n\ncluster_PlanningModule_providers\n\n\n\ncluster_PreferencesModule\n\n\n\ncluster_PreferencesModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_ReportsModule\n\n\n\ncluster_ReportsModule_providers\n\n\n\ncluster_SportsExerciseModule\n\n\n\ncluster_SportsExerciseModule_providers\n\n\n\ncluster_StepsModule\n\n\n\ncluster_StepsModule_providers\n\n\n\ncluster_UserInfosModule\n\n\n\ncluster_UserInfosModule_exports\n\n\n\ncluster_UserInfosModule_providers\n\n\n\n\nAlgoMatchingService\n\nAlgoMatchingService\n\n\n\nAlgoMatchingModule\n\nAlgoMatchingModule\n\nAlgoMatchingModule -->\n\nAlgoMatchingService->AlgoMatchingModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nBetaUsersModule\n\nBetaUsersModule\n\nAppModule -->\n\nBetaUsersModule->AppModule\n\n\n\n\n\nBugsBetaModule\n\nBugsBetaModule\n\nAppModule -->\n\nBugsBetaModule->AppModule\n\n\n\n\n\nCaloriesModule\n\nCaloriesModule\n\nAppModule -->\n\nCaloriesModule->AppModule\n\n\n\n\n\nChatModule\n\nChatModule\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nExercisesLibraryModule\n\nExercisesLibraryModule\n\nAppModule -->\n\nExercisesLibraryModule->AppModule\n\n\n\n\n\nFileModule\n\nFileModule\n\n\n\nUserInfosModule\n\nUserInfosModule\n\nUserInfosModule -->\n\nFileModule->UserInfosModule\n\n\n\nAppModule -->\n\nFileModule->AppModule\n\n\n\n\n\nFileService \n\nFileService \n\nFileService  -->\n\nFileModule->FileService \n\n\n\n\n\nFormModule\n\nFormModule\n\nAppModule -->\n\nFormModule->AppModule\n\n\n\n\n\nMealsModule\n\nMealsModule\n\nAppModule -->\n\nMealsModule->AppModule\n\n\n\n\n\nMessagesModule\n\nMessagesModule\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\n\n\nOpenffModule\n\nOpenffModule\n\nAppModule -->\n\nOpenffModule->AppModule\n\n\n\n\n\nPlanningModule\n\nPlanningModule\n\nAppModule -->\n\nPlanningModule->AppModule\n\n\n\n\n\nPreferencesModule\n\nPreferencesModule\n\nAppModule -->\n\nPreferencesModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nFormModule -->\n\nPrismaModule->FormModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nReportsModule\n\nReportsModule\n\nAppModule -->\n\nReportsModule->AppModule\n\n\n\nAppModule -->\n\nReportsModule->AppModule\n\n\n\n\n\nSportsExerciseModule\n\nSportsExerciseModule\n\nAppModule -->\n\nSportsExerciseModule->AppModule\n\n\n\n\n\nStepsModule\n\nStepsModule\n\nAppModule -->\n\nStepsModule->AppModule\n\n\n\nChatModule -->\n\nUserInfosModule->ChatModule\n\n\n\nAppModule -->\n\nUserInfosModule->AppModule\n\n\n\n\n\nUserInfoService \n\nUserInfoService \n\nUserInfoService  -->\n\nUserInfosModule->UserInfoService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nBugsBetaService\n\nBugsBetaService\n\nAppModule -->\n\nBugsBetaService->AppModule\n\n\n\n\n\nCaloriesService\n\nCaloriesService\n\nCaloriesModule -->\n\nCaloriesService->CaloriesModule\n\n\n\nAppModule -->\n\nCaloriesService->AppModule\n\n\n\n\n\nMealsService\n\nMealsService\n\nMealsModule -->\n\nMealsService->MealsModule\n\n\n\nAppModule -->\n\nMealsService->AppModule\n\n\n\n\n\nAuthConfig\n\nAuthConfig\n\nAuthModule -->\n\nAuthConfig->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nBetaUsersService\n\nBetaUsersService\n\nBetaUsersModule -->\n\nBetaUsersService->BetaUsersModule\n\n\n\n\n\nChatService\n\nChatService\n\nChatModule -->\n\nChatService->ChatModule\n\n\n\n\n\nExercisesLibraryService\n\nExercisesLibraryService\n\nExercisesLibraryModule -->\n\nExercisesLibraryService->ExercisesLibraryModule\n\n\n\n\n\nFileService\n\nFileService\n\nFileModule -->\n\nFileService->FileModule\n\n\n\n\n\nFormService\n\nFormService\n\nFormModule -->\n\nFormService->FormModule\n\n\n\n\n\nMessagesService\n\nMessagesService\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\nOpenffService\n\nOpenffService\n\nOpenffModule -->\n\nOpenffService->OpenffModule\n\n\n\n\n\nPlanningService\n\nPlanningService\n\nPlanningModule -->\n\nPlanningService->PlanningModule\n\n\n\n\n\nPreferencesService\n\nPreferencesService\n\nPreferencesModule -->\n\nPreferencesService->PreferencesModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\nStepsModule -->\n\nPrismaService->StepsModule\n\n\n\n\n\nReportsService\n\nReportsService\n\nReportsModule -->\n\nReportsService->ReportsModule\n\n\n\n\n\nSportsExerciseService\n\nSportsExerciseService\n\nSportsExerciseModule -->\n\nSportsExerciseService->SportsExerciseModule\n\n\n\n\n\nStepsService\n\nStepsService\n\nStepsModule -->\n\nStepsService->StepsModule\n\n\n\n\n\nUserInfoService\n\nUserInfoService\n\nUserInfosModule -->\n\nUserInfoService->UserInfosModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        20 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    19 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    23 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    21 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Room   (src/.../chat.helper.ts)\n                        \n                        \n                            SocketUser   (src/.../chat.helper.ts)\n                        \n                        \n                            Tokens   (src/.../tokens.types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/chat/chat.helper.ts\n    \n    \n        \n            \n                \n                    \n                    Room\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SocketUser\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/auth/types/tokens.types.ts\n    \n    \n        \n            \n                \n                    \n                    Tokens\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GetCurrentUserEmail   (src/.../current_user.decorator.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/decorators/current_user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetCurrentUserEmail\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: undefined, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n    return request?.user?.email;\n  }\n)\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata('isPublic', true)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
